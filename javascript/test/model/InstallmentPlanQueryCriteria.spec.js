/**
 * splitit-web-api-public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SplititWebApiPublic);
  }
}(this, function(expect, SplititWebApiPublic) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstallmentPlanQueryCriteria', function() {
    it('should create an instance of InstallmentPlanQueryCriteria', function() {
      // uncomment below and update the code to test InstallmentPlanQueryCriteria
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be.a(SplititWebApiPublic.InstallmentPlanQueryCriteria);
    });

    it('should have the property merchantId (base name: "MerchantId")', function() {
      // uncomment below and update the code to test the property merchantId
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property currencyId (base name: "CurrencyId")', function() {
      // uncomment below and update the code to test the property currencyId
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property terminalId (base name: "TerminalId")', function() {
      // uncomment below and update the code to test the property terminalId
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property installmentPlanId (base name: "InstallmentPlanId")', function() {
      // uncomment below and update the code to test the property installmentPlanId
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property installmentPlanNumber (base name: "InstallmentPlanNumber")', function() {
      // uncomment below and update the code to test the property installmentPlanNumber
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property refOrderNumber (base name: "RefOrderNumber")', function() {
      // uncomment below and update the code to test the property refOrderNumber
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property installmentPlanAmount (base name: "InstallmentPlanAmount")', function() {
      // uncomment below and update the code to test the property installmentPlanAmount
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property cardNumber (base name: "CardNumber")', function() {
      // uncomment below and update the code to test the property cardNumber
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property consumerName (base name: "ConsumerName")', function() {
      // uncomment below and update the code to test the property consumerName
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property consumerEmail (base name: "ConsumerEmail")', function() {
      // uncomment below and update the code to test the property consumerEmail
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property cardHolder (base name: "CardHolder")', function() {
      // uncomment below and update the code to test the property cardHolder
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property pisMemberId (base name: "PisMemberId")', function() {
      // uncomment below and update the code to test the property pisMemberId
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property anyFilter (base name: "AnyFilter")', function() {
      // uncomment below and update the code to test the property anyFilter
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property eula (base name: "Eula")', function() {
      // uncomment below and update the code to test the property eula
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property initiatedStatuses (base name: "InitiatedStatuses")', function() {
      // uncomment below and update the code to test the property initiatedStatuses
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property fraudCheckResult (base name: "FraudCheckResult")', function() {
      // uncomment below and update the code to test the property fraudCheckResult
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property installmentsPlanStatuses (base name: "InstallmentsPlanStatuses")', function() {
      // uncomment below and update the code to test the property installmentsPlanStatuses
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property testModes (base name: "TestModes")', function() {
      // uncomment below and update the code to test the property testModes
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property delayResolutions (base name: "DelayResolutions")', function() {
      // uncomment below and update the code to test the property delayResolutions
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property transactionInformation (base name: "TransactionInformation")', function() {
      // uncomment below and update the code to test the property transactionInformation
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

    it('should have the property dateInfo (base name: "DateInfo")', function() {
      // uncomment below and update the code to test the property dateInfo
      //var instane = new SplititWebApiPublic.InstallmentPlanQueryCriteria();
      //expect(instance).to.be();
    });

  });

}));
