/*
 * splitit-web-api-public-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.splitit.sdk.api;

import com.splitit.ApiCallback;
import com.splitit.ApiClient;
import com.splitit.ApiException;
import com.splitit.ApiResponse;
import com.splitit.Configuration;
import com.splitit.Pair;
import com.splitit.ProgressRequestBody;
import com.splitit.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.splitit.sdk.model.ApproveInstallmentPlanRequest;
import com.splitit.sdk.model.CancelInstallmentPlanRequest;
import com.splitit.sdk.model.ChargebackRequest;
import com.splitit.sdk.model.CreateInstallmentPlanRequest;
import com.splitit.sdk.model.CreateInstallmentsPlanResponse;
import com.splitit.sdk.model.Get3DSecureParametersRequest;
import com.splitit.sdk.model.Get3DSecureParametersResponse;
import com.splitit.sdk.model.GetFraudStatusDisplayRequest;
import com.splitit.sdk.model.GetFraudStatusDisplayResponse;
import com.splitit.sdk.model.GetInitiatedInstallmentPlanRequest;
import com.splitit.sdk.model.GetInitiatedInstallmentPlanResponse;
import com.splitit.sdk.model.GetInitiatedUpdatePaymentDataResponse;
import com.splitit.sdk.model.GetInstallmentSchedulesRequest;
import com.splitit.sdk.model.GetInstallmentsPlanExtendedResponse;
import com.splitit.sdk.model.GetInstallmentsPlanResponse;
import com.splitit.sdk.model.GetInstallmentsPlanSearchCriteriaRequest;
import com.splitit.sdk.model.GetInstallmentsScheduleResponse;
import com.splitit.sdk.model.GetPGTLRequest;
import com.splitit.sdk.model.GetPGTLResponse;
import com.splitit.sdk.model.InitiateInstallmentPlanRequest;
import com.splitit.sdk.model.InitiateInstallmentsPlanResponse;
import com.splitit.sdk.model.InstallmentPlanResponse;
import com.splitit.sdk.model.LearnMoreDetailsRequest;
import com.splitit.sdk.model.LearnMoreDetailsResponse;
import com.splitit.sdk.model.RefundInstallmentPlanResponse;
import com.splitit.sdk.model.RefundPlanRequest;
import com.splitit.sdk.model.StartInstallmentsRequest;
import com.splitit.sdk.model.TermsAndConditionsGetRequest;
import com.splitit.sdk.model.TermsAndConditionsGetResponse;
import com.splitit.sdk.model.TestCardRequest;
import com.splitit.sdk.model.UpdateInstallmentPlanRequest;
import com.splitit.sdk.model.UpdateInstallmentsPlanResponse;
import com.splitit.sdk.model.VerifyPaymentRequest;
import com.splitit.sdk.model.VerifyPaymentResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstallmentPlanApi {
    protected ApiClient apiClient;

    public InstallmentPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstallmentPlanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for installmentPlanApprove
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanApproveCall(ApproveInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Approve";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanApproveValidateBeforeCall(ApproveInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanApprove(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanApproveCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return InstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstallmentPlanResponse installmentPlanApprove(ApproveInstallmentPlanRequest request) throws ApiException {
        ApiResponse<InstallmentPlanResponse> resp = installmentPlanApproveWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;InstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstallmentPlanResponse> installmentPlanApproveWithHttpInfo(ApproveInstallmentPlanRequest request) throws ApiException {
        if ("installmentPlanApprove" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanApproveValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanApprove" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanApproveValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanApproveAsync(ApproveInstallmentPlanRequest request, final ApiCallback<InstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanApproveValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanCancel
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanCancelCall(CancelInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanCancelValidateBeforeCall(CancelInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanCancel(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanCancelCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return InstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstallmentPlanResponse installmentPlanCancel(CancelInstallmentPlanRequest request) throws ApiException {
        ApiResponse<InstallmentPlanResponse> resp = installmentPlanCancelWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;InstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstallmentPlanResponse> installmentPlanCancelWithHttpInfo(CancelInstallmentPlanRequest request) throws ApiException {
        if ("installmentPlanCancel" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanCancelValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanCancel" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanCancelValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanCancelAsync(CancelInstallmentPlanRequest request, final ApiCallback<InstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanCancelValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanChargeBack
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanChargeBackCall(ChargebackRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/ChargeBack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanChargeBackValidateBeforeCall(ChargebackRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanChargeBack(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanChargeBackCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return InstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstallmentPlanResponse installmentPlanChargeBack(ChargebackRequest request) throws ApiException {
        ApiResponse<InstallmentPlanResponse> resp = installmentPlanChargeBackWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;InstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstallmentPlanResponse> installmentPlanChargeBackWithHttpInfo(ChargebackRequest request) throws ApiException {
        if ("installmentPlanChargeBack" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanChargeBackValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanChargeBack" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanChargeBackValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanChargeBackAsync(ChargebackRequest request, final ApiCallback<InstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanChargeBackValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanCreate
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanCreateCall(CreateInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanCreateValidateBeforeCall(CreateInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanCreate(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanCreateCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return CreateInstallmentsPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateInstallmentsPlanResponse installmentPlanCreate(CreateInstallmentPlanRequest request) throws ApiException {
        ApiResponse<CreateInstallmentsPlanResponse> resp = installmentPlanCreateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;CreateInstallmentsPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateInstallmentsPlanResponse> installmentPlanCreateWithHttpInfo(CreateInstallmentPlanRequest request) throws ApiException {
        if ("installmentPlanCreate" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanCreateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<CreateInstallmentsPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanCreate" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanCreateValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<CreateInstallmentsPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanCreateAsync(CreateInstallmentPlanRequest request, final ApiCallback<CreateInstallmentsPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanCreateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateInstallmentsPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGet
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetCall(GetInstallmentsPlanSearchCriteriaRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetValidateBeforeCall(GetInstallmentsPlanSearchCriteriaRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGet(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return GetInstallmentsPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetInstallmentsPlanResponse installmentPlanGet(GetInstallmentsPlanSearchCriteriaRequest request) throws ApiException {
        ApiResponse<GetInstallmentsPlanResponse> resp = installmentPlanGetWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;GetInstallmentsPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetInstallmentsPlanResponse> installmentPlanGetWithHttpInfo(GetInstallmentsPlanSearchCriteriaRequest request) throws ApiException {
        if ("installmentPlanGet" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<GetInstallmentsPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGet" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<GetInstallmentsPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetAsync(GetInstallmentsPlanSearchCriteriaRequest request, final ApiCallback<GetInstallmentsPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetInstallmentsPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGet3DSecureParameters
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGet3DSecureParametersCall(Get3DSecureParametersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Get3DSecureParameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGet3DSecureParametersValidateBeforeCall(Get3DSecureParametersRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGet3DSecureParameters(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGet3DSecureParametersCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return Get3DSecureParametersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Get3DSecureParametersResponse installmentPlanGet3DSecureParameters(Get3DSecureParametersRequest request) throws ApiException {
        ApiResponse<Get3DSecureParametersResponse> resp = installmentPlanGet3DSecureParametersWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;Get3DSecureParametersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Get3DSecureParametersResponse> installmentPlanGet3DSecureParametersWithHttpInfo(Get3DSecureParametersRequest request) throws ApiException {
        if ("installmentPlanGet3DSecureParameters" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGet3DSecureParametersValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<Get3DSecureParametersResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGet3DSecureParameters" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGet3DSecureParametersValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<Get3DSecureParametersResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGet3DSecureParametersAsync(Get3DSecureParametersRequest request, final ApiCallback<Get3DSecureParametersResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGet3DSecureParametersValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Get3DSecureParametersResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetExtended
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetExtendedCall(GetInstallmentsPlanSearchCriteriaRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetExtended";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetExtendedValidateBeforeCall(GetInstallmentsPlanSearchCriteriaRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGetExtended(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetExtendedCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return GetInstallmentsPlanExtendedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetInstallmentsPlanExtendedResponse installmentPlanGetExtended(GetInstallmentsPlanSearchCriteriaRequest request) throws ApiException {
        ApiResponse<GetInstallmentsPlanExtendedResponse> resp = installmentPlanGetExtendedWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;GetInstallmentsPlanExtendedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetInstallmentsPlanExtendedResponse> installmentPlanGetExtendedWithHttpInfo(GetInstallmentsPlanSearchCriteriaRequest request) throws ApiException {
        if ("installmentPlanGetExtended" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetExtendedValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<GetInstallmentsPlanExtendedResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetExtended" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetExtendedValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<GetInstallmentsPlanExtendedResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetExtendedAsync(GetInstallmentsPlanSearchCriteriaRequest request, final ApiCallback<GetInstallmentsPlanExtendedResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetExtendedValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetInstallmentsPlanExtendedResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetFraudStatusDisplay
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetFraudStatusDisplayCall(GetFraudStatusDisplayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetFraudStatusDisplay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetFraudStatusDisplayValidateBeforeCall(GetFraudStatusDisplayRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGetFraudStatusDisplay(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetFraudStatusDisplayCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return GetFraudStatusDisplayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetFraudStatusDisplayResponse installmentPlanGetFraudStatusDisplay(GetFraudStatusDisplayRequest request) throws ApiException {
        ApiResponse<GetFraudStatusDisplayResponse> resp = installmentPlanGetFraudStatusDisplayWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;GetFraudStatusDisplayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetFraudStatusDisplayResponse> installmentPlanGetFraudStatusDisplayWithHttpInfo(GetFraudStatusDisplayRequest request) throws ApiException {
        if ("installmentPlanGetFraudStatusDisplay" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetFraudStatusDisplayValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<GetFraudStatusDisplayResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetFraudStatusDisplay" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetFraudStatusDisplayValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<GetFraudStatusDisplayResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetFraudStatusDisplayAsync(GetFraudStatusDisplayRequest request, final ApiCallback<GetFraudStatusDisplayResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetFraudStatusDisplayValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetFraudStatusDisplayResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetInitiatedInstallmentPlanRequest
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetInitiatedInstallmentPlanRequestCall(GetInitiatedInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetInitiatedInstallmentPlanRequest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetInitiatedInstallmentPlanRequestValidateBeforeCall(GetInitiatedInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGetInitiatedInstallmentPlanRequest(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetInitiatedInstallmentPlanRequestCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return GetInitiatedInstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetInitiatedInstallmentPlanResponse installmentPlanGetInitiatedInstallmentPlanRequest(GetInitiatedInstallmentPlanRequest request) throws ApiException {
        ApiResponse<GetInitiatedInstallmentPlanResponse> resp = installmentPlanGetInitiatedInstallmentPlanRequestWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;GetInitiatedInstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetInitiatedInstallmentPlanResponse> installmentPlanGetInitiatedInstallmentPlanRequestWithHttpInfo(GetInitiatedInstallmentPlanRequest request) throws ApiException {
        if ("installmentPlanGetInitiatedInstallmentPlanRequest" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetInitiatedInstallmentPlanRequestValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<GetInitiatedInstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetInitiatedInstallmentPlanRequest" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetInitiatedInstallmentPlanRequestValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<GetInitiatedInstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetInitiatedInstallmentPlanRequestAsync(GetInitiatedInstallmentPlanRequest request, final ApiCallback<GetInitiatedInstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetInitiatedInstallmentPlanRequestValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetInitiatedInstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetInitiatedUpdatePaymentData
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetInitiatedUpdatePaymentDataCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetInitiatedUpdatePaymentData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetInitiatedUpdatePaymentDataValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = installmentPlanGetInitiatedUpdatePaymentDataCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @return GetInitiatedUpdatePaymentDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetInitiatedUpdatePaymentDataResponse installmentPlanGetInitiatedUpdatePaymentData() throws ApiException {
        ApiResponse<GetInitiatedUpdatePaymentDataResponse> resp = installmentPlanGetInitiatedUpdatePaymentDataWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;GetInitiatedUpdatePaymentDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetInitiatedUpdatePaymentDataResponse> installmentPlanGetInitiatedUpdatePaymentDataWithHttpInfo() throws ApiException {
        if ("installmentPlanGetInitiatedUpdatePaymentData" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetInitiatedUpdatePaymentDataValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetInitiatedUpdatePaymentDataResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetInitiatedUpdatePaymentData" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetInitiatedUpdatePaymentDataValidateBeforeCall(null, null);
                localVarReturnType = new TypeToken<GetInitiatedUpdatePaymentDataResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetInitiatedUpdatePaymentDataAsync(final ApiCallback<GetInitiatedUpdatePaymentDataResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetInitiatedUpdatePaymentDataValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetInitiatedUpdatePaymentDataResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetLearnMoreDetails
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetLearnMoreDetailsCall(LearnMoreDetailsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetLearnMoreDetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetLearnMoreDetailsValidateBeforeCall(LearnMoreDetailsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGetLearnMoreDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetLearnMoreDetailsCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return LearnMoreDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public LearnMoreDetailsResponse installmentPlanGetLearnMoreDetails(LearnMoreDetailsRequest request) throws ApiException {
        ApiResponse<LearnMoreDetailsResponse> resp = installmentPlanGetLearnMoreDetailsWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;LearnMoreDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<LearnMoreDetailsResponse> installmentPlanGetLearnMoreDetailsWithHttpInfo(LearnMoreDetailsRequest request) throws ApiException {
        if ("installmentPlanGetLearnMoreDetails" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetLearnMoreDetailsValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<LearnMoreDetailsResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetLearnMoreDetails" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetLearnMoreDetailsValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<LearnMoreDetailsResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetLearnMoreDetailsAsync(LearnMoreDetailsRequest request, final ApiCallback<LearnMoreDetailsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetLearnMoreDetailsValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<LearnMoreDetailsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetPGTL
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetPGTLCall(GetPGTLRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetPGTL";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetPGTLValidateBeforeCall(GetPGTLRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGetPGTL(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetPGTLCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return GetPGTLResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPGTLResponse installmentPlanGetPGTL(GetPGTLRequest request) throws ApiException {
        ApiResponse<GetPGTLResponse> resp = installmentPlanGetPGTLWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;GetPGTLResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPGTLResponse> installmentPlanGetPGTLWithHttpInfo(GetPGTLRequest request) throws ApiException {
        if ("installmentPlanGetPGTL" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetPGTLValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<GetPGTLResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetPGTL" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetPGTLValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<GetPGTLResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetPGTLAsync(GetPGTLRequest request, final ApiCallback<GetPGTLResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetPGTLValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPGTLResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanGetSchedules
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetSchedulesCall(GetInstallmentSchedulesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/GetSchedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanGetSchedulesValidateBeforeCall(GetInstallmentSchedulesRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanGetSchedules(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanGetSchedulesCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return GetInstallmentsScheduleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetInstallmentsScheduleResponse installmentPlanGetSchedules(GetInstallmentSchedulesRequest request) throws ApiException {
        ApiResponse<GetInstallmentsScheduleResponse> resp = installmentPlanGetSchedulesWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;GetInstallmentsScheduleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetInstallmentsScheduleResponse> installmentPlanGetSchedulesWithHttpInfo(GetInstallmentSchedulesRequest request) throws ApiException {
        if ("installmentPlanGetSchedules" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanGetSchedulesValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<GetInstallmentsScheduleResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanGetSchedules" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanGetSchedulesValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<GetInstallmentsScheduleResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanGetSchedulesAsync(GetInstallmentSchedulesRequest request, final ApiCallback<GetInstallmentsScheduleResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanGetSchedulesValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetInstallmentsScheduleResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanInitiate
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanInitiateCall(InitiateInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Initiate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanInitiateValidateBeforeCall(InitiateInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanInitiate(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanInitiateCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return InitiateInstallmentsPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InitiateInstallmentsPlanResponse installmentPlanInitiate(InitiateInstallmentPlanRequest request) throws ApiException {
        ApiResponse<InitiateInstallmentsPlanResponse> resp = installmentPlanInitiateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;InitiateInstallmentsPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InitiateInstallmentsPlanResponse> installmentPlanInitiateWithHttpInfo(InitiateInstallmentPlanRequest request) throws ApiException {
        if ("installmentPlanInitiate" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanInitiateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<InitiateInstallmentsPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanInitiate" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanInitiateValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<InitiateInstallmentsPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanInitiateAsync(InitiateInstallmentPlanRequest request, final ApiCallback<InitiateInstallmentsPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanInitiateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InitiateInstallmentsPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanRefund
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanRefundCall(RefundPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Refund";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanRefundValidateBeforeCall(RefundPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanRefund(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanRefundCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return RefundInstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RefundInstallmentPlanResponse installmentPlanRefund(RefundPlanRequest request) throws ApiException {
        ApiResponse<RefundInstallmentPlanResponse> resp = installmentPlanRefundWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;RefundInstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RefundInstallmentPlanResponse> installmentPlanRefundWithHttpInfo(RefundPlanRequest request) throws ApiException {
        if ("installmentPlanRefund" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanRefundValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<RefundInstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanRefund" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanRefundValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<RefundInstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanRefundAsync(RefundPlanRequest request, final ApiCallback<RefundInstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanRefundValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RefundInstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanStartInstallments
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanStartInstallmentsCall(StartInstallmentsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/StartInstallments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanStartInstallmentsValidateBeforeCall(StartInstallmentsRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanStartInstallments(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanStartInstallmentsCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return InstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstallmentPlanResponse installmentPlanStartInstallments(StartInstallmentsRequest request) throws ApiException {
        ApiResponse<InstallmentPlanResponse> resp = installmentPlanStartInstallmentsWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;InstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstallmentPlanResponse> installmentPlanStartInstallmentsWithHttpInfo(StartInstallmentsRequest request) throws ApiException {
        if ("installmentPlanStartInstallments" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanStartInstallmentsValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanStartInstallments" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanStartInstallmentsValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanStartInstallmentsAsync(StartInstallmentsRequest request, final ApiCallback<InstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanStartInstallmentsValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanTermsAndConditions
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanTermsAndConditionsCall(TermsAndConditionsGetRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/TermsAndConditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanTermsAndConditionsValidateBeforeCall(TermsAndConditionsGetRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanTermsAndConditions(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanTermsAndConditionsCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return TermsAndConditionsGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TermsAndConditionsGetResponse installmentPlanTermsAndConditions(TermsAndConditionsGetRequest request) throws ApiException {
        ApiResponse<TermsAndConditionsGetResponse> resp = installmentPlanTermsAndConditionsWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;TermsAndConditionsGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TermsAndConditionsGetResponse> installmentPlanTermsAndConditionsWithHttpInfo(TermsAndConditionsGetRequest request) throws ApiException {
        if ("installmentPlanTermsAndConditions" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanTermsAndConditionsValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<TermsAndConditionsGetResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanTermsAndConditions" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanTermsAndConditionsValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<TermsAndConditionsGetResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanTermsAndConditionsAsync(TermsAndConditionsGetRequest request, final ApiCallback<TermsAndConditionsGetResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanTermsAndConditionsValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TermsAndConditionsGetResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanTestCard
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanTestCardCall(TestCardRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/TestCard";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanTestCardValidateBeforeCall(TestCardRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanTestCard(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanTestCardCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return InstallmentPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InstallmentPlanResponse installmentPlanTestCard(TestCardRequest request) throws ApiException {
        ApiResponse<InstallmentPlanResponse> resp = installmentPlanTestCardWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;InstallmentPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InstallmentPlanResponse> installmentPlanTestCardWithHttpInfo(TestCardRequest request) throws ApiException {
        if ("installmentPlanTestCard" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanTestCardValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanTestCard" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanTestCardValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanTestCardAsync(TestCardRequest request, final ApiCallback<InstallmentPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanTestCardValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InstallmentPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanUpdate
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanUpdateCall(UpdateInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanUpdateValidateBeforeCall(UpdateInstallmentPlanRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanUpdate(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanUpdateCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return UpdateInstallmentsPlanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateInstallmentsPlanResponse installmentPlanUpdate(UpdateInstallmentPlanRequest request) throws ApiException {
        ApiResponse<UpdateInstallmentsPlanResponse> resp = installmentPlanUpdateWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;UpdateInstallmentsPlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateInstallmentsPlanResponse> installmentPlanUpdateWithHttpInfo(UpdateInstallmentPlanRequest request) throws ApiException {
        if ("installmentPlanUpdate" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanUpdateValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<UpdateInstallmentsPlanResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanUpdate" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanUpdateValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<UpdateInstallmentsPlanResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanUpdateAsync(UpdateInstallmentPlanRequest request, final ApiCallback<UpdateInstallmentsPlanResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanUpdateValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UpdateInstallmentsPlanResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for installmentPlanVerifyPayment
     * @param request  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call installmentPlanVerifyPaymentCall(VerifyPaymentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/api/InstallmentPlan/Get/VerifyPayment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json-patch+json", "application/json", "text/json", "application/_*+json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call installmentPlanVerifyPaymentValidateBeforeCall(VerifyPaymentRequest request, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling installmentPlanVerifyPayment(Async)");
        }
        

        com.squareup.okhttp.Call call = installmentPlanVerifyPaymentCall(request, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param request  (required)
     * @return VerifyPaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public VerifyPaymentResponse installmentPlanVerifyPayment(VerifyPaymentRequest request) throws ApiException {
        ApiResponse<VerifyPaymentResponse> resp = installmentPlanVerifyPaymentWithHttpInfo(request);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param request  (required)
     * @return ApiResponse&lt;VerifyPaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<VerifyPaymentResponse> installmentPlanVerifyPaymentWithHttpInfo(VerifyPaymentRequest request) throws ApiException {
        if ("installmentPlanVerifyPayment" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = installmentPlanVerifyPaymentValidateBeforeCall(request, null, null);
        Type localVarReturnType = new TypeToken<VerifyPaymentResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("installmentPlanVerifyPayment" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = installmentPlanVerifyPaymentValidateBeforeCall(request, null, null);
                localVarReturnType = new TypeToken<VerifyPaymentResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param request  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call installmentPlanVerifyPaymentAsync(VerifyPaymentRequest request, final ApiCallback<VerifyPaymentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = installmentPlanVerifyPaymentValidateBeforeCall(request, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<VerifyPaymentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
