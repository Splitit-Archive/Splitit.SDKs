/*
 * splitit-web-api-public-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.splitit.sdk.api;

import com.splitit.ApiCallback;
import com.splitit.ApiClient;
import com.splitit.ApiException;
import com.splitit.ApiResponse;
import com.splitit.Configuration;
import com.splitit.Pair;
import com.splitit.ProgressRequestBody;
import com.splitit.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import com.splitit.sdk.model.CreateInstallmentPlanLegacyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CreateInstallmentPlanApi {
    protected ApiClient apiClient;

    public CreateInstallmentPlanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CreateInstallmentPlanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createInstallmentPlanGet
     * @param amountBeforeFees  (optional)
     * @param apiKey  (optional)
     * @param avsAddress  (optional)
     * @param avsZip  (optional)
     * @param cardCvv  (optional)
     * @param cardExpMonth  (optional)
     * @param cardExpYear  (optional)
     * @param cardHolder  (optional)
     * @param cardNumber  (optional)
     * @param cardTypeId  (optional)
     * @param consumerFullName  (optional)
     * @param countryId  (optional)
     * @param email  (optional)
     * @param installmentNumber  (optional)
     * @param paramX  (optional)
     * @param sessionId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createInstallmentPlanGetCall(BigDecimal amountBeforeFees, String apiKey, String avsAddress, String avsZip, String cardCvv, String cardExpMonth, String cardExpYear, String cardHolder, String cardNumber, Integer cardTypeId, String consumerFullName, Integer countryId, String email, Integer installmentNumber, String paramX, String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/CreateInstallmentPlan";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (amountBeforeFees != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AmountBeforeFees", amountBeforeFees));
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ApiKey", apiKey));
        if (avsAddress != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AvsAddress", avsAddress));
        if (avsZip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("AvsZip", avsZip));
        if (cardCvv != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CardCvv", cardCvv));
        if (cardExpMonth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CardExpMonth", cardExpMonth));
        if (cardExpYear != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CardExpYear", cardExpYear));
        if (cardHolder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CardHolder", cardHolder));
        if (cardNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CardNumber", cardNumber));
        if (cardTypeId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CardTypeId", cardTypeId));
        if (consumerFullName != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ConsumerFullName", consumerFullName));
        if (countryId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("CountryId", countryId));
        if (email != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("Email", email));
        if (installmentNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("InstallmentNumber", installmentNumber));
        if (paramX != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ParamX", paramX));
        if (sessionId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("SessionId", sessionId));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createInstallmentPlanGetValidateBeforeCall(BigDecimal amountBeforeFees, String apiKey, String avsAddress, String avsZip, String cardCvv, String cardExpMonth, String cardExpYear, String cardHolder, String cardNumber, Integer cardTypeId, String consumerFullName, Integer countryId, String email, Integer installmentNumber, String paramX, String sessionId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = createInstallmentPlanGetCall(amountBeforeFees, apiKey, avsAddress, avsZip, cardCvv, cardExpMonth, cardExpYear, cardHolder, cardNumber, cardTypeId, consumerFullName, countryId, email, installmentNumber, paramX, sessionId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param amountBeforeFees  (optional)
     * @param apiKey  (optional)
     * @param avsAddress  (optional)
     * @param avsZip  (optional)
     * @param cardCvv  (optional)
     * @param cardExpMonth  (optional)
     * @param cardExpYear  (optional)
     * @param cardHolder  (optional)
     * @param cardNumber  (optional)
     * @param cardTypeId  (optional)
     * @param consumerFullName  (optional)
     * @param countryId  (optional)
     * @param email  (optional)
     * @param installmentNumber  (optional)
     * @param paramX  (optional)
     * @param sessionId  (optional)
     * @return CreateInstallmentPlanLegacyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreateInstallmentPlanLegacyResponse createInstallmentPlanGet(BigDecimal amountBeforeFees, String apiKey, String avsAddress, String avsZip, String cardCvv, String cardExpMonth, String cardExpYear, String cardHolder, String cardNumber, Integer cardTypeId, String consumerFullName, Integer countryId, String email, Integer installmentNumber, String paramX, String sessionId) throws ApiException {
        ApiResponse<CreateInstallmentPlanLegacyResponse> resp = createInstallmentPlanGetWithHttpInfo(amountBeforeFees, apiKey, avsAddress, avsZip, cardCvv, cardExpMonth, cardExpYear, cardHolder, cardNumber, cardTypeId, consumerFullName, countryId, email, installmentNumber, paramX, sessionId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param amountBeforeFees  (optional)
     * @param apiKey  (optional)
     * @param avsAddress  (optional)
     * @param avsZip  (optional)
     * @param cardCvv  (optional)
     * @param cardExpMonth  (optional)
     * @param cardExpYear  (optional)
     * @param cardHolder  (optional)
     * @param cardNumber  (optional)
     * @param cardTypeId  (optional)
     * @param consumerFullName  (optional)
     * @param countryId  (optional)
     * @param email  (optional)
     * @param installmentNumber  (optional)
     * @param paramX  (optional)
     * @param sessionId  (optional)
     * @return ApiResponse&lt;CreateInstallmentPlanLegacyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreateInstallmentPlanLegacyResponse> createInstallmentPlanGetWithHttpInfo(BigDecimal amountBeforeFees, String apiKey, String avsAddress, String avsZip, String cardCvv, String cardExpMonth, String cardExpYear, String cardHolder, String cardNumber, Integer cardTypeId, String consumerFullName, Integer countryId, String email, Integer installmentNumber, String paramX, String sessionId) throws ApiException {
        if ("createInstallmentPlanGet" != "loginPost") {
            apiClient.performAutologin(false);
        }

        com.squareup.okhttp.Call call = createInstallmentPlanGetValidateBeforeCall(amountBeforeFees, apiKey, avsAddress, avsZip, cardCvv, cardExpMonth, cardExpYear, cardHolder, cardNumber, cardTypeId, consumerFullName, countryId, email, installmentNumber, paramX, sessionId, null, null);
        Type localVarReturnType = new TypeToken<CreateInstallmentPlanLegacyResponse>(){}.getType();
        try{
            return apiClient.execute(call, localVarReturnType);
        } catch (ApiException e) {
            if (("createInstallmentPlanGet" != "loginPost") && (e.getCode() == 704)){
                // Stale session, force-relogin
                apiClient.performAutologin(true);
                // Re-generate the request (to include updated sessionID)
                call = createInstallmentPlanGetValidateBeforeCall(amountBeforeFees, apiKey, avsAddress, avsZip, cardCvv, cardExpMonth, cardExpYear, cardHolder, cardNumber, cardTypeId, consumerFullName, countryId, email, installmentNumber, paramX, sessionId, null, null);
                localVarReturnType = new TypeToken<CreateInstallmentPlanLegacyResponse>(){}.getType();
                return apiClient.execute(call, localVarReturnType);
            } else {
                throw e;
            }
        }
    }

    /**
     *  (asynchronously)
     * 
     * @param amountBeforeFees  (optional)
     * @param apiKey  (optional)
     * @param avsAddress  (optional)
     * @param avsZip  (optional)
     * @param cardCvv  (optional)
     * @param cardExpMonth  (optional)
     * @param cardExpYear  (optional)
     * @param cardHolder  (optional)
     * @param cardNumber  (optional)
     * @param cardTypeId  (optional)
     * @param consumerFullName  (optional)
     * @param countryId  (optional)
     * @param email  (optional)
     * @param installmentNumber  (optional)
     * @param paramX  (optional)
     * @param sessionId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createInstallmentPlanGetAsync(BigDecimal amountBeforeFees, String apiKey, String avsAddress, String avsZip, String cardCvv, String cardExpMonth, String cardExpYear, String cardHolder, String cardNumber, Integer cardTypeId, String consumerFullName, Integer countryId, String email, Integer installmentNumber, String paramX, String sessionId, final ApiCallback<CreateInstallmentPlanLegacyResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createInstallmentPlanGetValidateBeforeCall(amountBeforeFees, apiKey, avsAddress, avsZip, cardCvv, cardExpMonth, cardExpYear, cardHolder, cardNumber, cardTypeId, consumerFullName, countryId, email, installmentNumber, paramX, sessionId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreateInstallmentPlanLegacyResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
