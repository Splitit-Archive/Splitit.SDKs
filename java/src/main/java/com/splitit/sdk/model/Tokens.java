/*
 * splitit-web-api-public-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.splitit.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.splitit.sdk.model.EntityBase;
import com.splitit.sdk.model.InstallmentPlans;
import com.splitit.sdk.model.ParameterGroups;
import com.splitit.sdk.model.UserType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.threeten.bp.OffsetDateTime;

/**
 * Tokens
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-06T09:33:27.783Z")
public class Tokens  {
  @SerializedName("Id")
  private Long id = null;

  @SerializedName("Token")
  private String token = null;

  @SerializedName("ValidTill")
  private OffsetDateTime validTill = null;

  @SerializedName("LastUsage")
  private OffsetDateTime lastUsage = null;

  @SerializedName("ParameterGroupId")
  private Long parameterGroupId = null;

  @SerializedName("Type")
  private String type = null;

  @SerializedName("ParameterGroup")
  private ParameterGroups parameterGroup = null;

  @SerializedName("UserId")
  private Long userId = null;

  @SerializedName("UserType")
  private UserType userType = null;

  @SerializedName("InstallmentPlanId")
  private Long installmentPlanId = null;

  @SerializedName("InstallmentPlan")
  private InstallmentPlans installmentPlan = null;

  public Tokens id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public Tokens token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Get token
   * @return token
  **/
  @ApiModelProperty(value = "")
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public Tokens validTill(OffsetDateTime validTill) {
    this.validTill = validTill;
    return this;
  }

   /**
   * Get validTill
   * @return validTill
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getValidTill() {
    return validTill;
  }

  public void setValidTill(OffsetDateTime validTill) {
    this.validTill = validTill;
  }

  public Tokens lastUsage(OffsetDateTime lastUsage) {
    this.lastUsage = lastUsage;
    return this;
  }

   /**
   * Get lastUsage
   * @return lastUsage
  **/
  @ApiModelProperty(value = "")
  public OffsetDateTime getLastUsage() {
    return lastUsage;
  }

  public void setLastUsage(OffsetDateTime lastUsage) {
    this.lastUsage = lastUsage;
  }

  public Tokens parameterGroupId(Long parameterGroupId) {
    this.parameterGroupId = parameterGroupId;
    return this;
  }

   /**
   * Get parameterGroupId
   * @return parameterGroupId
  **/
  @ApiModelProperty(value = "")
  public Long getParameterGroupId() {
    return parameterGroupId;
  }

  public void setParameterGroupId(Long parameterGroupId) {
    this.parameterGroupId = parameterGroupId;
  }

  public Tokens type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @ApiModelProperty(value = "")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Tokens parameterGroup(ParameterGroups parameterGroup) {
    this.parameterGroup = parameterGroup;
    return this;
  }

   /**
   * Get parameterGroup
   * @return parameterGroup
  **/
  @ApiModelProperty(value = "")
  public ParameterGroups getParameterGroup() {
    return parameterGroup;
  }

  public void setParameterGroup(ParameterGroups parameterGroup) {
    this.parameterGroup = parameterGroup;
  }

  public Tokens userId(Long userId) {
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @ApiModelProperty(required = true, value = "")
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }

  public Tokens userType(UserType userType) {
    this.userType = userType;
    return this;
  }

   /**
   * Get userType
   * @return userType
  **/
  @ApiModelProperty(required = true, value = "")
  public UserType getUserType() {
    return userType;
  }

  public void setUserType(UserType userType) {
    this.userType = userType;
  }

  public Tokens installmentPlanId(Long installmentPlanId) {
    this.installmentPlanId = installmentPlanId;
    return this;
  }

   /**
   * Get installmentPlanId
   * @return installmentPlanId
  **/
  @ApiModelProperty(value = "")
  public Long getInstallmentPlanId() {
    return installmentPlanId;
  }

  public void setInstallmentPlanId(Long installmentPlanId) {
    this.installmentPlanId = installmentPlanId;
  }

  public Tokens installmentPlan(InstallmentPlans installmentPlan) {
    this.installmentPlan = installmentPlan;
    return this;
  }

   /**
   * Get installmentPlan
   * @return installmentPlan
  **/
  @ApiModelProperty(value = "")
  public InstallmentPlans getInstallmentPlan() {
    return installmentPlan;
  }

  public void setInstallmentPlan(InstallmentPlans installmentPlan) {
    this.installmentPlan = installmentPlan;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tokens tokens = (Tokens) o;
    return Objects.equals(this.id, tokens.id) &&
        Objects.equals(this.token, tokens.token) &&
        Objects.equals(this.validTill, tokens.validTill) &&
        Objects.equals(this.lastUsage, tokens.lastUsage) &&
        Objects.equals(this.parameterGroupId, tokens.parameterGroupId) &&
        Objects.equals(this.type, tokens.type) &&
        Objects.equals(this.parameterGroup, tokens.parameterGroup) &&
        Objects.equals(this.userId, tokens.userId) &&
        Objects.equals(this.userType, tokens.userType) &&
        Objects.equals(this.installmentPlanId, tokens.installmentPlanId) &&
        Objects.equals(this.installmentPlan, tokens.installmentPlan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, token, validTill, lastUsage, parameterGroupId, type, parameterGroup, userId, userType, installmentPlanId, installmentPlan);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tokens {\n");
    
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    validTill: ").append(toIndentedString(validTill)).append("\n");
    sb.append("    lastUsage: ").append(toIndentedString(lastUsage)).append("\n");
    sb.append("    parameterGroupId: ").append(toIndentedString(parameterGroupId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    parameterGroup: ").append(toIndentedString(parameterGroup)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("    installmentPlanId: ").append(toIndentedString(installmentPlanId)).append("\n");
    sb.append("    installmentPlan: ").append(toIndentedString(installmentPlan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

