/*
 * splitit-web-api-public-sdk
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.splitit.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.splitit.sdk.model.Cards;
import com.splitit.sdk.model.EntityBase;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * DEKData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-31T11:14:42.224Z")
public class DEKData  {
  @SerializedName("Id")
  private Long id = null;

  @SerializedName("CiphertextBlob")
  private String ciphertextBlob = null;

  @SerializedName("IsActive")
  private Boolean isActive = null;

  @SerializedName("DekCards")
  private List<Cards> dekCards = null;

  public DEKData id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public DEKData ciphertextBlob(String ciphertextBlob) {
    this.ciphertextBlob = ciphertextBlob;
    return this;
  }

   /**
   * Get ciphertextBlob
   * @return ciphertextBlob
  **/
  @ApiModelProperty(value = "")
  public String getCiphertextBlob() {
    return ciphertextBlob;
  }

  public void setCiphertextBlob(String ciphertextBlob) {
    this.ciphertextBlob = ciphertextBlob;
  }

  public DEKData isActive(Boolean isActive) {
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @ApiModelProperty(required = true, value = "")
  public Boolean isIsActive() {
    return isActive;
  }

  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }

  public DEKData dekCards(List<Cards> dekCards) {
    this.dekCards = dekCards;
    return this;
  }

  public DEKData addDekCardsItem(Cards dekCardsItem) {
    if (this.dekCards == null) {
      this.dekCards = new ArrayList<Cards>();
    }
    this.dekCards.add(dekCardsItem);
    return this;
  }

   /**
   * Get dekCards
   * @return dekCards
  **/
  @ApiModelProperty(value = "")
  public List<Cards> getDekCards() {
    return dekCards;
  }

  public void setDekCards(List<Cards> dekCards) {
    this.dekCards = dekCards;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DEKData deKData = (DEKData) o;
    return Objects.equals(this.id, deKData.id) &&
        Objects.equals(this.ciphertextBlob, deKData.ciphertextBlob) &&
        Objects.equals(this.isActive, deKData.isActive) &&
        Objects.equals(this.dekCards, deKData.dekCards);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, ciphertextBlob, isActive, dekCards);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DEKData {\n");
    
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ciphertextBlob: ").append(toIndentedString(ciphertextBlob)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    dekCards: ").append(toIndentedString(dekCards)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

