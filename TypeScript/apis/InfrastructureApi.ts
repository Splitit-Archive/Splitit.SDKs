/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetResourcesRequest,
    GetResourcesRequestFromJSON,
    GetResourcesRequestToJSON,
    GetResourcesResponse,
    GetResourcesResponseFromJSON,
    GetResourcesResponseToJSON,
    SystemTextCategory,
    SystemTextCategoryFromJSON,
    SystemTextCategoryToJSON,
} from '../models';

export interface InfrastructureGetResourcesRequest {
    request: GetResourcesRequest;
}

export interface InfrastructureGetResources2Request {
    apiKey?: string | null;
    sessionId?: string | null;
    merchantCode?: string | null;
    cultureName?: string | null;
    touchPointCode?: string | null;
    systemTextCategories?: Array<SystemTextCategory> | null;
}

/**
 * no description
 */
export class InfrastructureApi extends runtime.BaseAPI {

    /**
     */
    async infrastructureGetResourcesRaw(requestParameters: InfrastructureGetResourcesRequest): Promise<runtime.ApiResponse<GetResourcesResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling infrastructureGetResources.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Infrastructure/GetResources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetResourcesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetResourcesResponseFromJSON(jsonValue));
    }

    /**
     */
    async infrastructureGetResources(requestParameters: InfrastructureGetResourcesRequest): Promise<GetResourcesResponse> {
        const response = await this.infrastructureGetResourcesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async infrastructureGetResources2Raw(requestParameters: InfrastructureGetResources2Request): Promise<runtime.ApiResponse<GetResourcesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiKey !== undefined) {
            queryParameters['apiKey'] = requestParameters.apiKey;
        }

        if (requestParameters.sessionId !== undefined) {
            queryParameters['sessionId'] = requestParameters.sessionId;
        }

        if (requestParameters.merchantCode !== undefined) {
            queryParameters['merchantCode'] = requestParameters.merchantCode;
        }

        if (requestParameters.cultureName !== undefined) {
            queryParameters['cultureName'] = requestParameters.cultureName;
        }

        if (requestParameters.touchPointCode !== undefined) {
            queryParameters['touchPointCode'] = requestParameters.touchPointCode;
        }

        if (requestParameters.systemTextCategories) {
            queryParameters['systemTextCategories'] = requestParameters.systemTextCategories;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Infrastructure/GetResources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetResourcesResponseFromJSON(jsonValue));
    }

    /**
     */
    async infrastructureGetResources2(requestParameters: InfrastructureGetResources2Request): Promise<GetResourcesResponse> {
        const response = await this.infrastructureGetResources2Raw(requestParameters);
        return await response.value();
    }

}
