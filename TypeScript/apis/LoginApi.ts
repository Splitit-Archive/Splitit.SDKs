/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoginRequest,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponse,
    LoginResponseFromJSON,
    LoginResponseToJSON,
} from '../models';

export interface LoginGetRequest {
    userName?: string | null;
    password?: string | null;
}

export interface LoginPostRequest {
    request: LoginRequest;
}

/**
 * no description
 */
export class LoginApi extends runtime.BaseAPI {

    /**
     */
    async loginGetRaw(requestParameters: LoginGetRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.userName !== undefined) {
            queryParameters['UserName'] = requestParameters.userName;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['Password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     */
    async loginGet(requestParameters: LoginGetRequest): Promise<LoginResponse> {
        const response = await this.loginGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async loginPostRaw(requestParameters: LoginPostRequest): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling loginPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/Login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     */
    async loginPost(requestParameters: LoginPostRequest): Promise<LoginResponse> {
        const response = await this.loginPostRaw(requestParameters);
        return await response.value();
    }

}
