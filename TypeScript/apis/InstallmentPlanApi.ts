/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApproveInstallmentPlanRequest,
    ApproveInstallmentPlanRequestFromJSON,
    ApproveInstallmentPlanRequestToJSON,
    CancelInstallmentPlanRequest,
    CancelInstallmentPlanRequestFromJSON,
    CancelInstallmentPlanRequestToJSON,
    ChargebackRequest,
    ChargebackRequestFromJSON,
    ChargebackRequestToJSON,
    CreateInstallmentPlanRequest,
    CreateInstallmentPlanRequestFromJSON,
    CreateInstallmentPlanRequestToJSON,
    CreateInstallmentsPlanResponse,
    CreateInstallmentsPlanResponseFromJSON,
    CreateInstallmentsPlanResponseToJSON,
    Get3DSecureParametersRequest,
    Get3DSecureParametersRequestFromJSON,
    Get3DSecureParametersRequestToJSON,
    Get3DSecureParametersResponse,
    Get3DSecureParametersResponseFromJSON,
    Get3DSecureParametersResponseToJSON,
    GetFraudStatusDisplayRequest,
    GetFraudStatusDisplayRequestFromJSON,
    GetFraudStatusDisplayRequestToJSON,
    GetFraudStatusDisplayResponse,
    GetFraudStatusDisplayResponseFromJSON,
    GetFraudStatusDisplayResponseToJSON,
    GetInitiatedInstallmentPlanRequest,
    GetInitiatedInstallmentPlanRequestFromJSON,
    GetInitiatedInstallmentPlanRequestToJSON,
    GetInitiatedInstallmentPlanResponse,
    GetInitiatedInstallmentPlanResponseFromJSON,
    GetInitiatedInstallmentPlanResponseToJSON,
    GetInstallmentSchedulesRequest,
    GetInstallmentSchedulesRequestFromJSON,
    GetInstallmentSchedulesRequestToJSON,
    GetInstallmentsPlanExtendedResponse,
    GetInstallmentsPlanExtendedResponseFromJSON,
    GetInstallmentsPlanExtendedResponseToJSON,
    GetInstallmentsPlanResponse,
    GetInstallmentsPlanResponseFromJSON,
    GetInstallmentsPlanResponseToJSON,
    GetInstallmentsPlanSearchCriteriaRequest,
    GetInstallmentsPlanSearchCriteriaRequestFromJSON,
    GetInstallmentsPlanSearchCriteriaRequestToJSON,
    GetInstallmentsScheduleResponse,
    GetInstallmentsScheduleResponseFromJSON,
    GetInstallmentsScheduleResponseToJSON,
    InitiateInstallmentPlanRequest,
    InitiateInstallmentPlanRequestFromJSON,
    InitiateInstallmentPlanRequestToJSON,
    InitiateInstallmentsPlanResponse,
    InitiateInstallmentsPlanResponseFromJSON,
    InitiateInstallmentsPlanResponseToJSON,
    InstallmentPlanResponse,
    InstallmentPlanResponseFromJSON,
    InstallmentPlanResponseToJSON,
    LearnMoreDetailsRequest,
    LearnMoreDetailsRequestFromJSON,
    LearnMoreDetailsRequestToJSON,
    LearnMoreDetailsResponse,
    LearnMoreDetailsResponseFromJSON,
    LearnMoreDetailsResponseToJSON,
    RefundInstallmentPlanResponse,
    RefundInstallmentPlanResponseFromJSON,
    RefundInstallmentPlanResponseToJSON,
    RefundPlanRequest,
    RefundPlanRequestFromJSON,
    RefundPlanRequestToJSON,
    StartInstallmentsRequest,
    StartInstallmentsRequestFromJSON,
    StartInstallmentsRequestToJSON,
    TermsAndConditionsGetRequest,
    TermsAndConditionsGetRequestFromJSON,
    TermsAndConditionsGetRequestToJSON,
    TermsAndConditionsGetResponse,
    TermsAndConditionsGetResponseFromJSON,
    TermsAndConditionsGetResponseToJSON,
    UpdateInstallmentPlanRequest,
    UpdateInstallmentPlanRequestFromJSON,
    UpdateInstallmentPlanRequestToJSON,
    UpdateInstallmentsPlanResponse,
    UpdateInstallmentsPlanResponseFromJSON,
    UpdateInstallmentsPlanResponseToJSON,
    VerifyPaymentRequest,
    VerifyPaymentRequestFromJSON,
    VerifyPaymentRequestToJSON,
    VerifyPaymentResponse,
    VerifyPaymentResponseFromJSON,
    VerifyPaymentResponseToJSON,
} from '../models';

export interface InstallmentPlanApproveRequest {
    request: ApproveInstallmentPlanRequest;
}

export interface InstallmentPlanCancelRequest {
    request: CancelInstallmentPlanRequest;
}

export interface InstallmentPlanChargeBackRequest {
    request: ChargebackRequest;
}

export interface InstallmentPlanCreateRequest {
    request: CreateInstallmentPlanRequest;
}

export interface InstallmentPlanGetRequest {
    request: GetInstallmentsPlanSearchCriteriaRequest;
}

export interface InstallmentPlanGet3DSecureParametersRequest {
    request: Get3DSecureParametersRequest;
}

export interface InstallmentPlanGetExtendedRequest {
    request: GetInstallmentsPlanSearchCriteriaRequest;
}

export interface InstallmentPlanGetFraudStatusDisplayRequest {
    request: GetFraudStatusDisplayRequest;
}

export interface InstallmentPlanGetInitiatedInstallmentPlanRequestRequest {
    request: GetInitiatedInstallmentPlanRequest;
}

export interface InstallmentPlanGetLearnMoreDetailsRequest {
    request: LearnMoreDetailsRequest;
}

export interface InstallmentPlanGetSchedulesRequest {
    request: GetInstallmentSchedulesRequest;
}

export interface InstallmentPlanInitiateRequest {
    request: InitiateInstallmentPlanRequest;
}

export interface InstallmentPlanRefundRequest {
    request: RefundPlanRequest;
}

export interface InstallmentPlanStartInstallmentsRequest {
    request: StartInstallmentsRequest;
}

export interface InstallmentPlanTermsAndConditionsRequest {
    request: TermsAndConditionsGetRequest;
}

export interface InstallmentPlanUpdateRequest {
    request: UpdateInstallmentPlanRequest;
}

export interface InstallmentPlanVerifyPaymentRequest {
    request: VerifyPaymentRequest;
}

/**
 * no description
 */
export class InstallmentPlanApi extends runtime.BaseAPI {

    /**
     */
    async installmentPlanApproveRaw(requestParameters: InstallmentPlanApproveRequest): Promise<runtime.ApiResponse<InstallmentPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanApprove.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Approve`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApproveInstallmentPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanApprove(requestParameters: InstallmentPlanApproveRequest): Promise<InstallmentPlanResponse> {
        const response = await this.installmentPlanApproveRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanCancelRaw(requestParameters: InstallmentPlanCancelRequest): Promise<runtime.ApiResponse<InstallmentPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanCancel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Cancel`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CancelInstallmentPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanCancel(requestParameters: InstallmentPlanCancelRequest): Promise<InstallmentPlanResponse> {
        const response = await this.installmentPlanCancelRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanChargeBackRaw(requestParameters: InstallmentPlanChargeBackRequest): Promise<runtime.ApiResponse<InstallmentPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanChargeBack.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/ChargeBack`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChargebackRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanChargeBack(requestParameters: InstallmentPlanChargeBackRequest): Promise<InstallmentPlanResponse> {
        const response = await this.installmentPlanChargeBackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanCreateRaw(requestParameters: InstallmentPlanCreateRequest): Promise<runtime.ApiResponse<CreateInstallmentsPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInstallmentPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInstallmentsPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanCreate(requestParameters: InstallmentPlanCreateRequest): Promise<CreateInstallmentsPlanResponse> {
        const response = await this.installmentPlanCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGetRaw(requestParameters: InstallmentPlanGetRequest): Promise<runtime.ApiResponse<GetInstallmentsPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetInstallmentsPlanSearchCriteriaRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInstallmentsPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGet(requestParameters: InstallmentPlanGetRequest): Promise<GetInstallmentsPlanResponse> {
        const response = await this.installmentPlanGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGet3DSecureParametersRaw(requestParameters: InstallmentPlanGet3DSecureParametersRequest): Promise<runtime.ApiResponse<Get3DSecureParametersResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGet3DSecureParameters.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Get3DSecureParameters`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Get3DSecureParametersRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Get3DSecureParametersResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGet3DSecureParameters(requestParameters: InstallmentPlanGet3DSecureParametersRequest): Promise<Get3DSecureParametersResponse> {
        const response = await this.installmentPlanGet3DSecureParametersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGetExtendedRaw(requestParameters: InstallmentPlanGetExtendedRequest): Promise<runtime.ApiResponse<GetInstallmentsPlanExtendedResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGetExtended.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/GetExtended`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetInstallmentsPlanSearchCriteriaRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInstallmentsPlanExtendedResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGetExtended(requestParameters: InstallmentPlanGetExtendedRequest): Promise<GetInstallmentsPlanExtendedResponse> {
        const response = await this.installmentPlanGetExtendedRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGetFraudStatusDisplayRaw(requestParameters: InstallmentPlanGetFraudStatusDisplayRequest): Promise<runtime.ApiResponse<GetFraudStatusDisplayResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGetFraudStatusDisplay.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/GetFraudStatusDisplay`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFraudStatusDisplayRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFraudStatusDisplayResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGetFraudStatusDisplay(requestParameters: InstallmentPlanGetFraudStatusDisplayRequest): Promise<GetFraudStatusDisplayResponse> {
        const response = await this.installmentPlanGetFraudStatusDisplayRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGetInitiatedInstallmentPlanRequestRaw(requestParameters: InstallmentPlanGetInitiatedInstallmentPlanRequestRequest): Promise<runtime.ApiResponse<GetInitiatedInstallmentPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGetInitiatedInstallmentPlanRequest.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/GetInitiatedInstallmentPlanRequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetInitiatedInstallmentPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInitiatedInstallmentPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGetInitiatedInstallmentPlanRequest(requestParameters: InstallmentPlanGetInitiatedInstallmentPlanRequestRequest): Promise<GetInitiatedInstallmentPlanResponse> {
        const response = await this.installmentPlanGetInitiatedInstallmentPlanRequestRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGetLearnMoreDetailsRaw(requestParameters: InstallmentPlanGetLearnMoreDetailsRequest): Promise<runtime.ApiResponse<LearnMoreDetailsResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGetLearnMoreDetails.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/GetLearnMoreDetails`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LearnMoreDetailsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LearnMoreDetailsResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGetLearnMoreDetails(requestParameters: InstallmentPlanGetLearnMoreDetailsRequest): Promise<LearnMoreDetailsResponse> {
        const response = await this.installmentPlanGetLearnMoreDetailsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanGetSchedulesRaw(requestParameters: InstallmentPlanGetSchedulesRequest): Promise<runtime.ApiResponse<GetInstallmentsScheduleResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanGetSchedules.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/GetSchedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetInstallmentSchedulesRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInstallmentsScheduleResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanGetSchedules(requestParameters: InstallmentPlanGetSchedulesRequest): Promise<GetInstallmentsScheduleResponse> {
        const response = await this.installmentPlanGetSchedulesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanInitiateRaw(requestParameters: InstallmentPlanInitiateRequest): Promise<runtime.ApiResponse<InitiateInstallmentsPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanInitiate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Initiate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitiateInstallmentPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InitiateInstallmentsPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanInitiate(requestParameters: InstallmentPlanInitiateRequest): Promise<InitiateInstallmentsPlanResponse> {
        const response = await this.installmentPlanInitiateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanRefundRaw(requestParameters: InstallmentPlanRefundRequest): Promise<runtime.ApiResponse<RefundInstallmentPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanRefund.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Refund`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefundPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RefundInstallmentPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanRefund(requestParameters: InstallmentPlanRefundRequest): Promise<RefundInstallmentPlanResponse> {
        const response = await this.installmentPlanRefundRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanStartInstallmentsRaw(requestParameters: InstallmentPlanStartInstallmentsRequest): Promise<runtime.ApiResponse<InstallmentPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanStartInstallments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/StartInstallments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartInstallmentsRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InstallmentPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanStartInstallments(requestParameters: InstallmentPlanStartInstallmentsRequest): Promise<InstallmentPlanResponse> {
        const response = await this.installmentPlanStartInstallmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanTermsAndConditionsRaw(requestParameters: InstallmentPlanTermsAndConditionsRequest): Promise<runtime.ApiResponse<TermsAndConditionsGetResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanTermsAndConditions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/TermsAndConditions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TermsAndConditionsGetRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TermsAndConditionsGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanTermsAndConditions(requestParameters: InstallmentPlanTermsAndConditionsRequest): Promise<TermsAndConditionsGetResponse> {
        const response = await this.installmentPlanTermsAndConditionsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanUpdateRaw(requestParameters: InstallmentPlanUpdateRequest): Promise<runtime.ApiResponse<UpdateInstallmentsPlanResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateInstallmentPlanRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateInstallmentsPlanResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanUpdate(requestParameters: InstallmentPlanUpdateRequest): Promise<UpdateInstallmentsPlanResponse> {
        const response = await this.installmentPlanUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async installmentPlanVerifyPaymentRaw(requestParameters: InstallmentPlanVerifyPaymentRequest): Promise<runtime.ApiResponse<VerifyPaymentResponse>> {
        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling installmentPlanVerifyPayment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/api/InstallmentPlan/Get/VerifyPayment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyPaymentRequestToJSON(requestParameters.request),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyPaymentResponseFromJSON(jsonValue));
    }

    /**
     */
    async installmentPlanVerifyPayment(requestParameters: InstallmentPlanVerifyPaymentRequest): Promise<VerifyPaymentResponse> {
        const response = await this.installmentPlanVerifyPaymentRaw(requestParameters);
        return await response.value();
    }

}
