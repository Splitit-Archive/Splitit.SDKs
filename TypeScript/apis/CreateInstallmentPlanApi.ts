/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateInstallmentPlanLegacyResponse,
    CreateInstallmentPlanLegacyResponseFromJSON,
    CreateInstallmentPlanLegacyResponseToJSON,
} from '../models';

export interface CreateInstallmentPlanGetRequest {
    amountBeforeFees?: number;
    apiKey?: string | null;
    avsAddress?: string | null;
    avsZip?: string | null;
    cardCvv?: string | null;
    cardExpMonth?: string | null;
    cardExpYear?: string | null;
    cardHolder?: string | null;
    cardNumber?: string | null;
    cardTypeId?: number;
    consumerFullName?: string | null;
    countryId?: number;
    email?: string | null;
    installmentNumber?: number;
    paramX?: string | null;
    sessionId?: string | null;
}

/**
 * no description
 */
export class CreateInstallmentPlanApi extends runtime.BaseAPI {

    /**
     */
    async createInstallmentPlanGetRaw(requestParameters: CreateInstallmentPlanGetRequest): Promise<runtime.ApiResponse<CreateInstallmentPlanLegacyResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.amountBeforeFees !== undefined) {
            queryParameters['AmountBeforeFees'] = requestParameters.amountBeforeFees;
        }

        if (requestParameters.apiKey !== undefined) {
            queryParameters['ApiKey'] = requestParameters.apiKey;
        }

        if (requestParameters.avsAddress !== undefined) {
            queryParameters['AvsAddress'] = requestParameters.avsAddress;
        }

        if (requestParameters.avsZip !== undefined) {
            queryParameters['AvsZip'] = requestParameters.avsZip;
        }

        if (requestParameters.cardCvv !== undefined) {
            queryParameters['CardCvv'] = requestParameters.cardCvv;
        }

        if (requestParameters.cardExpMonth !== undefined) {
            queryParameters['CardExpMonth'] = requestParameters.cardExpMonth;
        }

        if (requestParameters.cardExpYear !== undefined) {
            queryParameters['CardExpYear'] = requestParameters.cardExpYear;
        }

        if (requestParameters.cardHolder !== undefined) {
            queryParameters['CardHolder'] = requestParameters.cardHolder;
        }

        if (requestParameters.cardNumber !== undefined) {
            queryParameters['CardNumber'] = requestParameters.cardNumber;
        }

        if (requestParameters.cardTypeId !== undefined) {
            queryParameters['CardTypeId'] = requestParameters.cardTypeId;
        }

        if (requestParameters.consumerFullName !== undefined) {
            queryParameters['ConsumerFullName'] = requestParameters.consumerFullName;
        }

        if (requestParameters.countryId !== undefined) {
            queryParameters['CountryId'] = requestParameters.countryId;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['Email'] = requestParameters.email;
        }

        if (requestParameters.installmentNumber !== undefined) {
            queryParameters['InstallmentNumber'] = requestParameters.installmentNumber;
        }

        if (requestParameters.paramX !== undefined) {
            queryParameters['ParamX'] = requestParameters.paramX;
        }

        if (requestParameters.sessionId !== undefined) {
            queryParameters['SessionId'] = requestParameters.sessionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/CreateInstallmentPlan`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInstallmentPlanLegacyResponseFromJSON(jsonValue));
    }

    /**
     */
    async createInstallmentPlanGet(requestParameters: CreateInstallmentPlanGetRequest): Promise<CreateInstallmentPlanLegacyResponse> {
        const response = await this.createInstallmentPlanGetRaw(requestParameters);
        return await response.value();
    }

}
