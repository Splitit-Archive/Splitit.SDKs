"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var runtime_1 = require("../runtime");
var _1 = require("./");
function TokensAllOfFromJSON(json) {
    return TokensAllOfFromJSONTyped(json, false);
}
exports.TokensAllOfFromJSON = TokensAllOfFromJSON;
function TokensAllOfFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'token': !runtime_1.exists(json, 'Token') ? undefined : json['Token'],
        'validTill': !runtime_1.exists(json, 'ValidTill') ? undefined : (new Date(json['ValidTill'])),
        'lastUsage': !runtime_1.exists(json, 'LastUsage') ? undefined : (new Date(json['LastUsage'])),
        'parameterGroupId': !runtime_1.exists(json, 'ParameterGroupId') ? undefined : json['ParameterGroupId'],
        'type': !runtime_1.exists(json, 'Type') ? undefined : json['Type'],
        'parameterGroup': !runtime_1.exists(json, 'ParameterGroup') ? undefined : _1.ParameterGroupsFromJSON(json['ParameterGroup']),
        'userId': json['UserId'],
        'userType': _1.UserTypeFromJSON(json['UserType']),
        'installmentPlanId': !runtime_1.exists(json, 'InstallmentPlanId') ? undefined : json['InstallmentPlanId'],
        'installmentPlan': !runtime_1.exists(json, 'InstallmentPlan') ? undefined : _1.InstallmentPlansFromJSON(json['InstallmentPlan']),
    };
}
exports.TokensAllOfFromJSONTyped = TokensAllOfFromJSONTyped;
function TokensAllOfToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'Token': value.token,
        'ValidTill': value.validTill === undefined ? undefined : (value.validTill.toISOString()),
        'LastUsage': value.lastUsage === undefined ? undefined : (value.lastUsage.toISOString()),
        'ParameterGroupId': value.parameterGroupId,
        'Type': value.type,
        'ParameterGroup': _1.ParameterGroupsToJSON(value.parameterGroup),
        'UserId': value.userId,
        'UserType': _1.UserTypeToJSON(value.userType),
        'InstallmentPlanId': value.installmentPlanId,
        'InstallmentPlan': _1.InstallmentPlansToJSON(value.installmentPlan),
    };
}
exports.TokensAllOfToJSON = TokensAllOfToJSON;
