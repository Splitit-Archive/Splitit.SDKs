/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AddressData2, Agents, ApiUsers, BankDetails, BusinessUnits, Countries, CountryState, CountrySubdivisions, InstallmentPlanEventsSubscriptionDatas, MerchantStatus, MerchantVertical, OnBoardingMethod, ParameterGroups, SalesAssociates, SplititEntity, Terminals, TouchPointColorValues } from './';
/**
 *
 * @export
 * @interface MerchantsAllOf
 */
export interface MerchantsAllOf {
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    address?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    email?: string;
    /**
     *
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    merchantAdminWebsite: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    webApi: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    embeddedClients: boolean;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    crmId?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFParentAccountExternalId?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFLeadId?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFParentAccountName?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    merchantVertical?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFAccountId?: string;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    declaredAnnualVolumeUSD?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    declaredAOVUSD?: number;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    logoImage?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    logoFileExtension?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    code?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    supportEmail?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    supportPhone?: string;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    parameterGroupId?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    businessUnitId: number;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    logoUrl?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    merchantLegalName?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    splititMerchantId?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    websiteUrl?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressAddressLine?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressAddressLine2?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressCity?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    orgGroup?: string;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    billingAddressCountryId?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    billingAddressStateId?: number;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressZip?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressLegacyFullAddressLine?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    vatTaxId?: string;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    salesAccossiateId?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    registeredCountryOfBusinessCountryId?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    registeredCountryOfBusinessStateId?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    merchantCountryCountryId?: number;
    /**
     *
     * @type {number}
     * @memberof MerchantsAllOf
     */
    merchantCountryStateId?: number;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    bankDetailsBankAccountName?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    bankDetailsBankRoutingNumber?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    bankDetailsBankAccountNumber?: string;
    /**
     *
     * @type {string}
     * @memberof MerchantsAllOf
     */
    reportsFolderName?: string;
    /**
     *
     * @type {OnBoardingMethod}
     * @memberof MerchantsAllOf
     */
    onBoardingMethod: OnBoardingMethod;
    /**
     *
     * @type {BusinessUnits}
     * @memberof MerchantsAllOf
     */
    businessUnit?: BusinessUnits;
    /**
     *
     * @type {ParameterGroups}
     * @memberof MerchantsAllOf
     */
    parameterGroup?: ParameterGroups;
    /**
     *
     * @type {SalesAssociates}
     * @memberof MerchantsAllOf
     */
    salesAccossiate?: SalesAssociates;
    /**
     *
     * @type {ApiUsers}
     * @memberof MerchantsAllOf
     */
    apiUsers?: ApiUsers;
    /**
     *
     * @type {Array<Agents>}
     * @memberof MerchantsAllOf
     */
    agents?: Array<Agents>;
    /**
     *
     * @type {Array<InstallmentPlanEventsSubscriptionDatas>}
     * @memberof MerchantsAllOf
     */
    installmentPlanEventsSubscriptionDatas?: Array<InstallmentPlanEventsSubscriptionDatas>;
    /**
     *
     * @type {Array<Terminals>}
     * @memberof MerchantsAllOf
     */
    terminals?: Array<Terminals>;
    /**
     *
     * @type {Array<TouchPointColorValues>}
     * @memberof MerchantsAllOf
     */
    touchPointColorValues?: Array<TouchPointColorValues>;
    /**
     *
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    isTest: boolean;
    /**
     *
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    markedForDeletion: boolean;
    /**
     *
     * @type {CountryState}
     * @memberof MerchantsAllOf
     */
    registeredCountryOfBusiness?: CountryState;
    /**
     *
     * @type {CountryState}
     * @memberof MerchantsAllOf
     */
    merchantCountry?: CountryState;
    /**
     *
     * @type {MerchantStatus}
     * @memberof MerchantsAllOf
     */
    status: MerchantStatus;
    /**
     *
     * @type {MerchantVertical}
     * @memberof MerchantsAllOf
     */
    vertical: MerchantVertical;
    /**
     *
     * @type {BankDetails}
     * @memberof MerchantsAllOf
     */
    bankDetails?: BankDetails;
    /**
     *
     * @type {AddressData2}
     * @memberof MerchantsAllOf
     */
    billingAddress?: AddressData2;
    /**
     *
     * @type {Countries}
     * @memberof MerchantsAllOf
     */
    country?: Countries;
    /**
     *
     * @type {CountrySubdivisions}
     * @memberof MerchantsAllOf
     */
    state?: CountrySubdivisions;
    /**
     *
     * @type {SplititEntity}
     * @memberof MerchantsAllOf
     */
    splititSigningEntity: SplititEntity;
    /**
     *
     * @type {SplititEntity}
     * @memberof MerchantsAllOf
     */
    splititCurrentEntity: SplititEntity;
}
export declare function MerchantsAllOfFromJSON(json: any): MerchantsAllOf;
export declare function MerchantsAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerchantsAllOf;
export declare function MerchantsAllOfToJSON(value?: MerchantsAllOf | null): any;
