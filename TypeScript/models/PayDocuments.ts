/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BusinessUnits,
    BusinessUnitsFromJSON,
    BusinessUnitsFromJSONTyped,
    BusinessUnitsToJSON,
    Currencies,
    CurrenciesFromJSON,
    CurrenciesFromJSONTyped,
    CurrenciesToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    FundingPayDocumentDetails,
    FundingPayDocumentDetailsFromJSON,
    FundingPayDocumentDetailsFromJSONTyped,
    FundingPayDocumentDetailsToJSON,
    PayDocumentsAllOf,
    PayDocumentsAllOfFromJSON,
    PayDocumentsAllOfFromJSONTyped,
    PayDocumentsAllOfToJSON,
    ScpProviders,
    ScpProvidersFromJSON,
    ScpProvidersFromJSONTyped,
    ScpProvidersToJSON,
} from './';

/**
 * 
 * @export
 * @interface PayDocuments
 */
export interface PayDocuments {
    /**
     * 
     * @type {number}
     * @memberof PayDocuments
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof PayDocuments
     */
    totalAmount: number;
    /**
     * 
     * @type {number}
     * @memberof PayDocuments
     */
    scpProviderId?: number;
    /**
     * 
     * @type {number}
     * @memberof PayDocuments
     */
    businessUnitId?: number;
    /**
     * 
     * @type {string}
     * @memberof PayDocuments
     */
    discriminator?: string;
    /**
     * 
     * @type {number}
     * @memberof PayDocuments
     */
    currencyId?: number;
    /**
     * 
     * @type {BusinessUnits}
     * @memberof PayDocuments
     */
    businessUnit?: BusinessUnits;
    /**
     * 
     * @type {Currencies}
     * @memberof PayDocuments
     */
    currency?: Currencies;
    /**
     * 
     * @type {ScpProviders}
     * @memberof PayDocuments
     */
    scpProvider?: ScpProviders;
    /**
     * 
     * @type {Array<FundingPayDocumentDetails>}
     * @memberof PayDocuments
     */
    fundingPayDocumentDetails?: Array<FundingPayDocumentDetails>;
}

export function PayDocumentsFromJSON(json: any): PayDocuments {
    return PayDocumentsFromJSONTyped(json, false);
}

export function PayDocumentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayDocuments {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'totalAmount': json['TotalAmount'],
        'scpProviderId': !exists(json, 'ScpProviderId') ? undefined : json['ScpProviderId'],
        'businessUnitId': !exists(json, 'BusinessUnitId') ? undefined : json['BusinessUnitId'],
        'discriminator': !exists(json, 'Discriminator') ? undefined : json['Discriminator'],
        'currencyId': !exists(json, 'CurrencyId') ? undefined : json['CurrencyId'],
        'businessUnit': !exists(json, 'BusinessUnit') ? undefined : BusinessUnitsFromJSON(json['BusinessUnit']),
        'currency': !exists(json, 'Currency') ? undefined : CurrenciesFromJSON(json['Currency']),
        'scpProvider': !exists(json, 'ScpProvider') ? undefined : ScpProvidersFromJSON(json['ScpProvider']),
        'fundingPayDocumentDetails': !exists(json, 'FundingPayDocumentDetails') ? undefined : ((json['FundingPayDocumentDetails'] as Array<any>).map(FundingPayDocumentDetailsFromJSON)),
    };
}

export function PayDocumentsToJSON(value?: PayDocuments | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'TotalAmount': value.totalAmount,
        'ScpProviderId': value.scpProviderId,
        'BusinessUnitId': value.businessUnitId,
        'Discriminator': value.discriminator,
        'CurrencyId': value.currencyId,
        'BusinessUnit': BusinessUnitsToJSON(value.businessUnit),
        'Currency': CurrenciesToJSON(value.currency),
        'ScpProvider': ScpProvidersToJSON(value.scpProvider),
        'FundingPayDocumentDetails': value.fundingPayDocumentDetails === undefined ? undefined : ((value.fundingPayDocumentDetails as Array<any>).map(FundingPayDocumentDetailsToJSON)),
    };
}


