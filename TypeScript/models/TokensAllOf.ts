/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    InstallmentPlans,
    InstallmentPlansFromJSON,
    InstallmentPlansFromJSONTyped,
    InstallmentPlansToJSON,
    ParameterGroups,
    ParameterGroupsFromJSON,
    ParameterGroupsFromJSONTyped,
    ParameterGroupsToJSON,
    UserType,
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface TokensAllOf
 */
export interface TokensAllOf {
    /**
     * 
     * @type {string}
     * @memberof TokensAllOf
     */
    token?: string;
    /**
     * 
     * @type {Date}
     * @memberof TokensAllOf
     */
    validTill?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TokensAllOf
     */
    lastUsage?: Date;
    /**
     * 
     * @type {number}
     * @memberof TokensAllOf
     */
    parameterGroupId?: number;
    /**
     * 
     * @type {string}
     * @memberof TokensAllOf
     */
    type?: string;
    /**
     * 
     * @type {ParameterGroups}
     * @memberof TokensAllOf
     */
    parameterGroup?: ParameterGroups;
    /**
     * 
     * @type {number}
     * @memberof TokensAllOf
     */
    userId: number;
    /**
     * 
     * @type {UserType}
     * @memberof TokensAllOf
     */
    userType: UserType;
    /**
     * 
     * @type {number}
     * @memberof TokensAllOf
     */
    installmentPlanId?: number;
    /**
     * 
     * @type {InstallmentPlans}
     * @memberof TokensAllOf
     */
    installmentPlan?: InstallmentPlans;
}

export function TokensAllOfFromJSON(json: any): TokensAllOf {
    return TokensAllOfFromJSONTyped(json, false);
}

export function TokensAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokensAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'token': !exists(json, 'Token') ? undefined : json['Token'],
        'validTill': !exists(json, 'ValidTill') ? undefined : (new Date(json['ValidTill'])),
        'lastUsage': !exists(json, 'LastUsage') ? undefined : (new Date(json['LastUsage'])),
        'parameterGroupId': !exists(json, 'ParameterGroupId') ? undefined : json['ParameterGroupId'],
        'type': !exists(json, 'Type') ? undefined : json['Type'],
        'parameterGroup': !exists(json, 'ParameterGroup') ? undefined : ParameterGroupsFromJSON(json['ParameterGroup']),
        'userId': json['UserId'],
        'userType': UserTypeFromJSON(json['UserType']),
        'installmentPlanId': !exists(json, 'InstallmentPlanId') ? undefined : json['InstallmentPlanId'],
        'installmentPlan': !exists(json, 'InstallmentPlan') ? undefined : InstallmentPlansFromJSON(json['InstallmentPlan']),
    };
}

export function TokensAllOfToJSON(value?: TokensAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Token': value.token,
        'ValidTill': value.validTill === undefined ? undefined : (value.validTill.toISOString()),
        'LastUsage': value.lastUsage === undefined ? undefined : (value.lastUsage.toISOString()),
        'ParameterGroupId': value.parameterGroupId,
        'Type': value.type,
        'ParameterGroup': ParameterGroupsToJSON(value.parameterGroup),
        'UserId': value.userId,
        'UserType': UserTypeToJSON(value.userType),
        'InstallmentPlanId': value.installmentPlanId,
        'InstallmentPlan': InstallmentPlansToJSON(value.installmentPlan),
    };
}


