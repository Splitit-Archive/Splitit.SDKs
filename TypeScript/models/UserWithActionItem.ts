/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApplicativeUser,
    ApplicativeUserFromJSON,
    ApplicativeUserFromJSONTyped,
    ApplicativeUserToJSON,
    Roles,
    RolesFromJSON,
    RolesFromJSONTyped,
    RolesToJSON,
    UserPermissionLevel,
    UserPermissionLevelFromJSON,
    UserPermissionLevelFromJSONTyped,
    UserPermissionLevelToJSON,
    UserStatus,
    UserStatusFromJSON,
    UserStatusFromJSONTyped,
    UserStatusToJSON,
    UserWithActionItemAllOf,
    UserWithActionItemAllOfFromJSON,
    UserWithActionItemAllOfFromJSONTyped,
    UserWithActionItemAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface UserWithActionItem
 */
export interface UserWithActionItem {
    /**
     * 
     * @type {number}
     * @memberof UserWithActionItem
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    culture?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    userFullName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    phoneNumber?: string;
    /**
     * 
     * @type {Roles}
     * @memberof UserWithActionItem
     */
    role?: Roles;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    uniqueId?: string;
    /**
     * 
     * @type {number}
     * @memberof UserWithActionItem
     */
    loginAttempt: number;
    /**
     * 
     * @type {number}
     * @memberof UserWithActionItem
     */
    maxInvalidLoginAttempts: number;
    /**
     * 
     * @type {UserStatus}
     * @memberof UserWithActionItem
     */
    status: UserStatus;
    /**
     * 
     * @type {boolean}
     * @memberof UserWithActionItem
     */
    isLocked: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    cultureName?: string;
    /**
     * 
     * @type {number}
     * @memberof UserWithActionItem
     */
    roleId: number;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    loginUserName?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserWithActionItem
     */
    lastTimeLogin: Date;
    /**
     * 
     * @type {boolean}
     * @memberof UserWithActionItem
     */
    isDataPrivateRestricted: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    firstName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    jobTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    faxNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    mobileNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    workPhoneNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithActionItem
     */
    notes?: string;
    /**
     * 
     * @type {UserPermissionLevel}
     * @memberof UserWithActionItem
     */
    type: UserPermissionLevel;
}

export function UserWithActionItemFromJSON(json: any): UserWithActionItem {
    return UserWithActionItemFromJSONTyped(json, false);
}

export function UserWithActionItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithActionItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'culture': !exists(json, 'Culture') ? undefined : json['Culture'],
        'userFullName': !exists(json, 'UserFullName') ? undefined : json['UserFullName'],
        'phoneNumber': !exists(json, 'PhoneNumber') ? undefined : json['PhoneNumber'],
        'role': !exists(json, 'Role') ? undefined : RolesFromJSON(json['Role']),
        'userName': !exists(json, 'UserName') ? undefined : json['UserName'],
        'uniqueId': !exists(json, 'UniqueId') ? undefined : json['UniqueId'],
        'loginAttempt': json['LoginAttempt'],
        'maxInvalidLoginAttempts': json['MaxInvalidLoginAttempts'],
        'status': UserStatusFromJSON(json['Status']),
        'isLocked': json['IsLocked'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'cultureName': !exists(json, 'CultureName') ? undefined : json['CultureName'],
        'roleId': json['RoleId'],
        'loginUserName': !exists(json, 'LoginUserName') ? undefined : json['LoginUserName'],
        'lastTimeLogin': (new Date(json['LastTimeLogin'])),
        'isDataPrivateRestricted': json['IsDataPrivateRestricted'],
        'firstName': !exists(json, 'FirstName') ? undefined : json['FirstName'],
        'lastName': !exists(json, 'LastName') ? undefined : json['LastName'],
        'jobTitle': !exists(json, 'JobTitle') ? undefined : json['JobTitle'],
        'faxNumber': !exists(json, 'FaxNumber') ? undefined : json['FaxNumber'],
        'mobileNumber': !exists(json, 'MobileNumber') ? undefined : json['MobileNumber'],
        'workPhoneNumber': !exists(json, 'WorkPhoneNumber') ? undefined : json['WorkPhoneNumber'],
        'notes': !exists(json, 'Notes') ? undefined : json['Notes'],
        'type': UserPermissionLevelFromJSON(json['Type']),
    };
}

export function UserWithActionItemToJSON(value?: UserWithActionItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Culture': value.culture,
        'UserFullName': value.userFullName,
        'PhoneNumber': value.phoneNumber,
        'Role': RolesToJSON(value.role),
        'UserName': value.userName,
        'UniqueId': value.uniqueId,
        'LoginAttempt': value.loginAttempt,
        'MaxInvalidLoginAttempts': value.maxInvalidLoginAttempts,
        'Status': UserStatusToJSON(value.status),
        'IsLocked': value.isLocked,
        'Email': value.email,
        'CultureName': value.cultureName,
        'RoleId': value.roleId,
        'LoginUserName': value.loginUserName,
        'LastTimeLogin': (value.lastTimeLogin.toISOString()),
        'IsDataPrivateRestricted': value.isDataPrivateRestricted,
        'FirstName': value.firstName,
        'LastName': value.lastName,
        'JobTitle': value.jobTitle,
        'FaxNumber': value.faxNumber,
        'MobileNumber': value.mobileNumber,
        'WorkPhoneNumber': value.workPhoneNumber,
        'Notes': value.notes,
        'Type': UserPermissionLevelToJSON(value.type),
    };
}


