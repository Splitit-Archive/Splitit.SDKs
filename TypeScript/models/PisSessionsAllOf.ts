/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SessionAvailibility,
    SessionAvailibilityFromJSON,
    SessionAvailibilityFromJSONTyped,
    SessionAvailibilityToJSON,
    UserType,
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    VersionedTouchPoints,
    VersionedTouchPointsFromJSON,
    VersionedTouchPointsFromJSONTyped,
    VersionedTouchPointsToJSON,
} from './';

/**
 * 
 * @export
 * @interface PisSessionsAllOf
 */
export interface PisSessionsAllOf {
    /**
     * 
     * @type {string}
     * @memberof PisSessionsAllOf
     */
    sessionId?: string;
    /**
     * 
     * @type {Date}
     * @memberof PisSessionsAllOf
     */
    lastAccessTime: Date;
    /**
     * 
     * @type {number}
     * @memberof PisSessionsAllOf
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof PisSessionsAllOf
     */
    userUniqueId?: string;
    /**
     * 
     * @type {string}
     * @memberof PisSessionsAllOf
     */
    installmentPlanNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof PisSessionsAllOf
     */
    versionedTouchPointId?: number;
    /**
     * 
     * @type {number}
     * @memberof PisSessionsAllOf
     */
    sessionValidPeriodInMinutes: number;
    /**
     * 
     * @type {VersionedTouchPoints}
     * @memberof PisSessionsAllOf
     */
    versionedTouchPoint?: VersionedTouchPoints;
    /**
     * 
     * @type {UserType}
     * @memberof PisSessionsAllOf
     */
    userType?: UserType;
    /**
     * 
     * @type {SessionAvailibility}
     * @memberof PisSessionsAllOf
     */
    sessionAvailibility: SessionAvailibility;
}

export function PisSessionsAllOfFromJSON(json: any): PisSessionsAllOf {
    return PisSessionsAllOfFromJSONTyped(json, false);
}

export function PisSessionsAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): PisSessionsAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sessionId': !exists(json, 'SessionId') ? undefined : json['SessionId'],
        'lastAccessTime': (new Date(json['LastAccessTime'])),
        'userId': !exists(json, 'UserId') ? undefined : json['UserId'],
        'userUniqueId': !exists(json, 'UserUniqueId') ? undefined : json['UserUniqueId'],
        'installmentPlanNumber': !exists(json, 'InstallmentPlanNumber') ? undefined : json['InstallmentPlanNumber'],
        'versionedTouchPointId': !exists(json, 'VersionedTouchPointId') ? undefined : json['VersionedTouchPointId'],
        'sessionValidPeriodInMinutes': json['SessionValidPeriodInMinutes'],
        'versionedTouchPoint': !exists(json, 'VersionedTouchPoint') ? undefined : VersionedTouchPointsFromJSON(json['VersionedTouchPoint']),
        'userType': !exists(json, 'UserType') ? undefined : UserTypeFromJSON(json['UserType']),
        'sessionAvailibility': SessionAvailibilityFromJSON(json['SessionAvailibility']),
    };
}

export function PisSessionsAllOfToJSON(value?: PisSessionsAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'SessionId': value.sessionId,
        'LastAccessTime': (value.lastAccessTime.toISOString()),
        'UserId': value.userId,
        'UserUniqueId': value.userUniqueId,
        'InstallmentPlanNumber': value.installmentPlanNumber,
        'VersionedTouchPointId': value.versionedTouchPointId,
        'SessionValidPeriodInMinutes': value.sessionValidPeriodInMinutes,
        'VersionedTouchPoint': VersionedTouchPointsToJSON(value.versionedTouchPoint),
        'UserType': UserTypeToJSON(value.userType),
        'SessionAvailibility': SessionAvailibilityToJSON(value.sessionAvailibility),
    };
}


