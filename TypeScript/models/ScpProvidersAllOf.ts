/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Currencies,
    CurrenciesFromJSON,
    CurrenciesFromJSONTyped,
    CurrenciesToJSON,
    ParameterGroups,
    ParameterGroupsFromJSON,
    ParameterGroupsFromJSONTyped,
    ParameterGroupsToJSON,
    ScpProvidersCurrencies,
    ScpProvidersCurrenciesFromJSON,
    ScpProvidersCurrenciesFromJSONTyped,
    ScpProvidersCurrenciesToJSON,
} from './';

/**
 * 
 * @export
 * @interface ScpProvidersAllOf
 */
export interface ScpProvidersAllOf {
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ScpProvidersAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ScpProvidersAllOf
     */
    implementationCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    totalFunds: number;
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    maxNonSecurePlansPercent: number;
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    scpVariableCostAnnualPercent: number;
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    scpFixedCost: number;
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    scpRevenueSharePercent: number;
    /**
     * 
     * @type {number}
     * @memberof ScpProvidersAllOf
     */
    totalFundsCurrencyId?: number;
    /**
     * 
     * @type {string}
     * @memberof ScpProvidersAllOf
     */
    emailsList?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ScpProvidersAllOf
     */
    isOperatedBySplitit?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ScpProvidersAllOf
     */
    isFundingBySplitit: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ScpProvidersAllOf
     */
    deductRevenueShareAutomaticallyFromLastInstallment: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ScpProvidersAllOf
     */
    fundFirstInstallment: boolean;
    /**
     * 
     * @type {Currencies}
     * @memberof ScpProvidersAllOf
     */
    totalFundsCurrency?: Currencies;
    /**
     * 
     * @type {ParameterGroups}
     * @memberof ScpProvidersAllOf
     */
    parameterGroup?: ParameterGroups;
    /**
     * 
     * @type {Array<ScpProvidersCurrencies>}
     * @memberof ScpProvidersAllOf
     */
    scpProvidersCurrencies?: Array<ScpProvidersCurrencies>;
}

export function ScpProvidersAllOfFromJSON(json: any): ScpProvidersAllOf {
    return ScpProvidersAllOfFromJSONTyped(json, false);
}

export function ScpProvidersAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScpProvidersAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'implementationCode': !exists(json, 'ImplementationCode') ? undefined : json['ImplementationCode'],
        'totalFunds': json['TotalFunds'],
        'maxNonSecurePlansPercent': json['MaxNonSecurePlansPercent'],
        'scpVariableCostAnnualPercent': json['ScpVariableCostAnnualPercent'],
        'scpFixedCost': json['ScpFixedCost'],
        'scpRevenueSharePercent': json['ScpRevenueSharePercent'],
        'totalFundsCurrencyId': !exists(json, 'TotalFundsCurrencyId') ? undefined : json['TotalFundsCurrencyId'],
        'emailsList': !exists(json, 'EmailsList') ? undefined : json['EmailsList'],
        'isOperatedBySplitit': !exists(json, 'IsOperatedBySplitit') ? undefined : json['IsOperatedBySplitit'],
        'isFundingBySplitit': json['IsFundingBySplitit'],
        'deductRevenueShareAutomaticallyFromLastInstallment': json['DeductRevenueShareAutomaticallyFromLastInstallment'],
        'fundFirstInstallment': json['FundFirstInstallment'],
        'totalFundsCurrency': !exists(json, 'TotalFundsCurrency') ? undefined : CurrenciesFromJSON(json['TotalFundsCurrency']),
        'parameterGroup': !exists(json, 'ParameterGroup') ? undefined : ParameterGroupsFromJSON(json['ParameterGroup']),
        'scpProvidersCurrencies': !exists(json, 'ScpProvidersCurrencies') ? undefined : ((json['ScpProvidersCurrencies'] as Array<any>).map(ScpProvidersCurrenciesFromJSON)),
    };
}

export function ScpProvidersAllOfToJSON(value?: ScpProvidersAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Name': value.name,
        'ImplementationCode': value.implementationCode,
        'TotalFunds': value.totalFunds,
        'MaxNonSecurePlansPercent': value.maxNonSecurePlansPercent,
        'ScpVariableCostAnnualPercent': value.scpVariableCostAnnualPercent,
        'ScpFixedCost': value.scpFixedCost,
        'ScpRevenueSharePercent': value.scpRevenueSharePercent,
        'TotalFundsCurrencyId': value.totalFundsCurrencyId,
        'EmailsList': value.emailsList,
        'IsOperatedBySplitit': value.isOperatedBySplitit,
        'IsFundingBySplitit': value.isFundingBySplitit,
        'DeductRevenueShareAutomaticallyFromLastInstallment': value.deductRevenueShareAutomaticallyFromLastInstallment,
        'FundFirstInstallment': value.fundFirstInstallment,
        'TotalFundsCurrency': CurrenciesToJSON(value.totalFundsCurrency),
        'ParameterGroup': ParameterGroupsToJSON(value.parameterGroup),
        'ScpProvidersCurrencies': value.scpProvidersCurrencies === undefined ? undefined : ((value.scpProvidersCurrencies as Array<any>).map(ScpProvidersCurrenciesToJSON)),
    };
}


