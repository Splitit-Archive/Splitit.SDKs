/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConfigValues,
    ConfigValuesFromJSON,
    ConfigValuesFromJSONTyped,
    ConfigValuesToJSON,
    Merchants,
    MerchantsFromJSON,
    MerchantsFromJSONTyped,
    MerchantsToJSON,
    TouchPoints,
    TouchPointsFromJSON,
    TouchPointsFromJSONTyped,
    TouchPointsToJSON,
} from './';

/**
 * 
 * @export
 * @interface TouchPointColorValuesAllOf
 */
export interface TouchPointColorValuesAllOf {
    /**
     * 
     * @type {number}
     * @memberof TouchPointColorValuesAllOf
     */
    touchPointId: number;
    /**
     * 
     * @type {number}
     * @memberof TouchPointColorValuesAllOf
     */
    merchantId?: number;
    /**
     * 
     * @type {Merchants}
     * @memberof TouchPointColorValuesAllOf
     */
    merchant?: Merchants;
    /**
     * 
     * @type {Array<ConfigValues>}
     * @memberof TouchPointColorValuesAllOf
     */
    colors?: Array<ConfigValues>;
    /**
     * 
     * @type {TouchPoints}
     * @memberof TouchPointColorValuesAllOf
     */
    touchPoint?: TouchPoints;
}

export function TouchPointColorValuesAllOfFromJSON(json: any): TouchPointColorValuesAllOf {
    return TouchPointColorValuesAllOfFromJSONTyped(json, false);
}

export function TouchPointColorValuesAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): TouchPointColorValuesAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'touchPointId': json['TouchPointId'],
        'merchantId': !exists(json, 'MerchantId') ? undefined : json['MerchantId'],
        'merchant': !exists(json, 'Merchant') ? undefined : MerchantsFromJSON(json['Merchant']),
        'colors': !exists(json, 'Colors') ? undefined : ((json['Colors'] as Array<any>).map(ConfigValuesFromJSON)),
        'touchPoint': !exists(json, 'TouchPoint') ? undefined : TouchPointsFromJSON(json['TouchPoint']),
    };
}

export function TouchPointColorValuesAllOfToJSON(value?: TouchPointColorValuesAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'TouchPointId': value.touchPointId,
        'MerchantId': value.merchantId,
        'Merchant': MerchantsToJSON(value.merchant),
        'Colors': value.colors === undefined ? undefined : ((value.colors as Array<any>).map(ConfigValuesToJSON)),
        'TouchPoint': TouchPointsToJSON(value.touchPoint),
    };
}


