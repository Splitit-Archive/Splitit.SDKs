/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AmountDetails2,
    AmountDetails2FromJSON,
    AmountDetails2FromJSONTyped,
    AmountDetails2ToJSON,
    Cards,
    CardsFromJSON,
    CardsFromJSONTyped,
    CardsToJSON,
    CartItems,
    CartItemsFromJSON,
    CartItemsFromJSONTyped,
    CartItemsToJSON,
    Currencies,
    CurrenciesFromJSON,
    CurrenciesFromJSONTyped,
    CurrenciesToJSON,
    DelayResolution,
    DelayResolutionFromJSON,
    DelayResolutionFromJSONTyped,
    DelayResolutionToJSON,
    EmailAuditLogs,
    EmailAuditLogsFromJSON,
    EmailAuditLogsFromJSONTyped,
    EmailAuditLogsToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    FeesDocuments,
    FeesDocumentsFromJSON,
    FeesDocumentsFromJSONTyped,
    FeesDocumentsToJSON,
    FraudDetectionLogs,
    FraudDetectionLogsFromJSON,
    FraudDetectionLogsFromJSONTyped,
    FraudDetectionLogsToJSON,
    FundingCollectDocumentDetails,
    FundingCollectDocumentDetailsFromJSON,
    FundingCollectDocumentDetailsFromJSONTyped,
    FundingCollectDocumentDetailsToJSON,
    InstallmentPlanAuditLogs,
    InstallmentPlanAuditLogsFromJSON,
    InstallmentPlanAuditLogsFromJSONTyped,
    InstallmentPlanAuditLogsToJSON,
    InstallmentPlanEvents,
    InstallmentPlanEventsFromJSON,
    InstallmentPlanEventsFromJSONTyped,
    InstallmentPlanEventsToJSON,
    InstallmentPlanSetupContexts,
    InstallmentPlanSetupContextsFromJSON,
    InstallmentPlanSetupContextsFromJSONTyped,
    InstallmentPlanSetupContextsToJSON,
    InstallmentPlanStatus,
    InstallmentPlanStatusFromJSON,
    InstallmentPlanStatusFromJSONTyped,
    InstallmentPlanStatusToJSON,
    InstallmentPlanStatusLogEntries,
    InstallmentPlanStatusLogEntriesFromJSON,
    InstallmentPlanStatusLogEntriesFromJSONTyped,
    InstallmentPlanStatusLogEntriesToJSON,
    InstallmentPlanTerminalDatas,
    InstallmentPlanTerminalDatasFromJSON,
    InstallmentPlanTerminalDatasFromJSONTyped,
    InstallmentPlanTerminalDatasToJSON,
    InstallmentPlansAllOf,
    InstallmentPlansAllOfFromJSON,
    InstallmentPlansAllOfFromJSONTyped,
    InstallmentPlansAllOfToJSON,
    Installments,
    InstallmentsFromJSON,
    InstallmentsFromJSONTyped,
    InstallmentsToJSON,
    MoneyFlows,
    MoneyFlowsFromJSON,
    MoneyFlowsFromJSONTyped,
    MoneyFlowsToJSON,
    PisMembers,
    PisMembersFromJSON,
    PisMembersFromJSONTyped,
    PisMembersToJSON,
    PlanStrategy,
    PlanStrategyFromJSON,
    PlanStrategyFromJSONTyped,
    PlanStrategyToJSON,
    PurchaseMethod,
    PurchaseMethodFromJSON,
    PurchaseMethodFromJSONTyped,
    PurchaseMethodToJSON,
    ReAuthorizations,
    ReAuthorizationsFromJSON,
    ReAuthorizationsFromJSONTyped,
    ReAuthorizationsToJSON,
    RefundLogEntries,
    RefundLogEntriesFromJSON,
    RefundLogEntriesFromJSONTyped,
    RefundLogEntriesToJSON,
    TerminalGatewayDatas,
    TerminalGatewayDatasFromJSON,
    TerminalGatewayDatasFromJSONTyped,
    TerminalGatewayDatasToJSON,
    Terminals,
    TerminalsFromJSON,
    TerminalsFromJSONTyped,
    TerminalsToJSON,
    TestModes,
    TestModesFromJSON,
    TestModesFromJSONTyped,
    TestModesToJSON,
    TransferDocumentDetails,
    TransferDocumentDetailsFromJSON,
    TransferDocumentDetailsFromJSONTyped,
    TransferDocumentDetailsToJSON,
} from './';

/**
 * 
 * @export
 * @interface InstallmentPlans
 */
export interface InstallmentPlans {
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    terminalId: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    numberOfInstallments: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    amountBeforeFees: number;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlans
     */
    eula: boolean;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlans
     */
    installmentPlanNumber?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlans
     */
    isFullCaptured: boolean;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    beginLockTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    merchantFinancedDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    merchantReserveReturnedDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    plannedFullCapture?: Date;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    installmentPlanTerminalDataId: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    currencyId: number;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlans
     */
    refOrderNumber?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    activeCardId?: number;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlans
     */
    base64PngSignature?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlans
     */
    isChargedBack: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlans
     */
    areChargesHeld: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlans
     */
    autoRetry: boolean;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlans
     */
    pisMemberUniqueId?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    pisMemberId?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    subtotal: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    tax: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    shipping: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    setupContextId: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    originalAmount: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    refundAmount: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    reservePoolAmount: number;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    shopperApprovalDateTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    cancellationDateTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    activatedDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlans
     */
    deActivatedDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    amountForFunding: number;
    /**
     * 
     * @type {Currencies}
     * @memberof InstallmentPlans
     */
    amountForFundingCurrency?: Currencies;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    amountForFundingExchangeRate: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    amountForFundingTransactionCurrency: number;
    /**
     * 
     * @type {Cards}
     * @memberof InstallmentPlans
     */
    activeCard?: Cards;
    /**
     * 
     * @type {Currencies}
     * @memberof InstallmentPlans
     */
    currency?: Currencies;
    /**
     * 
     * @type {InstallmentPlanTerminalDatas}
     * @memberof InstallmentPlans
     */
    installmentPlanTerminalData?: InstallmentPlanTerminalDatas;
    /**
     * 
     * @type {PisMembers}
     * @memberof InstallmentPlans
     */
    pisMember?: PisMembers;
    /**
     * 
     * @type {InstallmentPlanSetupContexts}
     * @memberof InstallmentPlans
     */
    setupContext?: InstallmentPlanSetupContexts;
    /**
     * 
     * @type {Terminals}
     * @memberof InstallmentPlans
     */
    terminal?: Terminals;
    /**
     * 
     * @type {Array<CartItems>}
     * @memberof InstallmentPlans
     */
    cartItems?: Array<CartItems>;
    /**
     * 
     * @type {Array<EmailAuditLogs>}
     * @memberof InstallmentPlans
     */
    emailAuditLogs?: Array<EmailAuditLogs>;
    /**
     * 
     * @type {Array<FeesDocuments>}
     * @memberof InstallmentPlans
     */
    feesDocuments?: Array<FeesDocuments>;
    /**
     * 
     * @type {Array<FraudDetectionLogs>}
     * @memberof InstallmentPlans
     */
    fraudDetectionLogs?: Array<FraudDetectionLogs>;
    /**
     * 
     * @type {Array<FundingCollectDocumentDetails>}
     * @memberof InstallmentPlans
     */
    fundingCollectDocumentDetails?: Array<FundingCollectDocumentDetails>;
    /**
     * 
     * @type {Array<InstallmentPlanAuditLogs>}
     * @memberof InstallmentPlans
     */
    installmentPlanAuditLogs?: Array<InstallmentPlanAuditLogs>;
    /**
     * 
     * @type {Array<InstallmentPlanEvents>}
     * @memberof InstallmentPlans
     */
    installmentPlanEvents?: Array<InstallmentPlanEvents>;
    /**
     * 
     * @type {Array<InstallmentPlanStatusLogEntries>}
     * @memberof InstallmentPlans
     */
    installmentPlanStatusLogEntries?: Array<InstallmentPlanStatusLogEntries>;
    /**
     * 
     * @type {Array<Installments>}
     * @memberof InstallmentPlans
     */
    installments?: Array<Installments>;
    /**
     * 
     * @type {Array<ReAuthorizations>}
     * @memberof InstallmentPlans
     */
    reAuthorizations?: Array<ReAuthorizations>;
    /**
     * 
     * @type {Array<RefundLogEntries>}
     * @memberof InstallmentPlans
     */
    refundLogEntries?: Array<RefundLogEntries>;
    /**
     * 
     * @type {Array<TransferDocumentDetails>}
     * @memberof InstallmentPlans
     */
    transferDocumentDetails?: Array<TransferDocumentDetails>;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlans
     */
    activeTerminalDataId?: number;
    /**
     * 
     * @type {TerminalGatewayDatas}
     * @memberof InstallmentPlans
     */
    activeTerminalData?: TerminalGatewayDatas;
    /**
     * 
     * @type {DelayResolution}
     * @memberof InstallmentPlans
     */
    delayResolution?: DelayResolution;
    /**
     * 
     * @type {TestModes}
     * @memberof InstallmentPlans
     */
    testMode: TestModes;
    /**
     * 
     * @type {MoneyFlows}
     * @memberof InstallmentPlans
     */
    fundingTypesId: MoneyFlows;
    /**
     * 
     * @type {PlanStrategy}
     * @memberof InstallmentPlans
     */
    strategy: PlanStrategy;
    /**
     * 
     * @type {InstallmentPlanStatus}
     * @memberof InstallmentPlans
     */
    status: InstallmentPlanStatus;
    /**
     * 
     * @type {PurchaseMethod}
     * @memberof InstallmentPlans
     */
    purchaseMethod: PurchaseMethod;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlans
     */
    extendedParamsSerializedData?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof InstallmentPlans
     */
    extendedParams?: { [key: string]: string; };
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlans
     */
    autoCapture: boolean;
    /**
     * 
     * @type {Array<CartItems>}
     * @memberof InstallmentPlans
     */
    items?: Array<CartItems>;
    /**
     * 
     * @type {AmountDetails2}
     * @memberof InstallmentPlans
     */
    amountDetails?: AmountDetails2;
}

export function InstallmentPlansFromJSON(json: any): InstallmentPlans {
    return InstallmentPlansFromJSONTyped(json, false);
}

export function InstallmentPlansFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstallmentPlans {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'terminalId': json['TerminalId'],
        'numberOfInstallments': json['NumberOfInstallments'],
        'amount': json['Amount'],
        'amountBeforeFees': json['AmountBeforeFees'],
        'eula': json['Eula'],
        'installmentPlanNumber': !exists(json, 'InstallmentPlanNumber') ? undefined : json['InstallmentPlanNumber'],
        'isFullCaptured': json['IsFullCaptured'],
        'beginLockTime': !exists(json, 'BeginLockTime') ? undefined : (new Date(json['BeginLockTime'])),
        'merchantFinancedDate': !exists(json, 'MerchantFinancedDate') ? undefined : (new Date(json['MerchantFinancedDate'])),
        'merchantReserveReturnedDate': !exists(json, 'MerchantReserveReturnedDate') ? undefined : (new Date(json['MerchantReserveReturnedDate'])),
        'plannedFullCapture': !exists(json, 'PlannedFullCapture') ? undefined : (new Date(json['PlannedFullCapture'])),
        'installmentPlanTerminalDataId': json['InstallmentPlanTerminalDataId'],
        'currencyId': json['CurrencyId'],
        'refOrderNumber': !exists(json, 'RefOrderNumber') ? undefined : json['RefOrderNumber'],
        'activeCardId': !exists(json, 'ActiveCardId') ? undefined : json['ActiveCardId'],
        'base64PngSignature': !exists(json, 'Base64PngSignature') ? undefined : json['Base64PngSignature'],
        'isChargedBack': json['IsChargedBack'],
        'areChargesHeld': json['AreChargesHeld'],
        'autoRetry': json['AutoRetry'],
        'pisMemberUniqueId': !exists(json, 'PisMemberUniqueId') ? undefined : json['PisMemberUniqueId'],
        'pisMemberId': !exists(json, 'PisMemberId') ? undefined : json['PisMemberId'],
        'subtotal': json['Subtotal'],
        'tax': json['Tax'],
        'shipping': json['Shipping'],
        'setupContextId': json['SetupContextId'],
        'originalAmount': json['OriginalAmount'],
        'refundAmount': json['RefundAmount'],
        'reservePoolAmount': json['ReservePoolAmount'],
        'shopperApprovalDateTime': !exists(json, 'ShopperApprovalDateTime') ? undefined : (new Date(json['ShopperApprovalDateTime'])),
        'cancellationDateTime': !exists(json, 'CancellationDateTime') ? undefined : (new Date(json['CancellationDateTime'])),
        'activatedDate': !exists(json, 'ActivatedDate') ? undefined : (new Date(json['ActivatedDate'])),
        'deActivatedDate': !exists(json, 'DeActivatedDate') ? undefined : (new Date(json['DeActivatedDate'])),
        'amountForFunding': json['AmountForFunding'],
        'amountForFundingCurrency': !exists(json, 'AmountForFunding_Currency') ? undefined : CurrenciesFromJSON(json['AmountForFunding_Currency']),
        'amountForFundingExchangeRate': json['AmountForFunding_ExchangeRate'],
        'amountForFundingTransactionCurrency': json['AmountForFunding_TransactionCurrency'],
        'activeCard': !exists(json, 'ActiveCard') ? undefined : CardsFromJSON(json['ActiveCard']),
        'currency': !exists(json, 'Currency') ? undefined : CurrenciesFromJSON(json['Currency']),
        'installmentPlanTerminalData': !exists(json, 'InstallmentPlanTerminalData') ? undefined : InstallmentPlanTerminalDatasFromJSON(json['InstallmentPlanTerminalData']),
        'pisMember': !exists(json, 'PisMember') ? undefined : PisMembersFromJSON(json['PisMember']),
        'setupContext': !exists(json, 'SetupContext') ? undefined : InstallmentPlanSetupContextsFromJSON(json['SetupContext']),
        'terminal': !exists(json, 'Terminal') ? undefined : TerminalsFromJSON(json['Terminal']),
        'cartItems': !exists(json, 'CartItems') ? undefined : ((json['CartItems'] as Array<any>).map(CartItemsFromJSON)),
        'emailAuditLogs': !exists(json, 'EmailAuditLogs') ? undefined : ((json['EmailAuditLogs'] as Array<any>).map(EmailAuditLogsFromJSON)),
        'feesDocuments': !exists(json, 'FeesDocuments') ? undefined : ((json['FeesDocuments'] as Array<any>).map(FeesDocumentsFromJSON)),
        'fraudDetectionLogs': !exists(json, 'FraudDetectionLogs') ? undefined : ((json['FraudDetectionLogs'] as Array<any>).map(FraudDetectionLogsFromJSON)),
        'fundingCollectDocumentDetails': !exists(json, 'FundingCollectDocumentDetails') ? undefined : ((json['FundingCollectDocumentDetails'] as Array<any>).map(FundingCollectDocumentDetailsFromJSON)),
        'installmentPlanAuditLogs': !exists(json, 'InstallmentPlanAuditLogs') ? undefined : ((json['InstallmentPlanAuditLogs'] as Array<any>).map(InstallmentPlanAuditLogsFromJSON)),
        'installmentPlanEvents': !exists(json, 'InstallmentPlanEvents') ? undefined : ((json['InstallmentPlanEvents'] as Array<any>).map(InstallmentPlanEventsFromJSON)),
        'installmentPlanStatusLogEntries': !exists(json, 'InstallmentPlanStatusLogEntries') ? undefined : ((json['InstallmentPlanStatusLogEntries'] as Array<any>).map(InstallmentPlanStatusLogEntriesFromJSON)),
        'installments': !exists(json, 'Installments') ? undefined : ((json['Installments'] as Array<any>).map(InstallmentsFromJSON)),
        'reAuthorizations': !exists(json, 'ReAuthorizations') ? undefined : ((json['ReAuthorizations'] as Array<any>).map(ReAuthorizationsFromJSON)),
        'refundLogEntries': !exists(json, 'RefundLogEntries') ? undefined : ((json['RefundLogEntries'] as Array<any>).map(RefundLogEntriesFromJSON)),
        'transferDocumentDetails': !exists(json, 'TransferDocumentDetails') ? undefined : ((json['TransferDocumentDetails'] as Array<any>).map(TransferDocumentDetailsFromJSON)),
        'activeTerminalDataId': !exists(json, 'ActiveTerminalDataId') ? undefined : json['ActiveTerminalDataId'],
        'activeTerminalData': !exists(json, 'ActiveTerminalData') ? undefined : TerminalGatewayDatasFromJSON(json['ActiveTerminalData']),
        'delayResolution': !exists(json, 'DelayResolution') ? undefined : DelayResolutionFromJSON(json['DelayResolution']),
        'testMode': TestModesFromJSON(json['TestMode']),
        'fundingTypesId': MoneyFlowsFromJSON(json['FundingTypesId']),
        'strategy': PlanStrategyFromJSON(json['Strategy']),
        'status': InstallmentPlanStatusFromJSON(json['Status']),
        'purchaseMethod': PurchaseMethodFromJSON(json['PurchaseMethod']),
        'extendedParamsSerializedData': !exists(json, 'ExtendedParamsSerializedData') ? undefined : json['ExtendedParamsSerializedData'],
        'extendedParams': !exists(json, 'ExtendedParams') ? undefined : json['ExtendedParams'],
        'autoCapture': json['AutoCapture'],
        'items': !exists(json, 'Items') ? undefined : ((json['Items'] as Array<any>).map(CartItemsFromJSON)),
        'amountDetails': !exists(json, 'AmountDetails') ? undefined : AmountDetails2FromJSON(json['AmountDetails']),
    };
}

export function InstallmentPlansToJSON(value?: InstallmentPlans | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'TerminalId': value.terminalId,
        'NumberOfInstallments': value.numberOfInstallments,
        'Amount': value.amount,
        'AmountBeforeFees': value.amountBeforeFees,
        'Eula': value.eula,
        'InstallmentPlanNumber': value.installmentPlanNumber,
        'IsFullCaptured': value.isFullCaptured,
        'BeginLockTime': value.beginLockTime === undefined ? undefined : (value.beginLockTime.toISOString()),
        'MerchantFinancedDate': value.merchantFinancedDate === undefined ? undefined : (value.merchantFinancedDate.toISOString()),
        'MerchantReserveReturnedDate': value.merchantReserveReturnedDate === undefined ? undefined : (value.merchantReserveReturnedDate.toISOString()),
        'PlannedFullCapture': value.plannedFullCapture === undefined ? undefined : (value.plannedFullCapture.toISOString()),
        'InstallmentPlanTerminalDataId': value.installmentPlanTerminalDataId,
        'CurrencyId': value.currencyId,
        'RefOrderNumber': value.refOrderNumber,
        'ActiveCardId': value.activeCardId,
        'Base64PngSignature': value.base64PngSignature,
        'IsChargedBack': value.isChargedBack,
        'AreChargesHeld': value.areChargesHeld,
        'AutoRetry': value.autoRetry,
        'PisMemberUniqueId': value.pisMemberUniqueId,
        'PisMemberId': value.pisMemberId,
        'Subtotal': value.subtotal,
        'Tax': value.tax,
        'Shipping': value.shipping,
        'SetupContextId': value.setupContextId,
        'OriginalAmount': value.originalAmount,
        'RefundAmount': value.refundAmount,
        'ReservePoolAmount': value.reservePoolAmount,
        'ShopperApprovalDateTime': value.shopperApprovalDateTime === undefined ? undefined : (value.shopperApprovalDateTime.toISOString()),
        'CancellationDateTime': value.cancellationDateTime === undefined ? undefined : (value.cancellationDateTime.toISOString()),
        'ActivatedDate': value.activatedDate === undefined ? undefined : (value.activatedDate.toISOString()),
        'DeActivatedDate': value.deActivatedDate === undefined ? undefined : (value.deActivatedDate.toISOString()),
        'AmountForFunding': value.amountForFunding,
        'AmountForFunding_Currency': CurrenciesToJSON(value.amountForFundingCurrency),
        'AmountForFunding_ExchangeRate': value.amountForFundingExchangeRate,
        'AmountForFunding_TransactionCurrency': value.amountForFundingTransactionCurrency,
        'ActiveCard': CardsToJSON(value.activeCard),
        'Currency': CurrenciesToJSON(value.currency),
        'InstallmentPlanTerminalData': InstallmentPlanTerminalDatasToJSON(value.installmentPlanTerminalData),
        'PisMember': PisMembersToJSON(value.pisMember),
        'SetupContext': InstallmentPlanSetupContextsToJSON(value.setupContext),
        'Terminal': TerminalsToJSON(value.terminal),
        'CartItems': value.cartItems === undefined ? undefined : ((value.cartItems as Array<any>).map(CartItemsToJSON)),
        'EmailAuditLogs': value.emailAuditLogs === undefined ? undefined : ((value.emailAuditLogs as Array<any>).map(EmailAuditLogsToJSON)),
        'FeesDocuments': value.feesDocuments === undefined ? undefined : ((value.feesDocuments as Array<any>).map(FeesDocumentsToJSON)),
        'FraudDetectionLogs': value.fraudDetectionLogs === undefined ? undefined : ((value.fraudDetectionLogs as Array<any>).map(FraudDetectionLogsToJSON)),
        'FundingCollectDocumentDetails': value.fundingCollectDocumentDetails === undefined ? undefined : ((value.fundingCollectDocumentDetails as Array<any>).map(FundingCollectDocumentDetailsToJSON)),
        'InstallmentPlanAuditLogs': value.installmentPlanAuditLogs === undefined ? undefined : ((value.installmentPlanAuditLogs as Array<any>).map(InstallmentPlanAuditLogsToJSON)),
        'InstallmentPlanEvents': value.installmentPlanEvents === undefined ? undefined : ((value.installmentPlanEvents as Array<any>).map(InstallmentPlanEventsToJSON)),
        'InstallmentPlanStatusLogEntries': value.installmentPlanStatusLogEntries === undefined ? undefined : ((value.installmentPlanStatusLogEntries as Array<any>).map(InstallmentPlanStatusLogEntriesToJSON)),
        'Installments': value.installments === undefined ? undefined : ((value.installments as Array<any>).map(InstallmentsToJSON)),
        'ReAuthorizations': value.reAuthorizations === undefined ? undefined : ((value.reAuthorizations as Array<any>).map(ReAuthorizationsToJSON)),
        'RefundLogEntries': value.refundLogEntries === undefined ? undefined : ((value.refundLogEntries as Array<any>).map(RefundLogEntriesToJSON)),
        'TransferDocumentDetails': value.transferDocumentDetails === undefined ? undefined : ((value.transferDocumentDetails as Array<any>).map(TransferDocumentDetailsToJSON)),
        'ActiveTerminalDataId': value.activeTerminalDataId,
        'ActiveTerminalData': TerminalGatewayDatasToJSON(value.activeTerminalData),
        'DelayResolution': DelayResolutionToJSON(value.delayResolution),
        'TestMode': TestModesToJSON(value.testMode),
        'FundingTypesId': MoneyFlowsToJSON(value.fundingTypesId),
        'Strategy': PlanStrategyToJSON(value.strategy),
        'Status': InstallmentPlanStatusToJSON(value.status),
        'PurchaseMethod': PurchaseMethodToJSON(value.purchaseMethod),
        'ExtendedParamsSerializedData': value.extendedParamsSerializedData,
        'ExtendedParams': value.extendedParams,
        'AutoCapture': value.autoCapture,
        'Items': value.items === undefined ? undefined : ((value.items as Array<any>).map(CartItemsToJSON)),
        'AmountDetails': AmountDetails2ToJSON(value.amountDetails),
    };
}


