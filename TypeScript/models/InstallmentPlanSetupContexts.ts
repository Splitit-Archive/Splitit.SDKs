/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressData2,
    AddressData2FromJSON,
    AddressData2FromJSONTyped,
    AddressData2ToJSON,
    Countries,
    CountriesFromJSON,
    CountriesFromJSONTyped,
    CountriesToJSON,
    CountrySubdivisions,
    CountrySubdivisionsFromJSON,
    CountrySubdivisionsFromJSONTyped,
    CountrySubdivisionsToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    InstallmentPlanSetupContextsAllOf,
    InstallmentPlanSetupContextsAllOfFromJSON,
    InstallmentPlanSetupContextsAllOfFromJSONTyped,
    InstallmentPlanSetupContextsAllOfToJSON,
    InstallmentPlans,
    InstallmentPlansFromJSON,
    InstallmentPlansFromJSONTyped,
    InstallmentPlansToJSON,
    PaymentFormTPABTestingDefinition,
    PaymentFormTPABTestingDefinitionFromJSON,
    PaymentFormTPABTestingDefinitionFromJSONTyped,
    PaymentFormTPABTestingDefinitionToJSON,
    PlanStrategy,
    PlanStrategyFromJSON,
    PlanStrategyFromJSONTyped,
    PlanStrategyToJSON,
    VersionedTouchPoints,
    VersionedTouchPointsFromJSON,
    VersionedTouchPointsFromJSONTyped,
    VersionedTouchPointsToJSON,
} from './';

/**
 * 
 * @export
 * @interface InstallmentPlanSetupContexts
 */
export interface InstallmentPlanSetupContexts {
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    publicInstallmentPlanSession?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressAddressLine?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressZip?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressAddressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressCity?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    requestedNumberOfInstallments?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    successExitUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    errorExitUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    cancelExitUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    abTestQueryString?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    requestedFirstInstallmentAmount: number;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlanSetupContexts
     */
    requestedFirstScheduledInstallmentDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlanSetupContexts
     */
    sendShopperApprovalRequest?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlanSetupContexts
     */
    sendShopperPaymentRequest?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanSetupContexts
     */
    requestedCaptureOnCreation?: boolean;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressCountryId?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    suggestedPaymentTPId?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    aBTestingSessionId?: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    defaultNumOfInstallments: number;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressStateId?: number;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressLegacyFullAddressLine?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanSetupContexts
     */
    requestedFunding?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    successAsyncUrl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanSetupContexts
     */
    attempt3Dsecure?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    viewName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanSetupContexts
     */
    isOpenedInIframe: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InstallmentPlanSetupContexts
     */
    is3dSecureInPopup?: boolean;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    externalAuthUniqueGatewayId?: string;
    /**
     * 
     * @type {number}
     * @memberof InstallmentPlanSetupContexts
     */
    externalAmountDetails: number;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlanSetupContexts
     */
    externalAuthDate: Date;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    externalAuthTransactionLog?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    paymentApprovalPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    paymentApprovalEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    paymentMessage?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    termsAndConditionsKey?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    fingerPrintId?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    requestUpdateCardPhone?: string;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    requestUpdateCardEmail?: string;
    /**
     * 
     * @type {Date}
     * @memberof InstallmentPlanSetupContexts
     */
    requestUpdateCardTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddressFirstTimePopulatedBy?: string;
    /**
     * 
     * @type {Countries}
     * @memberof InstallmentPlanSetupContexts
     */
    country?: Countries;
    /**
     * 
     * @type {CountrySubdivisions}
     * @memberof InstallmentPlanSetupContexts
     */
    state?: CountrySubdivisions;
    /**
     * 
     * @type {PaymentFormTPABTestingDefinition}
     * @memberof InstallmentPlanSetupContexts
     */
    aBTestingSession?: PaymentFormTPABTestingDefinition;
    /**
     * 
     * @type {VersionedTouchPoints}
     * @memberof InstallmentPlanSetupContexts
     */
    suggestedPaymentTP?: VersionedTouchPoints;
    /**
     * 
     * @type {Array<InstallmentPlans>}
     * @memberof InstallmentPlanSetupContexts
     */
    installmentPlans?: Array<InstallmentPlans>;
    /**
     * 
     * @type {PlanStrategy}
     * @memberof InstallmentPlanSetupContexts
     */
    requestedStrategy?: PlanStrategy;
    /**
     * 
     * @type {AddressData2}
     * @memberof InstallmentPlanSetupContexts
     */
    billingAddress?: AddressData2;
}

export function InstallmentPlanSetupContextsFromJSON(json: any): InstallmentPlanSetupContexts {
    return InstallmentPlanSetupContextsFromJSONTyped(json, false);
}

export function InstallmentPlanSetupContextsFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstallmentPlanSetupContexts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'publicInstallmentPlanSession': !exists(json, 'PublicInstallmentPlanSession') ? undefined : json['PublicInstallmentPlanSession'],
        'billingAddressAddressLine': !exists(json, 'BillingAddressAddressLine') ? undefined : json['BillingAddressAddressLine'],
        'billingAddressZip': !exists(json, 'BillingAddressZip') ? undefined : json['BillingAddressZip'],
        'billingAddressAddressLine2': !exists(json, 'BillingAddressAddressLine2') ? undefined : json['BillingAddressAddressLine2'],
        'billingAddressCity': !exists(json, 'BillingAddressCity') ? undefined : json['BillingAddressCity'],
        'requestedNumberOfInstallments': !exists(json, 'RequestedNumberOfInstallments') ? undefined : json['RequestedNumberOfInstallments'],
        'successExitUrl': !exists(json, 'SuccessExitUrl') ? undefined : json['SuccessExitUrl'],
        'errorExitUrl': !exists(json, 'ErrorExitUrl') ? undefined : json['ErrorExitUrl'],
        'cancelExitUrl': !exists(json, 'CancelExitUrl') ? undefined : json['CancelExitUrl'],
        'abTestQueryString': !exists(json, 'AbTestQueryString') ? undefined : json['AbTestQueryString'],
        'requestedFirstInstallmentAmount': json['RequestedFirstInstallmentAmount'],
        'requestedFirstScheduledInstallmentDate': !exists(json, 'RequestedFirstScheduledInstallmentDate') ? undefined : (new Date(json['RequestedFirstScheduledInstallmentDate'])),
        'sendShopperApprovalRequest': !exists(json, 'SendShopperApprovalRequest') ? undefined : (new Date(json['SendShopperApprovalRequest'])),
        'sendShopperPaymentRequest': !exists(json, 'SendShopperPaymentRequest') ? undefined : (new Date(json['SendShopperPaymentRequest'])),
        'requestedCaptureOnCreation': !exists(json, 'RequestedCaptureOnCreation') ? undefined : json['RequestedCaptureOnCreation'],
        'billingAddressCountryId': !exists(json, 'BillingAddressCountryId') ? undefined : json['BillingAddressCountryId'],
        'suggestedPaymentTPId': !exists(json, 'SuggestedPaymentTPId') ? undefined : json['SuggestedPaymentTPId'],
        'aBTestingSessionId': !exists(json, 'ABTestingSessionId') ? undefined : json['ABTestingSessionId'],
        'defaultNumOfInstallments': json['DefaultNumOfInstallments'],
        'billingAddressStateId': !exists(json, 'BillingAddressStateId') ? undefined : json['BillingAddressStateId'],
        'billingAddressLegacyFullAddressLine': !exists(json, 'BillingAddressLegacyFullAddressLine') ? undefined : json['BillingAddressLegacyFullAddressLine'],
        'requestedFunding': !exists(json, 'RequestedFunding') ? undefined : json['RequestedFunding'],
        'successAsyncUrl': !exists(json, 'SuccessAsyncUrl') ? undefined : json['SuccessAsyncUrl'],
        'attempt3Dsecure': !exists(json, 'Attempt3Dsecure') ? undefined : json['Attempt3Dsecure'],
        'viewName': !exists(json, 'ViewName') ? undefined : json['ViewName'],
        'isOpenedInIframe': json['IsOpenedInIframe'],
        'is3dSecureInPopup': !exists(json, 'Is3dSecureInPopup') ? undefined : json['Is3dSecureInPopup'],
        'externalAuthUniqueGatewayId': !exists(json, 'ExternalAuthUniqueGatewayId') ? undefined : json['ExternalAuthUniqueGatewayId'],
        'externalAmountDetails': json['ExternalAmountDetails'],
        'externalAuthDate': (new Date(json['ExternalAuthDate'])),
        'externalAuthTransactionLog': !exists(json, 'ExternalAuthTransactionLog') ? undefined : json['ExternalAuthTransactionLog'],
        'paymentApprovalPhone': !exists(json, 'PaymentApprovalPhone') ? undefined : json['PaymentApprovalPhone'],
        'paymentApprovalEmail': !exists(json, 'PaymentApprovalEmail') ? undefined : json['PaymentApprovalEmail'],
        'paymentMessage': !exists(json, 'PaymentMessage') ? undefined : json['PaymentMessage'],
        'termsAndConditionsKey': !exists(json, 'TermsAndConditionsKey') ? undefined : json['TermsAndConditionsKey'],
        'fingerPrintId': !exists(json, 'FingerPrintId') ? undefined : json['FingerPrintId'],
        'requestUpdateCardPhone': !exists(json, 'RequestUpdateCardPhone') ? undefined : json['RequestUpdateCardPhone'],
        'requestUpdateCardEmail': !exists(json, 'RequestUpdateCardEmail') ? undefined : json['RequestUpdateCardEmail'],
        'requestUpdateCardTime': !exists(json, 'RequestUpdateCardTime') ? undefined : (new Date(json['RequestUpdateCardTime'])),
        'billingAddressFirstTimePopulatedBy': !exists(json, 'BillingAddressFirstTimePopulatedBy') ? undefined : json['BillingAddressFirstTimePopulatedBy'],
        'country': !exists(json, 'Country') ? undefined : CountriesFromJSON(json['Country']),
        'state': !exists(json, 'State') ? undefined : CountrySubdivisionsFromJSON(json['State']),
        'aBTestingSession': !exists(json, 'ABTestingSession') ? undefined : PaymentFormTPABTestingDefinitionFromJSON(json['ABTestingSession']),
        'suggestedPaymentTP': !exists(json, 'SuggestedPaymentTP') ? undefined : VersionedTouchPointsFromJSON(json['SuggestedPaymentTP']),
        'installmentPlans': !exists(json, 'InstallmentPlans') ? undefined : ((json['InstallmentPlans'] as Array<any>).map(InstallmentPlansFromJSON)),
        'requestedStrategy': !exists(json, 'RequestedStrategy') ? undefined : PlanStrategyFromJSON(json['RequestedStrategy']),
        'billingAddress': !exists(json, 'BillingAddress') ? undefined : AddressData2FromJSON(json['BillingAddress']),
    };
}

export function InstallmentPlanSetupContextsToJSON(value?: InstallmentPlanSetupContexts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'PublicInstallmentPlanSession': value.publicInstallmentPlanSession,
        'BillingAddressAddressLine': value.billingAddressAddressLine,
        'BillingAddressZip': value.billingAddressZip,
        'BillingAddressAddressLine2': value.billingAddressAddressLine2,
        'BillingAddressCity': value.billingAddressCity,
        'RequestedNumberOfInstallments': value.requestedNumberOfInstallments,
        'SuccessExitUrl': value.successExitUrl,
        'ErrorExitUrl': value.errorExitUrl,
        'CancelExitUrl': value.cancelExitUrl,
        'AbTestQueryString': value.abTestQueryString,
        'RequestedFirstInstallmentAmount': value.requestedFirstInstallmentAmount,
        'RequestedFirstScheduledInstallmentDate': value.requestedFirstScheduledInstallmentDate === undefined ? undefined : (value.requestedFirstScheduledInstallmentDate.toISOString()),
        'SendShopperApprovalRequest': value.sendShopperApprovalRequest === undefined ? undefined : (value.sendShopperApprovalRequest.toISOString()),
        'SendShopperPaymentRequest': value.sendShopperPaymentRequest === undefined ? undefined : (value.sendShopperPaymentRequest.toISOString()),
        'RequestedCaptureOnCreation': value.requestedCaptureOnCreation,
        'BillingAddressCountryId': value.billingAddressCountryId,
        'SuggestedPaymentTPId': value.suggestedPaymentTPId,
        'ABTestingSessionId': value.aBTestingSessionId,
        'DefaultNumOfInstallments': value.defaultNumOfInstallments,
        'BillingAddressStateId': value.billingAddressStateId,
        'BillingAddressLegacyFullAddressLine': value.billingAddressLegacyFullAddressLine,
        'RequestedFunding': value.requestedFunding,
        'SuccessAsyncUrl': value.successAsyncUrl,
        'Attempt3Dsecure': value.attempt3Dsecure,
        'ViewName': value.viewName,
        'IsOpenedInIframe': value.isOpenedInIframe,
        'Is3dSecureInPopup': value.is3dSecureInPopup,
        'ExternalAuthUniqueGatewayId': value.externalAuthUniqueGatewayId,
        'ExternalAmountDetails': value.externalAmountDetails,
        'ExternalAuthDate': (value.externalAuthDate.toISOString()),
        'ExternalAuthTransactionLog': value.externalAuthTransactionLog,
        'PaymentApprovalPhone': value.paymentApprovalPhone,
        'PaymentApprovalEmail': value.paymentApprovalEmail,
        'PaymentMessage': value.paymentMessage,
        'TermsAndConditionsKey': value.termsAndConditionsKey,
        'FingerPrintId': value.fingerPrintId,
        'RequestUpdateCardPhone': value.requestUpdateCardPhone,
        'RequestUpdateCardEmail': value.requestUpdateCardEmail,
        'RequestUpdateCardTime': value.requestUpdateCardTime === undefined ? undefined : (value.requestUpdateCardTime.toISOString()),
        'BillingAddressFirstTimePopulatedBy': value.billingAddressFirstTimePopulatedBy,
        'Country': CountriesToJSON(value.country),
        'State': CountrySubdivisionsToJSON(value.state),
        'ABTestingSession': PaymentFormTPABTestingDefinitionToJSON(value.aBTestingSession),
        'SuggestedPaymentTP': VersionedTouchPointsToJSON(value.suggestedPaymentTP),
        'InstallmentPlans': value.installmentPlans === undefined ? undefined : ((value.installmentPlans as Array<any>).map(InstallmentPlansToJSON)),
        'RequestedStrategy': PlanStrategyToJSON(value.requestedStrategy),
        'BillingAddress': AddressData2ToJSON(value.billingAddress),
    };
}


