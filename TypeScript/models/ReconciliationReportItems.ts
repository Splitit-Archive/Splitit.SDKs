/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    OperationType,
    OperationTypeFromJSON,
    OperationTypeFromJSONTyped,
    OperationTypeToJSON,
    ProcessorType,
    ProcessorTypeFromJSON,
    ProcessorTypeFromJSONTyped,
    ProcessorTypeToJSON,
    ReconciliationReportItemsAllOf,
    ReconciliationReportItemsAllOfFromJSON,
    ReconciliationReportItemsAllOfFromJSONTyped,
    ReconciliationReportItemsAllOfToJSON,
    ReconciliationReports,
    ReconciliationReportsFromJSON,
    ReconciliationReportsFromJSONTyped,
    ReconciliationReportsToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReconciliationReportItems
 */
export interface ReconciliationReportItems {
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReportItems
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReportItems
     */
    gatewayAmount: number;
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReportItems
     */
    gatewayCount: number;
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReportItems
     */
    pisamount: number;
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReportItems
     */
    piscount: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReconciliationReportItems
     */
    isIdentical: boolean;
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReportItems
     */
    reconciliationReportId: number;
    /**
     * 
     * @type {ReconciliationReports}
     * @memberof ReconciliationReportItems
     */
    reconciliationReport?: ReconciliationReports;
    /**
     * 
     * @type {OperationType}
     * @memberof ReconciliationReportItems
     */
    transactionType: OperationType;
    /**
     * 
     * @type {ProcessorType}
     * @memberof ReconciliationReportItems
     */
    gatewayType: ProcessorType;
}

export function ReconciliationReportItemsFromJSON(json: any): ReconciliationReportItems {
    return ReconciliationReportItemsFromJSONTyped(json, false);
}

export function ReconciliationReportItemsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReconciliationReportItems {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'gatewayAmount': json['GatewayAmount'],
        'gatewayCount': json['GatewayCount'],
        'pisamount': json['Pisamount'],
        'piscount': json['Piscount'],
        'isIdentical': json['IsIdentical'],
        'reconciliationReportId': json['ReconciliationReportId'],
        'reconciliationReport': !exists(json, 'ReconciliationReport') ? undefined : ReconciliationReportsFromJSON(json['ReconciliationReport']),
        'transactionType': OperationTypeFromJSON(json['TransactionType']),
        'gatewayType': ProcessorTypeFromJSON(json['GatewayType']),
    };
}

export function ReconciliationReportItemsToJSON(value?: ReconciliationReportItems | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'GatewayAmount': value.gatewayAmount,
        'GatewayCount': value.gatewayCount,
        'Pisamount': value.pisamount,
        'Piscount': value.piscount,
        'IsIdentical': value.isIdentical,
        'ReconciliationReportId': value.reconciliationReportId,
        'ReconciliationReport': ReconciliationReportsToJSON(value.reconciliationReport),
        'TransactionType': OperationTypeToJSON(value.transactionType),
        'GatewayType': ProcessorTypeToJSON(value.gatewayType),
    };
}


