/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CardStateLogs,
    CardStateLogsFromJSON,
    CardStateLogsFromJSONTyped,
    CardStateLogsToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    FeesDocuments,
    FeesDocumentsFromJSON,
    FeesDocumentsFromJSONTyped,
    FeesDocumentsToJSON,
    FundingCollectDocumentDetails,
    FundingCollectDocumentDetailsFromJSON,
    FundingCollectDocumentDetailsFromJSONTyped,
    FundingCollectDocumentDetailsToJSON,
    InstallmentPaymentGatewayTransactionLogs,
    InstallmentPaymentGatewayTransactionLogsFromJSON,
    InstallmentPaymentGatewayTransactionLogsFromJSONTyped,
    InstallmentPaymentGatewayTransactionLogsToJSON,
    InstallmentPlans,
    InstallmentPlansFromJSON,
    InstallmentPlansFromJSONTyped,
    InstallmentPlansToJSON,
    InstallmentStatus,
    InstallmentStatusFromJSON,
    InstallmentStatusFromJSONTyped,
    InstallmentStatusToJSON,
    InstallmentsAllOf,
    InstallmentsAllOfFromJSON,
    InstallmentsAllOfFromJSONTyped,
    InstallmentsAllOfToJSON,
    MerchantAccountType,
    MerchantAccountTypeFromJSON,
    MerchantAccountTypeFromJSONTyped,
    MerchantAccountTypeToJSON,
    Processors,
    ProcessorsFromJSON,
    ProcessorsFromJSONTyped,
    ProcessorsToJSON,
    TransferDocumentDetails,
    TransferDocumentDetailsFromJSON,
    TransferDocumentDetailsFromJSONTyped,
    TransferDocumentDetailsToJSON,
} from './';

/**
 * 
 * @export
 * @interface Installments
 */
export interface Installments {
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    installmentPlanId: number;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    installmentNumber: number;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    processorId: number;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    originUtcOffset: number;
    /**
     * 
     * @type {Date}
     * @memberof Installments
     */
    createdDateUtc: Date;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    amount: number;
    /**
     * 
     * @type {Date}
     * @memberof Installments
     */
    processDateTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Installments
     */
    processDateTimeUtc?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Installments
     */
    isRefund: boolean;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    cardStateId?: number;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    originalAmount: number;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    refundAmount: number;
    /**
     * 
     * @type {boolean}
     * @memberof Installments
     */
    isFullCapture: boolean;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    authorizedAmount: number;
    /**
     * 
     * @type {boolean}
     * @memberof Installments
     */
    isPreAuthorized: boolean;
    /**
     * 
     * @type {number}
     * @memberof Installments
     */
    amountForFunding: number;
    /**
     * 
     * @type {CardStateLogs}
     * @memberof Installments
     */
    cardState?: CardStateLogs;
    /**
     * 
     * @type {InstallmentPlans}
     * @memberof Installments
     */
    installmentPlan?: InstallmentPlans;
    /**
     * 
     * @type {Processors}
     * @memberof Installments
     */
    processor?: Processors;
    /**
     * 
     * @type {Array<FeesDocuments>}
     * @memberof Installments
     */
    feesDocuments?: Array<FeesDocuments>;
    /**
     * 
     * @type {Array<FundingCollectDocumentDetails>}
     * @memberof Installments
     */
    fundingCollectDocumentDetails?: Array<FundingCollectDocumentDetails>;
    /**
     * 
     * @type {Array<InstallmentPaymentGatewayTransactionLogs>}
     * @memberof Installments
     */
    installmentPaymentGatewayTransactionLogs?: Array<InstallmentPaymentGatewayTransactionLogs>;
    /**
     * 
     * @type {Array<TransferDocumentDetails>}
     * @memberof Installments
     */
    transferDocumentDetails?: Array<TransferDocumentDetails>;
    /**
     * 
     * @type {MerchantAccountType}
     * @memberof Installments
     */
    merchantAccountType: MerchantAccountType;
    /**
     * 
     * @type {InstallmentStatus}
     * @memberof Installments
     */
    status: InstallmentStatus;
}

export function InstallmentsFromJSON(json: any): Installments {
    return InstallmentsFromJSONTyped(json, false);
}

export function InstallmentsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Installments {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'installmentPlanId': json['InstallmentPlanId'],
        'installmentNumber': json['InstallmentNumber'],
        'processorId': json['ProcessorId'],
        'originUtcOffset': json['OriginUtcOffset'],
        'createdDateUtc': (new Date(json['CreatedDateUtc'])),
        'amount': json['Amount'],
        'processDateTime': !exists(json, 'ProcessDateTime') ? undefined : (new Date(json['ProcessDateTime'])),
        'processDateTimeUtc': !exists(json, 'ProcessDateTimeUtc') ? undefined : (new Date(json['ProcessDateTimeUtc'])),
        'isRefund': json['IsRefund'],
        'cardStateId': !exists(json, 'CardStateId') ? undefined : json['CardStateId'],
        'originalAmount': json['OriginalAmount'],
        'refundAmount': json['RefundAmount'],
        'isFullCapture': json['IsFullCapture'],
        'authorizedAmount': json['AuthorizedAmount'],
        'isPreAuthorized': json['IsPreAuthorized'],
        'amountForFunding': json['AmountForFunding'],
        'cardState': !exists(json, 'CardState') ? undefined : CardStateLogsFromJSON(json['CardState']),
        'installmentPlan': !exists(json, 'InstallmentPlan') ? undefined : InstallmentPlansFromJSON(json['InstallmentPlan']),
        'processor': !exists(json, 'Processor') ? undefined : ProcessorsFromJSON(json['Processor']),
        'feesDocuments': !exists(json, 'FeesDocuments') ? undefined : ((json['FeesDocuments'] as Array<any>).map(FeesDocumentsFromJSON)),
        'fundingCollectDocumentDetails': !exists(json, 'FundingCollectDocumentDetails') ? undefined : ((json['FundingCollectDocumentDetails'] as Array<any>).map(FundingCollectDocumentDetailsFromJSON)),
        'installmentPaymentGatewayTransactionLogs': !exists(json, 'InstallmentPaymentGatewayTransactionLogs') ? undefined : ((json['InstallmentPaymentGatewayTransactionLogs'] as Array<any>).map(InstallmentPaymentGatewayTransactionLogsFromJSON)),
        'transferDocumentDetails': !exists(json, 'TransferDocumentDetails') ? undefined : ((json['TransferDocumentDetails'] as Array<any>).map(TransferDocumentDetailsFromJSON)),
        'merchantAccountType': MerchantAccountTypeFromJSON(json['MerchantAccountType']),
        'status': InstallmentStatusFromJSON(json['Status']),
    };
}

export function InstallmentsToJSON(value?: Installments | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'InstallmentPlanId': value.installmentPlanId,
        'InstallmentNumber': value.installmentNumber,
        'ProcessorId': value.processorId,
        'OriginUtcOffset': value.originUtcOffset,
        'CreatedDateUtc': (value.createdDateUtc.toISOString()),
        'Amount': value.amount,
        'ProcessDateTime': value.processDateTime === undefined ? undefined : (value.processDateTime.toISOString()),
        'ProcessDateTimeUtc': value.processDateTimeUtc === undefined ? undefined : (value.processDateTimeUtc.toISOString()),
        'IsRefund': value.isRefund,
        'CardStateId': value.cardStateId,
        'OriginalAmount': value.originalAmount,
        'RefundAmount': value.refundAmount,
        'IsFullCapture': value.isFullCapture,
        'AuthorizedAmount': value.authorizedAmount,
        'IsPreAuthorized': value.isPreAuthorized,
        'AmountForFunding': value.amountForFunding,
        'CardState': CardStateLogsToJSON(value.cardState),
        'InstallmentPlan': InstallmentPlansToJSON(value.installmentPlan),
        'Processor': ProcessorsToJSON(value.processor),
        'FeesDocuments': value.feesDocuments === undefined ? undefined : ((value.feesDocuments as Array<any>).map(FeesDocumentsToJSON)),
        'FundingCollectDocumentDetails': value.fundingCollectDocumentDetails === undefined ? undefined : ((value.fundingCollectDocumentDetails as Array<any>).map(FundingCollectDocumentDetailsToJSON)),
        'InstallmentPaymentGatewayTransactionLogs': value.installmentPaymentGatewayTransactionLogs === undefined ? undefined : ((value.installmentPaymentGatewayTransactionLogs as Array<any>).map(InstallmentPaymentGatewayTransactionLogsToJSON)),
        'TransferDocumentDetails': value.transferDocumentDetails === undefined ? undefined : ((value.transferDocumentDetails as Array<any>).map(TransferDocumentDetailsToJSON)),
        'MerchantAccountType': MerchantAccountTypeToJSON(value.merchantAccountType),
        'Status': InstallmentStatusToJSON(value.status),
    };
}


