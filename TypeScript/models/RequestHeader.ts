/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthenticationType,
    AuthenticationTypeFromJSON,
    AuthenticationTypeFromJSONTyped,
    AuthenticationTypeToJSON,
    TouchPoint,
    TouchPointFromJSON,
    TouchPointFromJSONTyped,
    TouchPointToJSON,
} from './';

/**
 * 
 * @export
 * @interface RequestHeader
 */
export interface RequestHeader {
    /**
     * 
     * @type {TouchPoint}
     * @memberof RequestHeader
     */
    touchPoint?: TouchPoint;
    /**
     * 
     * @type {string}
     * @memberof RequestHeader
     */
    sessionId?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestHeader
     */
    apiKey?: string;
    /**
     * 
     * @type {string}
     * @memberof RequestHeader
     */
    cultureName?: string;
    /**
     * 
     * @type {AuthenticationType}
     * @memberof RequestHeader
     */
    authenticationType?: AuthenticationType;
}

export function RequestHeaderFromJSON(json: any): RequestHeader {
    return RequestHeaderFromJSONTyped(json, false);
}

export function RequestHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): RequestHeader {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'touchPoint': !exists(json, 'TouchPoint') ? undefined : TouchPointFromJSON(json['TouchPoint']),
        'sessionId': !exists(json, 'SessionId') ? undefined : json['SessionId'],
        'apiKey': !exists(json, 'ApiKey') ? undefined : json['ApiKey'],
        'cultureName': !exists(json, 'CultureName') ? undefined : json['CultureName'],
        'authenticationType': !exists(json, 'AuthenticationType') ? undefined : AuthenticationTypeFromJSON(json['AuthenticationType']),
    };
}

export function RequestHeaderToJSON(value?: RequestHeader | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'TouchPoint': TouchPointToJSON(value.touchPoint),
        'SessionId': value.sessionId,
        'ApiKey': value.apiKey,
        'CultureName': value.cultureName,
        'AuthenticationType': AuthenticationTypeToJSON(value.authenticationType),
    };
}


