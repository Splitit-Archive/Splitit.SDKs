/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Countries,
    CountriesFromJSON,
    CountriesFromJSONTyped,
    CountriesToJSON,
    CountrySubdivisionsAllOf,
    CountrySubdivisionsAllOfFromJSON,
    CountrySubdivisionsAllOfFromJSONTyped,
    CountrySubdivisionsAllOfToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    StateLimitRuleDatas,
    StateLimitRuleDatasFromJSON,
    StateLimitRuleDatasFromJSONTyped,
    StateLimitRuleDatasToJSON,
    ZipAddressDetails,
    ZipAddressDetailsFromJSON,
    ZipAddressDetailsFromJSONTyped,
    ZipAddressDetailsToJSON,
} from './';

/**
 * 
 * @export
 * @interface CountrySubdivisions
 */
export interface CountrySubdivisions {
    /**
     * 
     * @type {number}
     * @memberof CountrySubdivisions
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof CountrySubdivisions
     */
    countryId: number;
    /**
     * 
     * @type {string}
     * @memberof CountrySubdivisions
     */
    isoCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CountrySubdivisions
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof CountrySubdivisions
     */
    iso2Code?: string;
    /**
     * 
     * @type {number}
     * @memberof CountrySubdivisions
     */
    utcTimeOffsetInMins: number;
    /**
     * 
     * @type {Countries}
     * @memberof CountrySubdivisions
     */
    country?: Countries;
    /**
     * 
     * @type {Array<StateLimitRuleDatas>}
     * @memberof CountrySubdivisions
     */
    stateLimitRuleDatas?: Array<StateLimitRuleDatas>;
    /**
     * 
     * @type {Array<ZipAddressDetails>}
     * @memberof CountrySubdivisions
     */
    zipAddressDetails?: Array<ZipAddressDetails>;
}

export function CountrySubdivisionsFromJSON(json: any): CountrySubdivisions {
    return CountrySubdivisionsFromJSONTyped(json, false);
}

export function CountrySubdivisionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CountrySubdivisions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'countryId': json['CountryId'],
        'isoCode': !exists(json, 'IsoCode') ? undefined : json['IsoCode'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'iso2Code': !exists(json, 'Iso2Code') ? undefined : json['Iso2Code'],
        'utcTimeOffsetInMins': json['UtcTimeOffsetInMins'],
        'country': !exists(json, 'Country') ? undefined : CountriesFromJSON(json['Country']),
        'stateLimitRuleDatas': !exists(json, 'StateLimitRuleDatas') ? undefined : ((json['StateLimitRuleDatas'] as Array<any>).map(StateLimitRuleDatasFromJSON)),
        'zipAddressDetails': !exists(json, 'ZipAddressDetails') ? undefined : ((json['ZipAddressDetails'] as Array<any>).map(ZipAddressDetailsFromJSON)),
    };
}

export function CountrySubdivisionsToJSON(value?: CountrySubdivisions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'CountryId': value.countryId,
        'IsoCode': value.isoCode,
        'Description': value.description,
        'Iso2Code': value.iso2Code,
        'UtcTimeOffsetInMins': value.utcTimeOffsetInMins,
        'Country': CountriesToJSON(value.country),
        'StateLimitRuleDatas': value.stateLimitRuleDatas === undefined ? undefined : ((value.stateLimitRuleDatas as Array<any>).map(StateLimitRuleDatasToJSON)),
        'ZipAddressDetails': value.zipAddressDetails === undefined ? undefined : ((value.zipAddressDetails as Array<any>).map(ZipAddressDetailsToJSON)),
    };
}


