/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApiUserPasswordHistories,
    ApiUserPasswordHistoriesFromJSON,
    ApiUserPasswordHistoriesFromJSONTyped,
    ApiUserPasswordHistoriesToJSON,
    ApiUsersAllOf,
    ApiUsersAllOfFromJSON,
    ApiUsersAllOfFromJSONTyped,
    ApiUsersAllOfToJSON,
    IUserPasswordHistory,
    IUserPasswordHistoryFromJSON,
    IUserPasswordHistoryFromJSONTyped,
    IUserPasswordHistoryToJSON,
    Merchants,
    MerchantsFromJSON,
    MerchantsFromJSONTyped,
    MerchantsToJSON,
    Roles,
    RolesFromJSON,
    RolesFromJSONTyped,
    RolesToJSON,
    User2,
    User2FromJSON,
    User2FromJSONTyped,
    User2ToJSON,
    UserStatus,
    UserStatusFromJSON,
    UserStatusFromJSONTyped,
    UserStatusToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApiUsers
 */
export interface ApiUsers {
    /**
     * 
     * @type {number}
     * @memberof ApiUsers
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    culture?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    userFullName?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    phoneNumber?: string;
    /**
     * 
     * @type {Roles}
     * @memberof ApiUsers
     */
    role?: Roles;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    userName?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    uniqueId?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiUsers
     */
    loginAttempt: number;
    /**
     * 
     * @type {number}
     * @memberof ApiUsers
     */
    maxInvalidLoginAttempts: number;
    /**
     * 
     * @type {UserStatus}
     * @memberof ApiUsers
     */
    status: UserStatus;
    /**
     * 
     * @type {boolean}
     * @memberof ApiUsers
     */
    isLocked: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    cultureName?: string;
    /**
     * 
     * @type {number}
     * @memberof ApiUsers
     */
    roleId: number;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    loginUserName?: string;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    crmId?: string;
    /**
     * 
     * @type {Merchants}
     * @memberof ApiUsers
     */
    merchant?: Merchants;
    /**
     * 
     * @type {Array<ApiUserPasswordHistories>}
     * @memberof ApiUsers
     */
    apiUserPasswordHistories?: Array<ApiUserPasswordHistories>;
    /**
     * 
     * @type {number}
     * @memberof ApiUsers
     */
    merchantId: number;
    /**
     * 
     * @type {string}
     * @memberof ApiUsers
     */
    merchantName?: string;
    /**
     * 
     * @type {IUserPasswordHistory}
     * @memberof ApiUsers
     */
    password?: IUserPasswordHistory;
}

export function ApiUsersFromJSON(json: any): ApiUsers {
    return ApiUsersFromJSONTyped(json, false);
}

export function ApiUsersFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApiUsers {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'culture': !exists(json, 'Culture') ? undefined : json['Culture'],
        'userFullName': !exists(json, 'UserFullName') ? undefined : json['UserFullName'],
        'phoneNumber': !exists(json, 'PhoneNumber') ? undefined : json['PhoneNumber'],
        'role': !exists(json, 'Role') ? undefined : RolesFromJSON(json['Role']),
        'userName': !exists(json, 'UserName') ? undefined : json['UserName'],
        'uniqueId': !exists(json, 'UniqueId') ? undefined : json['UniqueId'],
        'loginAttempt': json['LoginAttempt'],
        'maxInvalidLoginAttempts': json['MaxInvalidLoginAttempts'],
        'status': UserStatusFromJSON(json['Status']),
        'isLocked': json['IsLocked'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'cultureName': !exists(json, 'CultureName') ? undefined : json['CultureName'],
        'roleId': json['RoleId'],
        'loginUserName': !exists(json, 'LoginUserName') ? undefined : json['LoginUserName'],
        'crmId': !exists(json, 'CrmId') ? undefined : json['CrmId'],
        'merchant': !exists(json, 'Merchant') ? undefined : MerchantsFromJSON(json['Merchant']),
        'apiUserPasswordHistories': !exists(json, 'ApiUserPasswordHistories') ? undefined : ((json['ApiUserPasswordHistories'] as Array<any>).map(ApiUserPasswordHistoriesFromJSON)),
        'merchantId': json['MerchantId'],
        'merchantName': !exists(json, 'MerchantName') ? undefined : json['MerchantName'],
        'password': !exists(json, 'Password') ? undefined : IUserPasswordHistoryFromJSON(json['Password']),
    };
}

export function ApiUsersToJSON(value?: ApiUsers | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Culture': value.culture,
        'UserFullName': value.userFullName,
        'PhoneNumber': value.phoneNumber,
        'Role': RolesToJSON(value.role),
        'UserName': value.userName,
        'UniqueId': value.uniqueId,
        'LoginAttempt': value.loginAttempt,
        'MaxInvalidLoginAttempts': value.maxInvalidLoginAttempts,
        'Status': UserStatusToJSON(value.status),
        'IsLocked': value.isLocked,
        'Email': value.email,
        'CultureName': value.cultureName,
        'RoleId': value.roleId,
        'LoginUserName': value.loginUserName,
        'CrmId': value.crmId,
        'Merchant': MerchantsToJSON(value.merchant),
        'ApiUserPasswordHistories': value.apiUserPasswordHistories === undefined ? undefined : ((value.apiUserPasswordHistories as Array<any>).map(ApiUserPasswordHistoriesToJSON)),
        'MerchantId': value.merchantId,
        'MerchantName': value.merchantName,
        'Password': IUserPasswordHistoryToJSON(value.password),
    };
}


