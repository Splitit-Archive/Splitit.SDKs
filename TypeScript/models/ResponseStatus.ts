/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResponseError,
    ResponseErrorFromJSON,
    ResponseErrorFromJSONTyped,
    ResponseErrorToJSON,
} from './';

/**
 * 
 * @export
 * @interface ResponseStatus
 */
export interface ResponseStatus {
    /**
     * 
     * @type {string}
     * @memberof ResponseStatus
     */
    errorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStatus
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof ResponseStatus
     */
    stackTrace?: string;
    /**
     * 
     * @type {Array<ResponseError>}
     * @memberof ResponseStatus
     */
    errors?: Array<ResponseError>;
}

export function ResponseStatusFromJSON(json: any): ResponseStatus {
    return ResponseStatusFromJSONTyped(json, false);
}

export function ResponseStatusFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseStatus {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorCode': !exists(json, 'ErrorCode') ? undefined : json['ErrorCode'],
        'message': !exists(json, 'Message') ? undefined : json['Message'],
        'stackTrace': !exists(json, 'StackTrace') ? undefined : json['StackTrace'],
        'errors': !exists(json, 'Errors') ? undefined : ((json['Errors'] as Array<any>).map(ResponseErrorFromJSON)),
    };
}

export function ResponseStatusToJSON(value?: ResponseStatus | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ErrorCode': value.errorCode,
        'Message': value.message,
        'StackTrace': value.stackTrace,
        'Errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ResponseErrorToJSON)),
    };
}


