/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    ReconciliationReportItems,
    ReconciliationReportItemsFromJSON,
    ReconciliationReportItemsFromJSONTyped,
    ReconciliationReportItemsToJSON,
    ReconciliationReportsAllOf,
    ReconciliationReportsAllOfFromJSON,
    ReconciliationReportsAllOfFromJSONTyped,
    ReconciliationReportsAllOfToJSON,
    Terminals,
    TerminalsFromJSON,
    TerminalsFromJSONTyped,
    TerminalsToJSON,
} from './';

/**
 * 
 * @export
 * @interface ReconciliationReports
 */
export interface ReconciliationReports {
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReports
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof ReconciliationReports
     */
    from: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReconciliationReports
     */
    to: Date;
    /**
     * 
     * @type {number}
     * @memberof ReconciliationReports
     */
    terminalId: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReconciliationReports
     */
    isIdentical: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ReconciliationReports
     */
    isDaily: boolean;
    /**
     * 
     * @type {Terminals}
     * @memberof ReconciliationReports
     */
    terminal?: Terminals;
    /**
     * 
     * @type {Array<ReconciliationReportItems>}
     * @memberof ReconciliationReports
     */
    reconciliationReportItems?: Array<ReconciliationReportItems>;
}

export function ReconciliationReportsFromJSON(json: any): ReconciliationReports {
    return ReconciliationReportsFromJSONTyped(json, false);
}

export function ReconciliationReportsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReconciliationReports {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'from': (new Date(json['From'])),
        'to': (new Date(json['To'])),
        'terminalId': json['TerminalId'],
        'isIdentical': json['IsIdentical'],
        'isDaily': json['IsDaily'],
        'terminal': !exists(json, 'Terminal') ? undefined : TerminalsFromJSON(json['Terminal']),
        'reconciliationReportItems': !exists(json, 'ReconciliationReportItems') ? undefined : ((json['ReconciliationReportItems'] as Array<any>).map(ReconciliationReportItemsFromJSON)),
    };
}

export function ReconciliationReportsToJSON(value?: ReconciliationReports | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'From': (value.from.toISOString()),
        'To': (value.to.toISOString()),
        'TerminalId': value.terminalId,
        'IsIdentical': value.isIdentical,
        'IsDaily': value.isDaily,
        'Terminal': TerminalsToJSON(value.terminal),
        'ReconciliationReportItems': value.reconciliationReportItems === undefined ? undefined : ((value.reconciliationReportItems as Array<any>).map(ReconciliationReportItemsToJSON)),
    };
}


