/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressData,
    AddressDataFromJSON,
    AddressDataFromJSONTyped,
    AddressDataToJSON,
    Agent,
    AgentFromJSON,
    AgentFromJSONTyped,
    AgentToJSON,
    BankDetails,
    BankDetailsFromJSON,
    BankDetailsFromJSONTyped,
    BankDetailsToJSON,
    ContactPerson,
    ContactPersonFromJSON,
    ContactPersonFromJSONTyped,
    ContactPersonToJSON,
    Currency,
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    MerchantVertical,
    MerchantVerticalFromJSON,
    MerchantVerticalFromJSONTyped,
    MerchantVerticalToJSON,
    SalesAssociate,
    SalesAssociateFromJSON,
    SalesAssociateFromJSONTyped,
    SalesAssociateToJSON,
    SplititEntity,
    SplititEntityFromJSON,
    SplititEntityFromJSONTyped,
    SplititEntityToJSON,
} from './';

/**
 * 
 * @export
 * @interface Merchant
 */
export interface Merchant {
    /**
     * 
     * @type {number}
     * @memberof Merchant
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    splititMerchantId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    crmId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    businessLegalName?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    businessDBAName?: string;
    /**
     * 
     * @type {number}
     * @memberof Merchant
     */
    businessUnitId: number;
    /**
     * 
     * @type {number}
     * @memberof Merchant
     */
    onBoardingStatus: number;
    /**
     * 
     * @type {number}
     * @memberof Merchant
     */
    declaredAnnualVolumeUSD: number;
    /**
     * 
     * @type {number}
     * @memberof Merchant
     */
    declaredAOVUSD: number;
    /**
     * 
     * @type {MerchantVertical}
     * @memberof Merchant
     */
    vertical: MerchantVertical;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    websiteUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    logoImageFileContent?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    logoImageFileExt?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    logoImageUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof Merchant
     */
    createdDateTime: Date;
    /**
     * 
     * @type {Array<Currency>}
     * @memberof Merchant
     */
    transactionCurrencies?: Array<Currency>;
    /**
     * 
     * @type {Array<Currency>}
     * @memberof Merchant
     */
    accountCurrencies?: Array<Currency>;
    /**
     * 
     * @type {boolean}
     * @memberof Merchant
     */
    accountCurrencyIsTransactionCurrencies: boolean;
    /**
     * 
     * @type {AddressData}
     * @memberof Merchant
     */
    billingAddress?: AddressData;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    vatTaxId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    registeredCountryOfBusinessId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    registeredCountryOfBusinessCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    registeredStateOfBusinessId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    registeredStateOfBusinessCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    merchantCountryId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    merchantCountryCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    merchantStateId?: string;
    /**
     * 
     * @type {string}
     * @memberof Merchant
     */
    merchantStateCode?: string;
    /**
     * 
     * @type {BankDetails}
     * @memberof Merchant
     */
    bankDetails?: BankDetails;
    /**
     * 
     * @type {SalesAssociate}
     * @memberof Merchant
     */
    salesAssociate?: SalesAssociate;
    /**
     * 
     * @type {Agent}
     * @memberof Merchant
     */
    partner?: Agent;
    /**
     * 
     * @type {SplititEntity}
     * @memberof Merchant
     */
    splititCurrentEntity: SplititEntity;
    /**
     * 
     * @type {SplititEntity}
     * @memberof Merchant
     */
    splititSigningEntity: SplititEntity;
    /**
     * 
     * @type {ContactPerson}
     * @memberof Merchant
     */
    businessContact?: ContactPerson;
    /**
     * 
     * @type {ContactPerson}
     * @memberof Merchant
     */
    technicalContact?: ContactPerson;
    /**
     * 
     * @type {ContactPerson}
     * @memberof Merchant
     */
    financialContact?: ContactPerson;
}

export function MerchantFromJSON(json: any): Merchant {
    return MerchantFromJSONTyped(json, false);
}

export function MerchantFromJSONTyped(json: any, ignoreDiscriminator: boolean): Merchant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'address': !exists(json, 'Address') ? undefined : json['Address'],
        'splititMerchantId': !exists(json, 'SplititMerchantId') ? undefined : json['SplititMerchantId'],
        'crmId': !exists(json, 'CrmId') ? undefined : json['CrmId'],
        'businessLegalName': !exists(json, 'BusinessLegalName') ? undefined : json['BusinessLegalName'],
        'businessDBAName': !exists(json, 'BusinessDBAName') ? undefined : json['BusinessDBAName'],
        'businessUnitId': json['BusinessUnitId'],
        'onBoardingStatus': json['OnBoardingStatus'],
        'declaredAnnualVolumeUSD': json['DeclaredAnnualVolumeUSD'],
        'declaredAOVUSD': json['DeclaredAOVUSD'],
        'vertical': MerchantVerticalFromJSON(json['Vertical']),
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'websiteUrl': !exists(json, 'WebsiteUrl') ? undefined : json['WebsiteUrl'],
        'logoImageFileContent': !exists(json, 'LogoImageFileContent') ? undefined : json['LogoImageFileContent'],
        'logoImageFileExt': !exists(json, 'LogoImageFileExt') ? undefined : json['LogoImageFileExt'],
        'logoImageUrl': !exists(json, 'LogoImageUrl') ? undefined : json['LogoImageUrl'],
        'createdDateTime': (new Date(json['CreatedDateTime'])),
        'transactionCurrencies': !exists(json, 'TransactionCurrencies') ? undefined : ((json['TransactionCurrencies'] as Array<any>).map(CurrencyFromJSON)),
        'accountCurrencies': !exists(json, 'AccountCurrencies') ? undefined : ((json['AccountCurrencies'] as Array<any>).map(CurrencyFromJSON)),
        'accountCurrencyIsTransactionCurrencies': json['AccountCurrencyIsTransactionCurrencies'],
        'billingAddress': !exists(json, 'BillingAddress') ? undefined : AddressDataFromJSON(json['BillingAddress']),
        'vatTaxId': !exists(json, 'VatTaxId') ? undefined : json['VatTaxId'],
        'registeredCountryOfBusinessId': !exists(json, 'RegisteredCountryOfBusinessId') ? undefined : json['RegisteredCountryOfBusinessId'],
        'registeredCountryOfBusinessCode': !exists(json, 'RegisteredCountryOfBusinessCode') ? undefined : json['RegisteredCountryOfBusinessCode'],
        'registeredStateOfBusinessId': !exists(json, 'RegisteredStateOfBusinessId') ? undefined : json['RegisteredStateOfBusinessId'],
        'registeredStateOfBusinessCode': !exists(json, 'RegisteredStateOfBusinessCode') ? undefined : json['RegisteredStateOfBusinessCode'],
        'merchantCountryId': !exists(json, 'MerchantCountryId') ? undefined : json['MerchantCountryId'],
        'merchantCountryCode': !exists(json, 'MerchantCountryCode') ? undefined : json['MerchantCountryCode'],
        'merchantStateId': !exists(json, 'MerchantStateId') ? undefined : json['MerchantStateId'],
        'merchantStateCode': !exists(json, 'MerchantStateCode') ? undefined : json['MerchantStateCode'],
        'bankDetails': !exists(json, 'BankDetails') ? undefined : BankDetailsFromJSON(json['BankDetails']),
        'salesAssociate': !exists(json, 'SalesAssociate') ? undefined : SalesAssociateFromJSON(json['SalesAssociate']),
        'partner': !exists(json, 'Partner') ? undefined : AgentFromJSON(json['Partner']),
        'splititCurrentEntity': SplititEntityFromJSON(json['SplititCurrentEntity']),
        'splititSigningEntity': SplititEntityFromJSON(json['SplititSigningEntity']),
        'businessContact': !exists(json, 'BusinessContact') ? undefined : ContactPersonFromJSON(json['BusinessContact']),
        'technicalContact': !exists(json, 'TechnicalContact') ? undefined : ContactPersonFromJSON(json['TechnicalContact']),
        'financialContact': !exists(json, 'FinancialContact') ? undefined : ContactPersonFromJSON(json['FinancialContact']),
    };
}

export function MerchantToJSON(value?: Merchant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Name': value.name,
        'Address': value.address,
        'SplititMerchantId': value.splititMerchantId,
        'CrmId': value.crmId,
        'BusinessLegalName': value.businessLegalName,
        'BusinessDBAName': value.businessDBAName,
        'BusinessUnitId': value.businessUnitId,
        'OnBoardingStatus': value.onBoardingStatus,
        'DeclaredAnnualVolumeUSD': value.declaredAnnualVolumeUSD,
        'DeclaredAOVUSD': value.declaredAOVUSD,
        'Vertical': MerchantVerticalToJSON(value.vertical),
        'Email': value.email,
        'WebsiteUrl': value.websiteUrl,
        'LogoImageFileContent': value.logoImageFileContent,
        'LogoImageFileExt': value.logoImageFileExt,
        'LogoImageUrl': value.logoImageUrl,
        'CreatedDateTime': (value.createdDateTime.toISOString()),
        'TransactionCurrencies': value.transactionCurrencies === undefined ? undefined : ((value.transactionCurrencies as Array<any>).map(CurrencyToJSON)),
        'AccountCurrencies': value.accountCurrencies === undefined ? undefined : ((value.accountCurrencies as Array<any>).map(CurrencyToJSON)),
        'AccountCurrencyIsTransactionCurrencies': value.accountCurrencyIsTransactionCurrencies,
        'BillingAddress': AddressDataToJSON(value.billingAddress),
        'VatTaxId': value.vatTaxId,
        'RegisteredCountryOfBusinessId': value.registeredCountryOfBusinessId,
        'RegisteredCountryOfBusinessCode': value.registeredCountryOfBusinessCode,
        'RegisteredStateOfBusinessId': value.registeredStateOfBusinessId,
        'RegisteredStateOfBusinessCode': value.registeredStateOfBusinessCode,
        'MerchantCountryId': value.merchantCountryId,
        'MerchantCountryCode': value.merchantCountryCode,
        'MerchantStateId': value.merchantStateId,
        'MerchantStateCode': value.merchantStateCode,
        'BankDetails': BankDetailsToJSON(value.bankDetails),
        'SalesAssociate': SalesAssociateToJSON(value.salesAssociate),
        'Partner': AgentToJSON(value.partner),
        'SplititCurrentEntity': SplititEntityToJSON(value.splititCurrentEntity),
        'SplititSigningEntity': SplititEntityToJSON(value.splititSigningEntity),
        'BusinessContact': ContactPersonToJSON(value.businessContact),
        'TechnicalContact': ContactPersonToJSON(value.technicalContact),
        'FinancialContact': ContactPersonToJSON(value.financialContact),
    };
}


