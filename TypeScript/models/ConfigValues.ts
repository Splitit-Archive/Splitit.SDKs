/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ConfigKeys,
    ConfigKeysFromJSON,
    ConfigKeysFromJSONTyped,
    ConfigKeysToJSON,
    ConfigValuesAllOf,
    ConfigValuesAllOfFromJSON,
    ConfigValuesAllOfFromJSONTyped,
    ConfigValuesAllOfToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    TouchPointColorValues,
    TouchPointColorValuesFromJSON,
    TouchPointColorValuesFromJSONTyped,
    TouchPointColorValuesToJSON,
} from './';

/**
 * 
 * @export
 * @interface ConfigValues
 */
export interface ConfigValues {
    /**
     * 
     * @type {number}
     * @memberof ConfigValues
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ConfigValues
     */
    value?: string;
    /**
     * 
     * @type {number}
     * @memberof ConfigValues
     */
    configKeyId: number;
    /**
     * 
     * @type {number}
     * @memberof ConfigValues
     */
    touchPointColorValuesId?: number;
    /**
     * 
     * @type {ConfigKeys}
     * @memberof ConfigValues
     */
    configKey?: ConfigKeys;
    /**
     * 
     * @type {TouchPointColorValues}
     * @memberof ConfigValues
     */
    touchPointColorValues?: TouchPointColorValues;
}

export function ConfigValuesFromJSON(json: any): ConfigValues {
    return ConfigValuesFromJSONTyped(json, false);
}

export function ConfigValuesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConfigValues {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'value': !exists(json, 'Value') ? undefined : json['Value'],
        'configKeyId': json['ConfigKeyId'],
        'touchPointColorValuesId': !exists(json, 'TouchPointColorValuesId') ? undefined : json['TouchPointColorValuesId'],
        'configKey': !exists(json, 'ConfigKey') ? undefined : ConfigKeysFromJSON(json['ConfigKey']),
        'touchPointColorValues': !exists(json, 'TouchPointColorValues') ? undefined : TouchPointColorValuesFromJSON(json['TouchPointColorValues']),
    };
}

export function ConfigValuesToJSON(value?: ConfigValues | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'Value': value.value,
        'ConfigKeyId': value.configKeyId,
        'TouchPointColorValuesId': value.touchPointColorValuesId,
        'ConfigKey': ConfigKeysToJSON(value.configKey),
        'TouchPointColorValues': TouchPointColorValuesToJSON(value.touchPointColorValues),
    };
}


