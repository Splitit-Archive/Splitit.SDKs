/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CardData,
    CardDataFromJSON,
    CardDataFromJSONTyped,
    CardDataToJSON,
    MerchantRef,
    MerchantRefFromJSON,
    MerchantRefFromJSONTyped,
    MerchantRefToJSON,
    MoneyWithCurrencyCode,
    MoneyWithCurrencyCodeFromJSON,
    MoneyWithCurrencyCodeFromJSONTyped,
    MoneyWithCurrencyCodeToJSON,
    RedirectUrls,
    RedirectUrlsFromJSON,
    RedirectUrlsFromJSONTyped,
    RedirectUrlsToJSON,
    ResponseHeader,
    ResponseHeaderFromJSON,
    ResponseHeaderFromJSONTyped,
    ResponseHeaderToJSON,
    TermsAndConditions,
    TermsAndConditionsFromJSON,
    TermsAndConditionsFromJSONTyped,
    TermsAndConditionsToJSON,
} from './';

/**
 * 
 * @export
 * @interface GetInitiatedUpdatePaymentDataResponse
 */
export interface GetInitiatedUpdatePaymentDataResponse {
    /**
     * 
     * @type {ResponseHeader}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    responseHeader?: ResponseHeader;
    /**
     * 
     * @type {CardData}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    cardData?: CardData;
    /**
     * 
     * @type {MerchantRef}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    merchant?: MerchantRef;
    /**
     * 
     * @type {RedirectUrls}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    redirectUrls?: RedirectUrls;
    /**
     * 
     * @type {MoneyWithCurrencyCode}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    outstandingAmount?: MoneyWithCurrencyCode;
    /**
     * 
     * @type {TermsAndConditions}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    termsAndConditions?: TermsAndConditions;
    /**
     * 
     * @type {string}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    processorName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    is3DSRequired: boolean;
    /**
     * 
     * @type {Error}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    lastError?: Error;
    /**
     * 
     * @type {string}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    logo?: string;
    /**
     * 
     * @type {string}
     * @memberof GetInitiatedUpdatePaymentDataResponse
     */
    installmentPlanNumber?: string;
}

export function GetInitiatedUpdatePaymentDataResponseFromJSON(json: any): GetInitiatedUpdatePaymentDataResponse {
    return GetInitiatedUpdatePaymentDataResponseFromJSONTyped(json, false);
}

export function GetInitiatedUpdatePaymentDataResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetInitiatedUpdatePaymentDataResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'responseHeader': !exists(json, 'ResponseHeader') ? undefined : ResponseHeaderFromJSON(json['ResponseHeader']),
        'cardData': !exists(json, 'CardData') ? undefined : CardDataFromJSON(json['CardData']),
        'merchant': !exists(json, 'Merchant') ? undefined : MerchantRefFromJSON(json['Merchant']),
        'redirectUrls': !exists(json, 'RedirectUrls') ? undefined : RedirectUrlsFromJSON(json['RedirectUrls']),
        'outstandingAmount': !exists(json, 'OutstandingAmount') ? undefined : MoneyWithCurrencyCodeFromJSON(json['OutstandingAmount']),
        'termsAndConditions': !exists(json, 'TermsAndConditions') ? undefined : TermsAndConditionsFromJSON(json['TermsAndConditions']),
        'processorName': !exists(json, 'ProcessorName') ? undefined : json['ProcessorName'],
        'is3DSRequired': json['Is3DSRequired'],
        'lastError': !exists(json, 'LastError') ? undefined : json['LastError'],
        'logo': !exists(json, 'Logo') ? undefined : json['Logo'],
        'installmentPlanNumber': !exists(json, 'InstallmentPlanNumber') ? undefined : json['InstallmentPlanNumber'],
    };
}

export function GetInitiatedUpdatePaymentDataResponseToJSON(value?: GetInitiatedUpdatePaymentDataResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ResponseHeader': ResponseHeaderToJSON(value.responseHeader),
        'CardData': CardDataToJSON(value.cardData),
        'Merchant': MerchantRefToJSON(value.merchant),
        'RedirectUrls': RedirectUrlsToJSON(value.redirectUrls),
        'OutstandingAmount': MoneyWithCurrencyCodeToJSON(value.outstandingAmount),
        'TermsAndConditions': TermsAndConditionsToJSON(value.termsAndConditions),
        'ProcessorName': value.processorName,
        'Is3DSRequired': value.is3DSRequired,
        'LastError': value.lastError,
        'Logo': value.logo,
        'InstallmentPlanNumber': value.installmentPlanNumber,
    };
}


