/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressData2,
    AddressData2FromJSON,
    AddressData2FromJSONTyped,
    AddressData2ToJSON,
    CardStateLogsAllOf,
    CardStateLogsAllOfFromJSON,
    CardStateLogsAllOfFromJSONTyped,
    CardStateLogsAllOfToJSON,
    Cards,
    CardsFromJSON,
    CardsFromJSONTyped,
    CardsToJSON,
    Countries,
    CountriesFromJSON,
    CountriesFromJSONTyped,
    CountriesToJSON,
    CountrySubdivisions,
    CountrySubdivisionsFromJSON,
    CountrySubdivisionsFromJSONTyped,
    CountrySubdivisionsToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    Installments,
    InstallmentsFromJSON,
    InstallmentsFromJSONTyped,
    InstallmentsToJSON,
    ReAuthorizations,
    ReAuthorizationsFromJSON,
    ReAuthorizationsFromJSONTyped,
    ReAuthorizationsToJSON,
} from './';

/**
 * 
 * @export
 * @interface CardStateLogs
 */
export interface CardStateLogs {
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    cardId: number;
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    expirationMonth: number;
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    expirationYear: number;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    cardHolderName?: string;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    addressDataAddressLine?: string;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    addressDataZip?: string;
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    version: number;
    /**
     * 
     * @type {boolean}
     * @memberof CardStateLogs
     */
    isVerified: boolean;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    changeSource?: string;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    addressDataAddressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    addressDataCity?: string;
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    addressDataCountryId?: number;
    /**
     * 
     * @type {number}
     * @memberof CardStateLogs
     */
    addressDataStateId?: number;
    /**
     * 
     * @type {string}
     * @memberof CardStateLogs
     */
    addressDataLegacyFullAddressLine?: string;
    /**
     * 
     * @type {Cards}
     * @memberof CardStateLogs
     */
    card?: Cards;
    /**
     * 
     * @type {Countries}
     * @memberof CardStateLogs
     */
    country?: Countries;
    /**
     * 
     * @type {CountrySubdivisions}
     * @memberof CardStateLogs
     */
    state?: CountrySubdivisions;
    /**
     * 
     * @type {Array<Installments>}
     * @memberof CardStateLogs
     */
    installments?: Array<Installments>;
    /**
     * 
     * @type {Array<ReAuthorizations>}
     * @memberof CardStateLogs
     */
    reAuthorizations?: Array<ReAuthorizations>;
    /**
     * 
     * @type {AddressData2}
     * @memberof CardStateLogs
     */
    addressData?: AddressData2;
}

export function CardStateLogsFromJSON(json: any): CardStateLogs {
    return CardStateLogsFromJSONTyped(json, false);
}

export function CardStateLogsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CardStateLogs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'cardId': json['CardId'],
        'expirationMonth': json['ExpirationMonth'],
        'expirationYear': json['ExpirationYear'],
        'cardHolderName': !exists(json, 'CardHolderName') ? undefined : json['CardHolderName'],
        'addressDataAddressLine': !exists(json, 'AddressDataAddressLine') ? undefined : json['AddressDataAddressLine'],
        'addressDataZip': !exists(json, 'AddressDataZip') ? undefined : json['AddressDataZip'],
        'version': json['Version'],
        'isVerified': json['IsVerified'],
        'changeSource': !exists(json, 'ChangeSource') ? undefined : json['ChangeSource'],
        'addressDataAddressLine2': !exists(json, 'AddressDataAddressLine2') ? undefined : json['AddressDataAddressLine2'],
        'addressDataCity': !exists(json, 'AddressDataCity') ? undefined : json['AddressDataCity'],
        'addressDataCountryId': !exists(json, 'AddressDataCountryId') ? undefined : json['AddressDataCountryId'],
        'addressDataStateId': !exists(json, 'AddressDataStateId') ? undefined : json['AddressDataStateId'],
        'addressDataLegacyFullAddressLine': !exists(json, 'AddressDataLegacyFullAddressLine') ? undefined : json['AddressDataLegacyFullAddressLine'],
        'card': !exists(json, 'Card') ? undefined : CardsFromJSON(json['Card']),
        'country': !exists(json, 'Country') ? undefined : CountriesFromJSON(json['Country']),
        'state': !exists(json, 'State') ? undefined : CountrySubdivisionsFromJSON(json['State']),
        'installments': !exists(json, 'Installments') ? undefined : ((json['Installments'] as Array<any>).map(InstallmentsFromJSON)),
        'reAuthorizations': !exists(json, 'ReAuthorizations') ? undefined : ((json['ReAuthorizations'] as Array<any>).map(ReAuthorizationsFromJSON)),
        'addressData': !exists(json, 'AddressData') ? undefined : AddressData2FromJSON(json['AddressData']),
    };
}

export function CardStateLogsToJSON(value?: CardStateLogs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'CardId': value.cardId,
        'ExpirationMonth': value.expirationMonth,
        'ExpirationYear': value.expirationYear,
        'CardHolderName': value.cardHolderName,
        'AddressDataAddressLine': value.addressDataAddressLine,
        'AddressDataZip': value.addressDataZip,
        'Version': value.version,
        'IsVerified': value.isVerified,
        'ChangeSource': value.changeSource,
        'AddressDataAddressLine2': value.addressDataAddressLine2,
        'AddressDataCity': value.addressDataCity,
        'AddressDataCountryId': value.addressDataCountryId,
        'AddressDataStateId': value.addressDataStateId,
        'AddressDataLegacyFullAddressLine': value.addressDataLegacyFullAddressLine,
        'Card': CardsToJSON(value.card),
        'Country': CountriesToJSON(value.country),
        'State': CountrySubdivisionsToJSON(value.state),
        'Installments': value.installments === undefined ? undefined : ((value.installments as Array<any>).map(InstallmentsToJSON)),
        'ReAuthorizations': value.reAuthorizations === undefined ? undefined : ((value.reAuthorizations as Array<any>).map(ReAuthorizationsToJSON)),
        'AddressData': AddressData2ToJSON(value.addressData),
    };
}


