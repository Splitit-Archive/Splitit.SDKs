/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressData,
    AddressDataFromJSON,
    AddressDataFromJSONTyped,
    AddressDataToJSON,
    CardData,
    CardDataFromJSON,
    CardDataFromJSONTyped,
    CardDataToJSON,
    CartData,
    CartDataFromJSON,
    CartDataFromJSONTyped,
    CartDataToJSON,
    ConsumerData,
    ConsumerDataFromJSON,
    ConsumerDataFromJSONTyped,
    ConsumerDataToJSON,
    CreateInstallmentPlanRequest,
    CreateInstallmentPlanRequestFromJSON,
    CreateInstallmentPlanRequestFromJSONTyped,
    CreateInstallmentPlanRequestToJSON,
    EventsEndpoints,
    EventsEndpointsFromJSON,
    EventsEndpointsFromJSONTyped,
    EventsEndpointsToJSON,
    ExternalAuth,
    ExternalAuthFromJSON,
    ExternalAuthFromJSONTyped,
    ExternalAuthToJSON,
    PaymentToken,
    PaymentTokenFromJSON,
    PaymentTokenFromJSONTyped,
    PaymentTokenToJSON,
    PlanApprovalEvidence,
    PlanApprovalEvidenceFromJSON,
    PlanApprovalEvidenceFromJSONTyped,
    PlanApprovalEvidenceToJSON,
    PlanData,
    PlanDataFromJSON,
    PlanDataFromJSONTyped,
    PlanDataToJSON,
    RedirectUrls,
    RedirectUrlsFromJSON,
    RedirectUrlsFromJSONTyped,
    RedirectUrlsToJSON,
    RequestHeader,
    RequestHeaderFromJSON,
    RequestHeaderFromJSONTyped,
    RequestHeaderToJSON,
    UpdateInstallmentPlanRequestAllOf,
    UpdateInstallmentPlanRequestAllOfFromJSON,
    UpdateInstallmentPlanRequestAllOfFromJSONTyped,
    UpdateInstallmentPlanRequestAllOfToJSON,
} from './';

/**
 * 
 * @export
 * @interface UpdateInstallmentPlanRequest
 */
export interface UpdateInstallmentPlanRequest {
    /**
     * 
     * @type {RequestHeader}
     * @memberof UpdateInstallmentPlanRequest
     */
    requestHeader?: RequestHeader;
    /**
     * 
     * @type {string}
     * @memberof UpdateInstallmentPlanRequest
     */
    installmentPlanNumber?: string;
    /**
     * 
     * @type {PlanData}
     * @memberof UpdateInstallmentPlanRequest
     */
    planData?: PlanData;
    /**
     * 
     * @type {CartData}
     * @memberof UpdateInstallmentPlanRequest
     */
    cartData?: CartData;
    /**
     * 
     * @type {ConsumerData}
     * @memberof UpdateInstallmentPlanRequest
     */
    consumerData?: ConsumerData;
    /**
     * 
     * @type {AddressData}
     * @memberof UpdateInstallmentPlanRequest
     */
    billingAddress?: AddressData;
    /**
     * 
     * @type {CardData}
     * @memberof UpdateInstallmentPlanRequest
     */
    creditCardDetails?: CardData;
    /**
     * 
     * @type {PaymentToken}
     * @memberof UpdateInstallmentPlanRequest
     */
    paymentToken?: PaymentToken;
    /**
     * 
     * @type {PlanApprovalEvidence}
     * @memberof UpdateInstallmentPlanRequest
     */
    planApprovalEvidence?: PlanApprovalEvidence;
    /**
     * 
     * @type {RedirectUrls}
     * @memberof UpdateInstallmentPlanRequest
     */
    redirectUrls?: RedirectUrls;
    /**
     * 
     * @type {EventsEndpoints}
     * @memberof UpdateInstallmentPlanRequest
     */
    eventsEndpoints?: EventsEndpoints;
    /**
     * 
     * @type {ExternalAuth}
     * @memberof UpdateInstallmentPlanRequest
     */
    externalAuth?: ExternalAuth;
}

export function UpdateInstallmentPlanRequestFromJSON(json: any): UpdateInstallmentPlanRequest {
    return UpdateInstallmentPlanRequestFromJSONTyped(json, false);
}

export function UpdateInstallmentPlanRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateInstallmentPlanRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'requestHeader': !exists(json, 'RequestHeader') ? undefined : RequestHeaderFromJSON(json['RequestHeader']),
        'installmentPlanNumber': !exists(json, 'InstallmentPlanNumber') ? undefined : json['InstallmentPlanNumber'],
        'planData': !exists(json, 'PlanData') ? undefined : PlanDataFromJSON(json['PlanData']),
        'cartData': !exists(json, 'CartData') ? undefined : CartDataFromJSON(json['CartData']),
        'consumerData': !exists(json, 'ConsumerData') ? undefined : ConsumerDataFromJSON(json['ConsumerData']),
        'billingAddress': !exists(json, 'BillingAddress') ? undefined : AddressDataFromJSON(json['BillingAddress']),
        'creditCardDetails': !exists(json, 'CreditCardDetails') ? undefined : CardDataFromJSON(json['CreditCardDetails']),
        'paymentToken': !exists(json, 'PaymentToken') ? undefined : PaymentTokenFromJSON(json['PaymentToken']),
        'planApprovalEvidence': !exists(json, 'PlanApprovalEvidence') ? undefined : PlanApprovalEvidenceFromJSON(json['PlanApprovalEvidence']),
        'redirectUrls': !exists(json, 'RedirectUrls') ? undefined : RedirectUrlsFromJSON(json['RedirectUrls']),
        'eventsEndpoints': !exists(json, 'EventsEndpoints') ? undefined : EventsEndpointsFromJSON(json['EventsEndpoints']),
        'externalAuth': !exists(json, 'ExternalAuth') ? undefined : ExternalAuthFromJSON(json['ExternalAuth']),
    };
}

export function UpdateInstallmentPlanRequestToJSON(value?: UpdateInstallmentPlanRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'RequestHeader': RequestHeaderToJSON(value.requestHeader),
        'InstallmentPlanNumber': value.installmentPlanNumber,
        'PlanData': PlanDataToJSON(value.planData),
        'CartData': CartDataToJSON(value.cartData),
        'ConsumerData': ConsumerDataToJSON(value.consumerData),
        'BillingAddress': AddressDataToJSON(value.billingAddress),
        'CreditCardDetails': CardDataToJSON(value.creditCardDetails),
        'PaymentToken': PaymentTokenToJSON(value.paymentToken),
        'PlanApprovalEvidence': PlanApprovalEvidenceToJSON(value.planApprovalEvidence),
        'RedirectUrls': RedirectUrlsToJSON(value.redirectUrls),
        'EventsEndpoints': EventsEndpointsToJSON(value.eventsEndpoints),
        'ExternalAuth': ExternalAuthToJSON(value.externalAuth),
    };
}


