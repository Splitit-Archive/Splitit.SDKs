/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressData2,
    AddressData2FromJSON,
    AddressData2FromJSONTyped,
    AddressData2ToJSON,
    Agents,
    AgentsFromJSON,
    AgentsFromJSONTyped,
    AgentsToJSON,
    ApiUsers,
    ApiUsersFromJSON,
    ApiUsersFromJSONTyped,
    ApiUsersToJSON,
    BankDetails,
    BankDetailsFromJSON,
    BankDetailsFromJSONTyped,
    BankDetailsToJSON,
    BusinessUnits,
    BusinessUnitsFromJSON,
    BusinessUnitsFromJSONTyped,
    BusinessUnitsToJSON,
    Countries,
    CountriesFromJSON,
    CountriesFromJSONTyped,
    CountriesToJSON,
    CountryState,
    CountryStateFromJSON,
    CountryStateFromJSONTyped,
    CountryStateToJSON,
    CountrySubdivisions,
    CountrySubdivisionsFromJSON,
    CountrySubdivisionsFromJSONTyped,
    CountrySubdivisionsToJSON,
    InstallmentPlanEventsSubscriptionDatas,
    InstallmentPlanEventsSubscriptionDatasFromJSON,
    InstallmentPlanEventsSubscriptionDatasFromJSONTyped,
    InstallmentPlanEventsSubscriptionDatasToJSON,
    MerchantStatus,
    MerchantStatusFromJSON,
    MerchantStatusFromJSONTyped,
    MerchantStatusToJSON,
    MerchantVertical,
    MerchantVerticalFromJSON,
    MerchantVerticalFromJSONTyped,
    MerchantVerticalToJSON,
    OnBoardingMethod,
    OnBoardingMethodFromJSON,
    OnBoardingMethodFromJSONTyped,
    OnBoardingMethodToJSON,
    ParameterGroups,
    ParameterGroupsFromJSON,
    ParameterGroupsFromJSONTyped,
    ParameterGroupsToJSON,
    SalesAssociates,
    SalesAssociatesFromJSON,
    SalesAssociatesFromJSONTyped,
    SalesAssociatesToJSON,
    SplititEntity,
    SplititEntityFromJSON,
    SplititEntityFromJSONTyped,
    SplititEntityToJSON,
    Terminals,
    TerminalsFromJSON,
    TerminalsFromJSONTyped,
    TerminalsToJSON,
    TouchPointColorValues,
    TouchPointColorValuesFromJSON,
    TouchPointColorValuesFromJSONTyped,
    TouchPointColorValuesToJSON,
} from './';

/**
 * 
 * @export
 * @interface MerchantsAllOf
 */
export interface MerchantsAllOf {
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    email?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    merchantAdminWebsite: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    webApi: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    embeddedClients: boolean;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    crmId?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFParentAccountExternalId?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFLeadId?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFParentAccountName?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    merchantVertical?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    sFAccountId?: string;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    declaredAnnualVolumeUSD?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    declaredAOVUSD?: number;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    logoImage?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    logoFileExtension?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    supportEmail?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    supportPhone?: string;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    parameterGroupId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    businessUnitId: number;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    logoUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    merchantLegalName?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    splititMerchantId?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    websiteUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressAddressLine?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressAddressLine2?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressCity?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    orgGroup?: string;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    billingAddressCountryId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    billingAddressStateId?: number;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressZip?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    billingAddressLegacyFullAddressLine?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    vatTaxId?: string;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    salesAccossiateId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    registeredCountryOfBusinessCountryId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    registeredCountryOfBusinessStateId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    merchantCountryCountryId?: number;
    /**
     * 
     * @type {number}
     * @memberof MerchantsAllOf
     */
    merchantCountryStateId?: number;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    bankDetailsBankAccountName?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    bankDetailsBankRoutingNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    bankDetailsBankAccountNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof MerchantsAllOf
     */
    reportsFolderName?: string;
    /**
     * 
     * @type {OnBoardingMethod}
     * @memberof MerchantsAllOf
     */
    onBoardingMethod: OnBoardingMethod;
    /**
     * 
     * @type {BusinessUnits}
     * @memberof MerchantsAllOf
     */
    businessUnit?: BusinessUnits;
    /**
     * 
     * @type {ParameterGroups}
     * @memberof MerchantsAllOf
     */
    parameterGroup?: ParameterGroups;
    /**
     * 
     * @type {SalesAssociates}
     * @memberof MerchantsAllOf
     */
    salesAccossiate?: SalesAssociates;
    /**
     * 
     * @type {ApiUsers}
     * @memberof MerchantsAllOf
     */
    apiUsers?: ApiUsers;
    /**
     * 
     * @type {Array<Agents>}
     * @memberof MerchantsAllOf
     */
    agents?: Array<Agents>;
    /**
     * 
     * @type {Array<InstallmentPlanEventsSubscriptionDatas>}
     * @memberof MerchantsAllOf
     */
    installmentPlanEventsSubscriptionDatas?: Array<InstallmentPlanEventsSubscriptionDatas>;
    /**
     * 
     * @type {Array<Terminals>}
     * @memberof MerchantsAllOf
     */
    terminals?: Array<Terminals>;
    /**
     * 
     * @type {Array<TouchPointColorValues>}
     * @memberof MerchantsAllOf
     */
    touchPointColorValues?: Array<TouchPointColorValues>;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    isTest: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MerchantsAllOf
     */
    markedForDeletion: boolean;
    /**
     * 
     * @type {CountryState}
     * @memberof MerchantsAllOf
     */
    registeredCountryOfBusiness?: CountryState;
    /**
     * 
     * @type {CountryState}
     * @memberof MerchantsAllOf
     */
    merchantCountry?: CountryState;
    /**
     * 
     * @type {MerchantStatus}
     * @memberof MerchantsAllOf
     */
    status: MerchantStatus;
    /**
     * 
     * @type {MerchantVertical}
     * @memberof MerchantsAllOf
     */
    vertical: MerchantVertical;
    /**
     * 
     * @type {BankDetails}
     * @memberof MerchantsAllOf
     */
    bankDetails?: BankDetails;
    /**
     * 
     * @type {AddressData2}
     * @memberof MerchantsAllOf
     */
    billingAddress?: AddressData2;
    /**
     * 
     * @type {Countries}
     * @memberof MerchantsAllOf
     */
    country?: Countries;
    /**
     * 
     * @type {CountrySubdivisions}
     * @memberof MerchantsAllOf
     */
    state?: CountrySubdivisions;
    /**
     * 
     * @type {SplititEntity}
     * @memberof MerchantsAllOf
     */
    splititSigningEntity: SplititEntity;
    /**
     * 
     * @type {SplititEntity}
     * @memberof MerchantsAllOf
     */
    splititCurrentEntity: SplititEntity;
}

export function MerchantsAllOfFromJSON(json: any): MerchantsAllOf {
    return MerchantsAllOfFromJSONTyped(json, false);
}

export function MerchantsAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): MerchantsAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'address': !exists(json, 'Address') ? undefined : json['Address'],
        'email': !exists(json, 'Email') ? undefined : json['Email'],
        'merchantAdminWebsite': json['MerchantAdminWebsite'],
        'webApi': json['WebApi'],
        'embeddedClients': json['EmbeddedClients'],
        'crmId': !exists(json, 'CrmId') ? undefined : json['CrmId'],
        'sFParentAccountExternalId': !exists(json, 'SFParentAccountExternalId') ? undefined : json['SFParentAccountExternalId'],
        'sFLeadId': !exists(json, 'SFLeadId') ? undefined : json['SFLeadId'],
        'sFParentAccountName': !exists(json, 'SFParentAccountName') ? undefined : json['SFParentAccountName'],
        'merchantVertical': !exists(json, 'MerchantVertical') ? undefined : json['MerchantVertical'],
        'sFAccountId': !exists(json, 'SFAccountId') ? undefined : json['SFAccountId'],
        'declaredAnnualVolumeUSD': !exists(json, 'DeclaredAnnualVolumeUSD') ? undefined : json['DeclaredAnnualVolumeUSD'],
        'declaredAOVUSD': !exists(json, 'DeclaredAOVUSD') ? undefined : json['DeclaredAOVUSD'],
        'logoImage': !exists(json, 'LogoImage') ? undefined : json['LogoImage'],
        'logoFileExtension': !exists(json, 'LogoFileExtension') ? undefined : json['LogoFileExtension'],
        'code': !exists(json, 'Code') ? undefined : json['Code'],
        'supportEmail': !exists(json, 'SupportEmail') ? undefined : json['SupportEmail'],
        'supportPhone': !exists(json, 'SupportPhone') ? undefined : json['SupportPhone'],
        'parameterGroupId': !exists(json, 'ParameterGroupId') ? undefined : json['ParameterGroupId'],
        'businessUnitId': json['BusinessUnitId'],
        'logoUrl': !exists(json, 'LogoUrl') ? undefined : json['LogoUrl'],
        'merchantLegalName': !exists(json, 'MerchantLegalName') ? undefined : json['MerchantLegalName'],
        'splititMerchantId': !exists(json, 'SplititMerchantId') ? undefined : json['SplititMerchantId'],
        'websiteUrl': !exists(json, 'WebsiteUrl') ? undefined : json['WebsiteUrl'],
        'billingAddressAddressLine': !exists(json, 'BillingAddressAddressLine') ? undefined : json['BillingAddressAddressLine'],
        'billingAddressAddressLine2': !exists(json, 'BillingAddressAddressLine2') ? undefined : json['BillingAddressAddressLine2'],
        'billingAddressCity': !exists(json, 'BillingAddressCity') ? undefined : json['BillingAddressCity'],
        'orgGroup': !exists(json, 'OrgGroup') ? undefined : json['OrgGroup'],
        'billingAddressCountryId': !exists(json, 'BillingAddressCountryId') ? undefined : json['BillingAddressCountryId'],
        'billingAddressStateId': !exists(json, 'BillingAddressStateId') ? undefined : json['BillingAddressStateId'],
        'billingAddressZip': !exists(json, 'BillingAddressZip') ? undefined : json['BillingAddressZip'],
        'billingAddressLegacyFullAddressLine': !exists(json, 'BillingAddressLegacyFullAddressLine') ? undefined : json['BillingAddressLegacyFullAddressLine'],
        'vatTaxId': !exists(json, 'VatTaxId') ? undefined : json['VatTaxId'],
        'salesAccossiateId': !exists(json, 'SalesAccossiateId') ? undefined : json['SalesAccossiateId'],
        'registeredCountryOfBusinessCountryId': !exists(json, 'RegisteredCountryOfBusinessCountryId') ? undefined : json['RegisteredCountryOfBusinessCountryId'],
        'registeredCountryOfBusinessStateId': !exists(json, 'RegisteredCountryOfBusinessStateId') ? undefined : json['RegisteredCountryOfBusinessStateId'],
        'merchantCountryCountryId': !exists(json, 'MerchantCountryCountryId') ? undefined : json['MerchantCountryCountryId'],
        'merchantCountryStateId': !exists(json, 'MerchantCountryStateId') ? undefined : json['MerchantCountryStateId'],
        'bankDetailsBankAccountName': !exists(json, 'BankDetailsBankAccountName') ? undefined : json['BankDetailsBankAccountName'],
        'bankDetailsBankRoutingNumber': !exists(json, 'BankDetailsBankRoutingNumber') ? undefined : json['BankDetailsBankRoutingNumber'],
        'bankDetailsBankAccountNumber': !exists(json, 'BankDetailsBankAccountNumber') ? undefined : json['BankDetailsBankAccountNumber'],
        'reportsFolderName': !exists(json, 'ReportsFolderName') ? undefined : json['ReportsFolderName'],
        'onBoardingMethod': OnBoardingMethodFromJSON(json['OnBoardingMethod']),
        'businessUnit': !exists(json, 'BusinessUnit') ? undefined : BusinessUnitsFromJSON(json['BusinessUnit']),
        'parameterGroup': !exists(json, 'ParameterGroup') ? undefined : ParameterGroupsFromJSON(json['ParameterGroup']),
        'salesAccossiate': !exists(json, 'SalesAccossiate') ? undefined : SalesAssociatesFromJSON(json['SalesAccossiate']),
        'apiUsers': !exists(json, 'ApiUsers') ? undefined : ApiUsersFromJSON(json['ApiUsers']),
        'agents': !exists(json, 'Agents') ? undefined : ((json['Agents'] as Array<any>).map(AgentsFromJSON)),
        'installmentPlanEventsSubscriptionDatas': !exists(json, 'InstallmentPlanEventsSubscriptionDatas') ? undefined : ((json['InstallmentPlanEventsSubscriptionDatas'] as Array<any>).map(InstallmentPlanEventsSubscriptionDatasFromJSON)),
        'terminals': !exists(json, 'Terminals') ? undefined : ((json['Terminals'] as Array<any>).map(TerminalsFromJSON)),
        'touchPointColorValues': !exists(json, 'TouchPointColorValues') ? undefined : ((json['TouchPointColorValues'] as Array<any>).map(TouchPointColorValuesFromJSON)),
        'isTest': json['IsTest'],
        'markedForDeletion': json['MarkedForDeletion'],
        'registeredCountryOfBusiness': !exists(json, 'RegisteredCountryOfBusiness') ? undefined : CountryStateFromJSON(json['RegisteredCountryOfBusiness']),
        'merchantCountry': !exists(json, 'MerchantCountry') ? undefined : CountryStateFromJSON(json['MerchantCountry']),
        'status': MerchantStatusFromJSON(json['Status']),
        'vertical': MerchantVerticalFromJSON(json['Vertical']),
        'bankDetails': !exists(json, 'BankDetails') ? undefined : BankDetailsFromJSON(json['BankDetails']),
        'billingAddress': !exists(json, 'BillingAddress') ? undefined : AddressData2FromJSON(json['BillingAddress']),
        'country': !exists(json, 'Country') ? undefined : CountriesFromJSON(json['Country']),
        'state': !exists(json, 'State') ? undefined : CountrySubdivisionsFromJSON(json['State']),
        'splititSigningEntity': SplititEntityFromJSON(json['SplititSigningEntity']),
        'splititCurrentEntity': SplititEntityFromJSON(json['SplititCurrentEntity']),
    };
}

export function MerchantsAllOfToJSON(value?: MerchantsAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Address': value.address,
        'Email': value.email,
        'MerchantAdminWebsite': value.merchantAdminWebsite,
        'WebApi': value.webApi,
        'EmbeddedClients': value.embeddedClients,
        'CrmId': value.crmId,
        'SFParentAccountExternalId': value.sFParentAccountExternalId,
        'SFLeadId': value.sFLeadId,
        'SFParentAccountName': value.sFParentAccountName,
        'MerchantVertical': value.merchantVertical,
        'SFAccountId': value.sFAccountId,
        'DeclaredAnnualVolumeUSD': value.declaredAnnualVolumeUSD,
        'DeclaredAOVUSD': value.declaredAOVUSD,
        'LogoImage': value.logoImage,
        'LogoFileExtension': value.logoFileExtension,
        'Code': value.code,
        'SupportEmail': value.supportEmail,
        'SupportPhone': value.supportPhone,
        'ParameterGroupId': value.parameterGroupId,
        'BusinessUnitId': value.businessUnitId,
        'LogoUrl': value.logoUrl,
        'MerchantLegalName': value.merchantLegalName,
        'SplititMerchantId': value.splititMerchantId,
        'WebsiteUrl': value.websiteUrl,
        'BillingAddressAddressLine': value.billingAddressAddressLine,
        'BillingAddressAddressLine2': value.billingAddressAddressLine2,
        'BillingAddressCity': value.billingAddressCity,
        'OrgGroup': value.orgGroup,
        'BillingAddressCountryId': value.billingAddressCountryId,
        'BillingAddressStateId': value.billingAddressStateId,
        'BillingAddressZip': value.billingAddressZip,
        'BillingAddressLegacyFullAddressLine': value.billingAddressLegacyFullAddressLine,
        'VatTaxId': value.vatTaxId,
        'SalesAccossiateId': value.salesAccossiateId,
        'RegisteredCountryOfBusinessCountryId': value.registeredCountryOfBusinessCountryId,
        'RegisteredCountryOfBusinessStateId': value.registeredCountryOfBusinessStateId,
        'MerchantCountryCountryId': value.merchantCountryCountryId,
        'MerchantCountryStateId': value.merchantCountryStateId,
        'BankDetailsBankAccountName': value.bankDetailsBankAccountName,
        'BankDetailsBankRoutingNumber': value.bankDetailsBankRoutingNumber,
        'BankDetailsBankAccountNumber': value.bankDetailsBankAccountNumber,
        'ReportsFolderName': value.reportsFolderName,
        'OnBoardingMethod': OnBoardingMethodToJSON(value.onBoardingMethod),
        'BusinessUnit': BusinessUnitsToJSON(value.businessUnit),
        'ParameterGroup': ParameterGroupsToJSON(value.parameterGroup),
        'SalesAccossiate': SalesAssociatesToJSON(value.salesAccossiate),
        'ApiUsers': ApiUsersToJSON(value.apiUsers),
        'Agents': value.agents === undefined ? undefined : ((value.agents as Array<any>).map(AgentsToJSON)),
        'InstallmentPlanEventsSubscriptionDatas': value.installmentPlanEventsSubscriptionDatas === undefined ? undefined : ((value.installmentPlanEventsSubscriptionDatas as Array<any>).map(InstallmentPlanEventsSubscriptionDatasToJSON)),
        'Terminals': value.terminals === undefined ? undefined : ((value.terminals as Array<any>).map(TerminalsToJSON)),
        'TouchPointColorValues': value.touchPointColorValues === undefined ? undefined : ((value.touchPointColorValues as Array<any>).map(TouchPointColorValuesToJSON)),
        'IsTest': value.isTest,
        'MarkedForDeletion': value.markedForDeletion,
        'RegisteredCountryOfBusiness': CountryStateToJSON(value.registeredCountryOfBusiness),
        'MerchantCountry': CountryStateToJSON(value.merchantCountry),
        'Status': MerchantStatusToJSON(value.status),
        'Vertical': MerchantVerticalToJSON(value.vertical),
        'BankDetails': BankDetailsToJSON(value.bankDetails),
        'BillingAddress': AddressData2ToJSON(value.billingAddress),
        'Country': CountriesToJSON(value.country),
        'State': CountrySubdivisionsToJSON(value.state),
        'SplititSigningEntity': SplititEntityToJSON(value.splititSigningEntity),
        'SplititCurrentEntity': SplititEntityToJSON(value.splititCurrentEntity),
    };
}


