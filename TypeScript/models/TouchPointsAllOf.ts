/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BusinessParty,
    BusinessPartyFromJSON,
    BusinessPartyFromJSONTyped,
    BusinessPartyToJSON,
    ConfigKeys,
    ConfigKeysFromJSON,
    ConfigKeysFromJSONTyped,
    ConfigKeysToJSON,
    VersionedTouchPoints,
    VersionedTouchPointsFromJSON,
    VersionedTouchPointsFromJSONTyped,
    VersionedTouchPointsToJSON,
} from './';

/**
 * 
 * @export
 * @interface TouchPointsAllOf
 */
export interface TouchPointsAllOf {
    /**
     * 
     * @type {string}
     * @memberof TouchPointsAllOf
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TouchPointsAllOf
     */
    code?: string;
    /**
     * 
     * @type {number}
     * @memberof TouchPointsAllOf
     */
    defaultColorValuesId: number;
    /**
     * 
     * @type {boolean}
     * @memberof TouchPointsAllOf
     */
    logoSupported: boolean;
    /**
     * 
     * @type {string}
     * @memberof TouchPointsAllOf
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof TouchPointsAllOf
     */
    url?: string;
    /**
     * 
     * @type {BusinessParty}
     * @memberof TouchPointsAllOf
     */
    businessParty?: BusinessParty;
    /**
     * 
     * @type {Array<ConfigKeys>}
     * @memberof TouchPointsAllOf
     */
    configKeys?: Array<ConfigKeys>;
    /**
     * 
     * @type {Array<VersionedTouchPoints>}
     * @memberof TouchPointsAllOf
     */
    versionedTouchPoints?: Array<VersionedTouchPoints>;
}

export function TouchPointsAllOfFromJSON(json: any): TouchPointsAllOf {
    return TouchPointsAllOfFromJSONTyped(json, false);
}

export function TouchPointsAllOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): TouchPointsAllOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'code': !exists(json, 'Code') ? undefined : json['Code'],
        'defaultColorValuesId': json['DefaultColorValuesId'],
        'logoSupported': json['LogoSupported'],
        'owner': !exists(json, 'Owner') ? undefined : json['Owner'],
        'url': !exists(json, 'Url') ? undefined : json['Url'],
        'businessParty': !exists(json, 'BusinessParty') ? undefined : BusinessPartyFromJSON(json['BusinessParty']),
        'configKeys': !exists(json, 'ConfigKeys') ? undefined : ((json['ConfigKeys'] as Array<any>).map(ConfigKeysFromJSON)),
        'versionedTouchPoints': !exists(json, 'VersionedTouchPoints') ? undefined : ((json['VersionedTouchPoints'] as Array<any>).map(VersionedTouchPointsFromJSON)),
    };
}

export function TouchPointsAllOfToJSON(value?: TouchPointsAllOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Name': value.name,
        'Code': value.code,
        'DefaultColorValuesId': value.defaultColorValuesId,
        'LogoSupported': value.logoSupported,
        'Owner': value.owner,
        'Url': value.url,
        'BusinessParty': BusinessPartyToJSON(value.businessParty),
        'ConfigKeys': value.configKeys === undefined ? undefined : ((value.configKeys as Array<any>).map(ConfigKeysToJSON)),
        'VersionedTouchPoints': value.versionedTouchPoints === undefined ? undefined : ((value.versionedTouchPoints as Array<any>).map(VersionedTouchPointsToJSON)),
    };
}


