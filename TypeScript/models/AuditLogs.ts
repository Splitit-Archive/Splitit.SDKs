/* tslint:disable */
/* eslint-disable */
/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuditLogsAllOf,
    AuditLogsAllOfFromJSON,
    AuditLogsAllOfFromJSONTyped,
    AuditLogsAllOfToJSON,
    BusinessActivity,
    BusinessActivityFromJSON,
    BusinessActivityFromJSONTyped,
    BusinessActivityToJSON,
    EntityBase,
    EntityBaseFromJSON,
    EntityBaseFromJSONTyped,
    EntityBaseToJSON,
    UserType,
    UserTypeFromJSON,
    UserTypeFromJSONTyped,
    UserTypeToJSON,
    VersionedTouchPoints,
    VersionedTouchPointsFromJSON,
    VersionedTouchPointsFromJSONTyped,
    VersionedTouchPointsToJSON,
} from './';

/**
 * 
 * @export
 * @interface AuditLogs
 */
export interface AuditLogs {
    /**
     * 
     * @type {number}
     * @memberof AuditLogs
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof AuditLogs
     */
    activityExecutionDate: Date;
    /**
     * 
     * @type {number}
     * @memberof AuditLogs
     */
    userId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditLogs
     */
    userUniqueId?: string;
    /**
     * 
     * @type {BusinessActivity}
     * @memberof AuditLogs
     */
    businessActivity: BusinessActivity;
    /**
     * 
     * @type {string}
     * @memberof AuditLogs
     */
    traceId?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AuditLogs
     */
    result: boolean;
    /**
     * 
     * @type {VersionedTouchPoints}
     * @memberof AuditLogs
     */
    versionedTouchPoint?: VersionedTouchPoints;
    /**
     * 
     * @type {number}
     * @memberof AuditLogs
     */
    versionedTouchPointId?: number;
    /**
     * 
     * @type {string}
     * @memberof AuditLogs
     */
    discriminator?: string;
    /**
     * 
     * @type {string}
     * @memberof AuditLogs
     */
    additionalInfo?: string;
    /**
     * 
     * @type {UserType}
     * @memberof AuditLogs
     */
    userType?: UserType;
}

export function AuditLogsFromJSON(json: any): AuditLogs {
    return AuditLogsFromJSONTyped(json, false);
}

export function AuditLogsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'activityExecutionDate': (new Date(json['ActivityExecutionDate'])),
        'userId': !exists(json, 'UserId') ? undefined : json['UserId'],
        'userUniqueId': !exists(json, 'UserUniqueId') ? undefined : json['UserUniqueId'],
        'businessActivity': BusinessActivityFromJSON(json['BusinessActivity']),
        'traceId': !exists(json, 'TraceId') ? undefined : json['TraceId'],
        'result': json['Result'],
        'versionedTouchPoint': !exists(json, 'VersionedTouchPoint') ? undefined : VersionedTouchPointsFromJSON(json['VersionedTouchPoint']),
        'versionedTouchPointId': !exists(json, 'VersionedTouchPointId') ? undefined : json['VersionedTouchPointId'],
        'discriminator': !exists(json, 'Discriminator') ? undefined : json['Discriminator'],
        'additionalInfo': !exists(json, 'AdditionalInfo') ? undefined : json['AdditionalInfo'],
        'userType': !exists(json, 'UserType') ? undefined : UserTypeFromJSON(json['UserType']),
    };
}

export function AuditLogsToJSON(value?: AuditLogs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Id': value.id,
        'ActivityExecutionDate': (value.activityExecutionDate.toISOString()),
        'UserId': value.userId,
        'UserUniqueId': value.userUniqueId,
        'BusinessActivity': BusinessActivityToJSON(value.businessActivity),
        'TraceId': value.traceId,
        'Result': value.result,
        'VersionedTouchPoint': VersionedTouchPointsToJSON(value.versionedTouchPoint),
        'VersionedTouchPointId': value.versionedTouchPointId,
        'Discriminator': value.discriminator,
        'AdditionalInfo': value.additionalInfo,
        'UserType': UserTypeToJSON(value.userType),
    };
}


