/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using Splitit.SDK.Client.Client;
using Splitit.SDK.Client.Model;

namespace Splitit.SDK.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInstallmentPlanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        InstallmentPlanResponse InstallmentPlanApprove (ApproveInstallmentPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        InstallmentPlanResponse InstallmentPlanCancel (CancelInstallmentPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        InstallmentPlanResponse InstallmentPlanChargeBack (ChargebackRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>CreateInstallmentsPlanResponse</returns>
        CreateInstallmentsPlanResponse InstallmentPlanCreate (CreateInstallmentPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInstallmentsPlanResponse</returns>
        GetInstallmentsPlanResponse InstallmentPlanGet (GetInstallmentsPlanSearchCriteriaRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Get3DSecureParametersResponse</returns>
        Get3DSecureParametersResponse InstallmentPlanGet3DSecureParameters (Get3DSecureParametersRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInstallmentsPlanExtendedResponse</returns>
        GetInstallmentsPlanExtendedResponse InstallmentPlanGetExtended (GetInstallmentsPlanSearchCriteriaRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetFraudStatusDisplayResponse</returns>
        GetFraudStatusDisplayResponse InstallmentPlanGetFraudStatusDisplay (GetFraudStatusDisplayRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInitiatedInstallmentPlanResponse</returns>
        GetInitiatedInstallmentPlanResponse InstallmentPlanGetInitiatedInstallmentPlanRequest (GetInitiatedInstallmentPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInitiatedUpdatePaymentDataResponse</returns>
        GetInitiatedUpdatePaymentDataResponse InstallmentPlanGetInitiatedUpdatePaymentData ();
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>LearnMoreDetailsResponse</returns>
        LearnMoreDetailsResponse InstallmentPlanGetLearnMoreDetails (LearnMoreDetailsRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetPGTLResponse</returns>
        GetPGTLResponse InstallmentPlanGetPGTL (GetPGTLRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInstallmentsScheduleResponse</returns>
        GetInstallmentsScheduleResponse InstallmentPlanGetSchedules (GetInstallmentSchedulesRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InitiateInstallmentsPlanResponse</returns>
        InitiateInstallmentsPlanResponse InstallmentPlanInitiate (InitiateInstallmentPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>RefundInstallmentPlanResponse</returns>
        RefundInstallmentPlanResponse InstallmentPlanRefund (RefundPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>RequestPaymentResponse</returns>
        RequestPaymentResponse InstallmentPlanRequestPayment (RequestPaymentRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        InstallmentPlanResponse InstallmentPlanStartInstallments (StartInstallmentsRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TermsAndConditionsGetResponse</returns>
        TermsAndConditionsGetResponse InstallmentPlanTermsAndConditions (TermsAndConditionsGetRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        InstallmentPlanResponse InstallmentPlanTestCard (TestCardRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>UpdateInstallmentsPlanResponse</returns>
        UpdateInstallmentsPlanResponse InstallmentPlanUpdate (UpdateInstallmentPlanRequest request);
       
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>VerifyPaymentResponse</returns>
        VerifyPaymentResponse InstallmentPlanVerifyPayment (VerifyPaymentRequest request);
       
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanApproveAsync (ApproveInstallmentPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanApproveAsyncWithHttpInfo (ApproveInstallmentPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanCancelAsync (CancelInstallmentPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanCancelAsyncWithHttpInfo (CancelInstallmentPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanChargeBackAsync (ChargebackRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanChargeBackAsyncWithHttpInfo (ChargebackRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of CreateInstallmentsPlanResponse</returns>
        System.Threading.Tasks.Task<CreateInstallmentsPlanResponse> InstallmentPlanCreateAsync (CreateInstallmentPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CreateInstallmentsPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateInstallmentsPlanResponse>> InstallmentPlanCreateAsyncWithHttpInfo (CreateInstallmentPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInstallmentsPlanResponse</returns>
        System.Threading.Tasks.Task<GetInstallmentsPlanResponse> InstallmentPlanGetAsync (GetInstallmentsPlanSearchCriteriaRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInstallmentsPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInstallmentsPlanResponse>> InstallmentPlanGetAsyncWithHttpInfo (GetInstallmentsPlanSearchCriteriaRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of Get3DSecureParametersResponse</returns>
        System.Threading.Tasks.Task<Get3DSecureParametersResponse> InstallmentPlanGet3DSecureParametersAsync (Get3DSecureParametersRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (Get3DSecureParametersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<Get3DSecureParametersResponse>> InstallmentPlanGet3DSecureParametersAsyncWithHttpInfo (Get3DSecureParametersRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInstallmentsPlanExtendedResponse</returns>
        System.Threading.Tasks.Task<GetInstallmentsPlanExtendedResponse> InstallmentPlanGetExtendedAsync (GetInstallmentsPlanSearchCriteriaRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInstallmentsPlanExtendedResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInstallmentsPlanExtendedResponse>> InstallmentPlanGetExtendedAsyncWithHttpInfo (GetInstallmentsPlanSearchCriteriaRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetFraudStatusDisplayResponse</returns>
        System.Threading.Tasks.Task<GetFraudStatusDisplayResponse> InstallmentPlanGetFraudStatusDisplayAsync (GetFraudStatusDisplayRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetFraudStatusDisplayResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFraudStatusDisplayResponse>> InstallmentPlanGetFraudStatusDisplayAsyncWithHttpInfo (GetFraudStatusDisplayRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInitiatedInstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<GetInitiatedInstallmentPlanResponse> InstallmentPlanGetInitiatedInstallmentPlanRequestAsync (GetInitiatedInstallmentPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInitiatedInstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInitiatedInstallmentPlanResponse>> InstallmentPlanGetInitiatedInstallmentPlanRequestAsyncWithHttpInfo (GetInitiatedInstallmentPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInitiatedUpdatePaymentDataResponse</returns>
        System.Threading.Tasks.Task<GetInitiatedUpdatePaymentDataResponse> InstallmentPlanGetInitiatedUpdatePaymentDataAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInitiatedUpdatePaymentDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInitiatedUpdatePaymentDataResponse>> InstallmentPlanGetInitiatedUpdatePaymentDataAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of LearnMoreDetailsResponse</returns>
        System.Threading.Tasks.Task<LearnMoreDetailsResponse> InstallmentPlanGetLearnMoreDetailsAsync (LearnMoreDetailsRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (LearnMoreDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LearnMoreDetailsResponse>> InstallmentPlanGetLearnMoreDetailsAsyncWithHttpInfo (LearnMoreDetailsRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetPGTLResponse</returns>
        System.Threading.Tasks.Task<GetPGTLResponse> InstallmentPlanGetPGTLAsync (GetPGTLRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetPGTLResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPGTLResponse>> InstallmentPlanGetPGTLAsyncWithHttpInfo (GetPGTLRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInstallmentsScheduleResponse</returns>
        System.Threading.Tasks.Task<GetInstallmentsScheduleResponse> InstallmentPlanGetSchedulesAsync (GetInstallmentSchedulesRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInstallmentsScheduleResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetInstallmentsScheduleResponse>> InstallmentPlanGetSchedulesAsyncWithHttpInfo (GetInstallmentSchedulesRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InitiateInstallmentsPlanResponse</returns>
        System.Threading.Tasks.Task<InitiateInstallmentsPlanResponse> InstallmentPlanInitiateAsync (InitiateInstallmentPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InitiateInstallmentsPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InitiateInstallmentsPlanResponse>> InstallmentPlanInitiateAsyncWithHttpInfo (InitiateInstallmentPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of RefundInstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<RefundInstallmentPlanResponse> InstallmentPlanRefundAsync (RefundPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RefundInstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundInstallmentPlanResponse>> InstallmentPlanRefundAsyncWithHttpInfo (RefundPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of RequestPaymentResponse</returns>
        System.Threading.Tasks.Task<RequestPaymentResponse> InstallmentPlanRequestPaymentAsync (RequestPaymentRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RequestPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestPaymentResponse>> InstallmentPlanRequestPaymentAsyncWithHttpInfo (RequestPaymentRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanStartInstallmentsAsync (StartInstallmentsRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanStartInstallmentsAsyncWithHttpInfo (StartInstallmentsRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TermsAndConditionsGetResponse</returns>
        System.Threading.Tasks.Task<TermsAndConditionsGetResponse> InstallmentPlanTermsAndConditionsAsync (TermsAndConditionsGetRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TermsAndConditionsGetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TermsAndConditionsGetResponse>> InstallmentPlanTermsAndConditionsAsyncWithHttpInfo (TermsAndConditionsGetRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanTestCardAsync (TestCardRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanTestCardAsyncWithHttpInfo (TestCardRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of UpdateInstallmentsPlanResponse</returns>
        System.Threading.Tasks.Task<UpdateInstallmentsPlanResponse> InstallmentPlanUpdateAsync (UpdateInstallmentPlanRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (UpdateInstallmentsPlanResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateInstallmentsPlanResponse>> InstallmentPlanUpdateAsyncWithHttpInfo (UpdateInstallmentPlanRequest request);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of VerifyPaymentResponse</returns>
        System.Threading.Tasks.Task<VerifyPaymentResponse> InstallmentPlanVerifyPaymentAsync (VerifyPaymentRequest request);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (VerifyPaymentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyPaymentResponse>> InstallmentPlanVerifyPaymentAsyncWithHttpInfo (VerifyPaymentRequest request);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InstallmentPlanApi : IInstallmentPlanApi
    {
		private string _apiKey;
		private string _sessionId;

        public string Culture { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstallmentPlanApi(Splitit.SDK.Client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Splitit.SDK.Client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

			this._apiKey = this.Configuration.ApiKey;
        }
		
		/// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InstallmentPlanApi(
			Splitit.SDK.Client.Client.Configuration configuration = null,
			string sessionId = null)
			: this(configuration)
        {
			this._sessionId = sessionId;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath.ToString();
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Splitit.SDK.Client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        public InstallmentPlanResponse InstallmentPlanApprove (ApproveInstallmentPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanApproveAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanApproveAsync (ApproveInstallmentPlanRequest request)
        {
             ApiResponse<InstallmentPlanResponse> localVarResponse = await InstallmentPlanApproveAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanApproveAsyncWithHttpInfo (ApproveInstallmentPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanApprove");

            var localVarPath = "./api/InstallmentPlan/Approve";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<InstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        public InstallmentPlanResponse InstallmentPlanCancel (CancelInstallmentPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanCancelAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanCancelAsync (CancelInstallmentPlanRequest request)
        {
             ApiResponse<InstallmentPlanResponse> localVarResponse = await InstallmentPlanCancelAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanCancelAsyncWithHttpInfo (CancelInstallmentPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanCancel");

            var localVarPath = "./api/InstallmentPlan/Cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<InstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        public InstallmentPlanResponse InstallmentPlanChargeBack (ChargebackRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanChargeBackAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanChargeBackAsync (ChargebackRequest request)
        {
             ApiResponse<InstallmentPlanResponse> localVarResponse = await InstallmentPlanChargeBackAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanChargeBackAsyncWithHttpInfo (ChargebackRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanChargeBack");

            var localVarPath = "./api/InstallmentPlan/ChargeBack";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<InstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>CreateInstallmentsPlanResponse</returns>
        public CreateInstallmentsPlanResponse InstallmentPlanCreate (CreateInstallmentPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanCreateAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of CreateInstallmentsPlanResponse</returns>
        public async System.Threading.Tasks.Task<CreateInstallmentsPlanResponse> InstallmentPlanCreateAsync (CreateInstallmentPlanRequest request)
        {
             ApiResponse<CreateInstallmentsPlanResponse> localVarResponse = await InstallmentPlanCreateAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (CreateInstallmentsPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateInstallmentsPlanResponse>> InstallmentPlanCreateAsyncWithHttpInfo (CreateInstallmentPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanCreate");

            var localVarPath = "./api/InstallmentPlan/Create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<CreateInstallmentsPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInstallmentsPlanResponse</returns>
        public GetInstallmentsPlanResponse InstallmentPlanGet (GetInstallmentsPlanSearchCriteriaRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInstallmentsPlanResponse</returns>
        public async System.Threading.Tasks.Task<GetInstallmentsPlanResponse> InstallmentPlanGetAsync (GetInstallmentsPlanSearchCriteriaRequest request)
        {
             ApiResponse<GetInstallmentsPlanResponse> localVarResponse = await InstallmentPlanGetAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInstallmentsPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInstallmentsPlanResponse>> InstallmentPlanGetAsyncWithHttpInfo (GetInstallmentsPlanSearchCriteriaRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGet");

            var localVarPath = "./api/InstallmentPlan/Get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetInstallmentsPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Get3DSecureParametersResponse</returns>
        public Get3DSecureParametersResponse InstallmentPlanGet3DSecureParameters (Get3DSecureParametersRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGet3DSecureParametersAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of Get3DSecureParametersResponse</returns>
        public async System.Threading.Tasks.Task<Get3DSecureParametersResponse> InstallmentPlanGet3DSecureParametersAsync (Get3DSecureParametersRequest request)
        {
             ApiResponse<Get3DSecureParametersResponse> localVarResponse = await InstallmentPlanGet3DSecureParametersAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (Get3DSecureParametersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Get3DSecureParametersResponse>> InstallmentPlanGet3DSecureParametersAsyncWithHttpInfo (Get3DSecureParametersRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGet3DSecureParameters");

            var localVarPath = "./api/InstallmentPlan/Get3DSecureParameters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<Get3DSecureParametersResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInstallmentsPlanExtendedResponse</returns>
        public GetInstallmentsPlanExtendedResponse InstallmentPlanGetExtended (GetInstallmentsPlanSearchCriteriaRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetExtendedAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInstallmentsPlanExtendedResponse</returns>
        public async System.Threading.Tasks.Task<GetInstallmentsPlanExtendedResponse> InstallmentPlanGetExtendedAsync (GetInstallmentsPlanSearchCriteriaRequest request)
        {
             ApiResponse<GetInstallmentsPlanExtendedResponse> localVarResponse = await InstallmentPlanGetExtendedAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInstallmentsPlanExtendedResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInstallmentsPlanExtendedResponse>> InstallmentPlanGetExtendedAsyncWithHttpInfo (GetInstallmentsPlanSearchCriteriaRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGetExtended");

            var localVarPath = "./api/InstallmentPlan/GetExtended";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetInstallmentsPlanExtendedResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetFraudStatusDisplayResponse</returns>
        public GetFraudStatusDisplayResponse InstallmentPlanGetFraudStatusDisplay (GetFraudStatusDisplayRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetFraudStatusDisplayAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetFraudStatusDisplayResponse</returns>
        public async System.Threading.Tasks.Task<GetFraudStatusDisplayResponse> InstallmentPlanGetFraudStatusDisplayAsync (GetFraudStatusDisplayRequest request)
        {
             ApiResponse<GetFraudStatusDisplayResponse> localVarResponse = await InstallmentPlanGetFraudStatusDisplayAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetFraudStatusDisplayResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetFraudStatusDisplayResponse>> InstallmentPlanGetFraudStatusDisplayAsyncWithHttpInfo (GetFraudStatusDisplayRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGetFraudStatusDisplay");

            var localVarPath = "./api/InstallmentPlan/GetFraudStatusDisplay";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetFraudStatusDisplayResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInitiatedInstallmentPlanResponse</returns>
        public GetInitiatedInstallmentPlanResponse InstallmentPlanGetInitiatedInstallmentPlanRequest (GetInitiatedInstallmentPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetInitiatedInstallmentPlanRequestAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInitiatedInstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<GetInitiatedInstallmentPlanResponse> InstallmentPlanGetInitiatedInstallmentPlanRequestAsync (GetInitiatedInstallmentPlanRequest request)
        {
             ApiResponse<GetInitiatedInstallmentPlanResponse> localVarResponse = await InstallmentPlanGetInitiatedInstallmentPlanRequestAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInitiatedInstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInitiatedInstallmentPlanResponse>> InstallmentPlanGetInitiatedInstallmentPlanRequestAsyncWithHttpInfo (GetInitiatedInstallmentPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGetInitiatedInstallmentPlanRequest");

            var localVarPath = "./api/InstallmentPlan/GetInitiatedInstallmentPlanRequest";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetInitiatedInstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetInitiatedUpdatePaymentDataResponse</returns>
        public GetInitiatedUpdatePaymentDataResponse InstallmentPlanGetInitiatedUpdatePaymentData ()
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetInitiatedUpdatePaymentDataAsync()).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetInitiatedUpdatePaymentDataResponse</returns>
        public async System.Threading.Tasks.Task<GetInitiatedUpdatePaymentDataResponse> InstallmentPlanGetInitiatedUpdatePaymentDataAsync ()
        {
             ApiResponse<GetInitiatedUpdatePaymentDataResponse> localVarResponse = await InstallmentPlanGetInitiatedUpdatePaymentDataAsyncWithHttpInfo();
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetInitiatedUpdatePaymentDataResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInitiatedUpdatePaymentDataResponse>> InstallmentPlanGetInitiatedUpdatePaymentDataAsyncWithHttpInfo ()
        {

            var localVarPath = "./api/InstallmentPlan/GetInitiatedUpdatePaymentData";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetInitiatedUpdatePaymentDataResponse>(localVarPath,
                System.Net.Http.HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>LearnMoreDetailsResponse</returns>
        public LearnMoreDetailsResponse InstallmentPlanGetLearnMoreDetails (LearnMoreDetailsRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetLearnMoreDetailsAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of LearnMoreDetailsResponse</returns>
        public async System.Threading.Tasks.Task<LearnMoreDetailsResponse> InstallmentPlanGetLearnMoreDetailsAsync (LearnMoreDetailsRequest request)
        {
             ApiResponse<LearnMoreDetailsResponse> localVarResponse = await InstallmentPlanGetLearnMoreDetailsAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (LearnMoreDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LearnMoreDetailsResponse>> InstallmentPlanGetLearnMoreDetailsAsyncWithHttpInfo (LearnMoreDetailsRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGetLearnMoreDetails");

            var localVarPath = "./api/InstallmentPlan/GetLearnMoreDetails";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<LearnMoreDetailsResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetPGTLResponse</returns>
        public GetPGTLResponse InstallmentPlanGetPGTL (GetPGTLRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetPGTLAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetPGTLResponse</returns>
        public async System.Threading.Tasks.Task<GetPGTLResponse> InstallmentPlanGetPGTLAsync (GetPGTLRequest request)
        {
             ApiResponse<GetPGTLResponse> localVarResponse = await InstallmentPlanGetPGTLAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetPGTLResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPGTLResponse>> InstallmentPlanGetPGTLAsyncWithHttpInfo (GetPGTLRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGetPGTL");

            var localVarPath = "./api/InstallmentPlan/GetPGTL";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetPGTLResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>GetInstallmentsScheduleResponse</returns>
        public GetInstallmentsScheduleResponse InstallmentPlanGetSchedules (GetInstallmentSchedulesRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanGetSchedulesAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of GetInstallmentsScheduleResponse</returns>
        public async System.Threading.Tasks.Task<GetInstallmentsScheduleResponse> InstallmentPlanGetSchedulesAsync (GetInstallmentSchedulesRequest request)
        {
             ApiResponse<GetInstallmentsScheduleResponse> localVarResponse = await InstallmentPlanGetSchedulesAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (GetInstallmentsScheduleResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetInstallmentsScheduleResponse>> InstallmentPlanGetSchedulesAsyncWithHttpInfo (GetInstallmentSchedulesRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanGetSchedules");

            var localVarPath = "./api/InstallmentPlan/GetSchedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<GetInstallmentsScheduleResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InitiateInstallmentsPlanResponse</returns>
        public InitiateInstallmentsPlanResponse InstallmentPlanInitiate (InitiateInstallmentPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanInitiateAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InitiateInstallmentsPlanResponse</returns>
        public async System.Threading.Tasks.Task<InitiateInstallmentsPlanResponse> InstallmentPlanInitiateAsync (InitiateInstallmentPlanRequest request)
        {
             ApiResponse<InitiateInstallmentsPlanResponse> localVarResponse = await InstallmentPlanInitiateAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InitiateInstallmentsPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InitiateInstallmentsPlanResponse>> InstallmentPlanInitiateAsyncWithHttpInfo (InitiateInstallmentPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanInitiate");

            var localVarPath = "./api/InstallmentPlan/Initiate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<InitiateInstallmentsPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>RefundInstallmentPlanResponse</returns>
        public RefundInstallmentPlanResponse InstallmentPlanRefund (RefundPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanRefundAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of RefundInstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<RefundInstallmentPlanResponse> InstallmentPlanRefundAsync (RefundPlanRequest request)
        {
             ApiResponse<RefundInstallmentPlanResponse> localVarResponse = await InstallmentPlanRefundAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RefundInstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefundInstallmentPlanResponse>> InstallmentPlanRefundAsyncWithHttpInfo (RefundPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanRefund");

            var localVarPath = "./api/InstallmentPlan/Refund";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<RefundInstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>RequestPaymentResponse</returns>
        public RequestPaymentResponse InstallmentPlanRequestPayment (RequestPaymentRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanRequestPaymentAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of RequestPaymentResponse</returns>
        public async System.Threading.Tasks.Task<RequestPaymentResponse> InstallmentPlanRequestPaymentAsync (RequestPaymentRequest request)
        {
             ApiResponse<RequestPaymentResponse> localVarResponse = await InstallmentPlanRequestPaymentAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (RequestPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RequestPaymentResponse>> InstallmentPlanRequestPaymentAsyncWithHttpInfo (RequestPaymentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanRequestPayment");

            var localVarPath = "./api/InstallmentPlan/RequestPayment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<RequestPaymentResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        public InstallmentPlanResponse InstallmentPlanStartInstallments (StartInstallmentsRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanStartInstallmentsAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanStartInstallmentsAsync (StartInstallmentsRequest request)
        {
             ApiResponse<InstallmentPlanResponse> localVarResponse = await InstallmentPlanStartInstallmentsAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanStartInstallmentsAsyncWithHttpInfo (StartInstallmentsRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanStartInstallments");

            var localVarPath = "./api/InstallmentPlan/StartInstallments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<InstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>TermsAndConditionsGetResponse</returns>
        public TermsAndConditionsGetResponse InstallmentPlanTermsAndConditions (TermsAndConditionsGetRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanTermsAndConditionsAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of TermsAndConditionsGetResponse</returns>
        public async System.Threading.Tasks.Task<TermsAndConditionsGetResponse> InstallmentPlanTermsAndConditionsAsync (TermsAndConditionsGetRequest request)
        {
             ApiResponse<TermsAndConditionsGetResponse> localVarResponse = await InstallmentPlanTermsAndConditionsAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (TermsAndConditionsGetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TermsAndConditionsGetResponse>> InstallmentPlanTermsAndConditionsAsyncWithHttpInfo (TermsAndConditionsGetRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanTermsAndConditions");

            var localVarPath = "./api/InstallmentPlan/TermsAndConditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<TermsAndConditionsGetResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>InstallmentPlanResponse</returns>
        public InstallmentPlanResponse InstallmentPlanTestCard (TestCardRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanTestCardAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of InstallmentPlanResponse</returns>
        public async System.Threading.Tasks.Task<InstallmentPlanResponse> InstallmentPlanTestCardAsync (TestCardRequest request)
        {
             ApiResponse<InstallmentPlanResponse> localVarResponse = await InstallmentPlanTestCardAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (InstallmentPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InstallmentPlanResponse>> InstallmentPlanTestCardAsyncWithHttpInfo (TestCardRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanTestCard");

            var localVarPath = "./api/InstallmentPlan/TestCard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<InstallmentPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>UpdateInstallmentsPlanResponse</returns>
        public UpdateInstallmentsPlanResponse InstallmentPlanUpdate (UpdateInstallmentPlanRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanUpdateAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of UpdateInstallmentsPlanResponse</returns>
        public async System.Threading.Tasks.Task<UpdateInstallmentsPlanResponse> InstallmentPlanUpdateAsync (UpdateInstallmentPlanRequest request)
        {
             ApiResponse<UpdateInstallmentsPlanResponse> localVarResponse = await InstallmentPlanUpdateAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (UpdateInstallmentsPlanResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdateInstallmentsPlanResponse>> InstallmentPlanUpdateAsyncWithHttpInfo (UpdateInstallmentPlanRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanUpdate");

            var localVarPath = "./api/InstallmentPlan/Update";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<UpdateInstallmentsPlanResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>VerifyPaymentResponse</returns>
        public VerifyPaymentResponse InstallmentPlanVerifyPayment (VerifyPaymentRequest request)
        {
            return System.Threading.Tasks.Task.Run(async () => await InstallmentPlanVerifyPaymentAsync(request)).ConfigureAwait(true).GetAwaiter().GetResult();
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of VerifyPaymentResponse</returns>
        public async System.Threading.Tasks.Task<VerifyPaymentResponse> InstallmentPlanVerifyPaymentAsync (VerifyPaymentRequest request)
        {
             ApiResponse<VerifyPaymentResponse> localVarResponse = await InstallmentPlanVerifyPaymentAsyncWithHttpInfo(request);
             localVarResponse.Validate();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Splitit.SDK.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (VerifyPaymentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyPaymentResponse>> InstallmentPlanVerifyPaymentAsyncWithHttpInfo (VerifyPaymentRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling InstallmentPlanApi->InstallmentPlanVerifyPayment");

            var localVarPath = "./api/InstallmentPlan/Get/VerifyPayment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
				this.Configuration.ApiClient.InjectAuthIfNotExists(apiKey: this._apiKey, sessionId: this._sessionId, culture: this.Culture, request: request);
            }

            localVarPostBody = request;



            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync<VerifyPaymentResponse>(localVarPath,
                System.Net.Http.HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, 
                localVarPathParams, localVarHttpContentType);

          
            return localVarResponse;
        }

    }
}
