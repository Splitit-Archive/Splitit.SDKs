/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// TouchPoints
    /// </summary>
    [DataContract]
    public partial class TouchPoints :  IEquatable<TouchPoints>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TouchPoints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TouchPoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TouchPoints" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="code">code.</param>
        /// <param name="defaultColorValuesId">defaultColorValuesId (required).</param>
        /// <param name="logoSupported">logoSupported (required).</param>
        /// <param name="owner">owner.</param>
        /// <param name="url">url.</param>
        /// <param name="businessParty">businessParty.</param>
        /// <param name="configKeys">configKeys.</param>
        /// <param name="versionedTouchPoints">versionedTouchPoints.</param>
        public TouchPoints(long? id = default(long?), string name = default(string), string code = default(string), long? defaultColorValuesId = default(long?), bool? logoSupported = default(bool?), string owner = default(string), string url = default(string), BusinessParty businessParty = default(BusinessParty), List<ConfigKeys> configKeys = default(List<ConfigKeys>), List<VersionedTouchPoints> versionedTouchPoints = default(List<VersionedTouchPoints>))
        {
            this.Id = id;
            this.DefaultColorValuesId = defaultColorValuesId;
            this.LogoSupported = logoSupported;
            this.Name = name;
            this.Code = code;
            this.Owner = owner;
            this.Url = url;
            this.BusinessParty = businessParty;
            this.ConfigKeys = configKeys;
            this.VersionedTouchPoints = versionedTouchPoints;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets DefaultColorValuesId
        /// </summary>
        [DataMember(Name="DefaultColorValuesId", EmitDefaultValue=false)]
        public long? DefaultColorValuesId { get; set; }

        /// <summary>
        /// Gets or Sets LogoSupported
        /// </summary>
        [DataMember(Name="LogoSupported", EmitDefaultValue=false)]
        public bool? LogoSupported { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="Url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets BusinessParty
        /// </summary>
        [DataMember(Name="BusinessParty", EmitDefaultValue=false)]
        public BusinessParty BusinessParty { get; set; }

        /// <summary>
        /// Gets or Sets ConfigKeys
        /// </summary>
        [DataMember(Name="ConfigKeys", EmitDefaultValue=false)]
        public List<ConfigKeys> ConfigKeys { get; set; }

        /// <summary>
        /// Gets or Sets VersionedTouchPoints
        /// </summary>
        [DataMember(Name="VersionedTouchPoints", EmitDefaultValue=false)]
        public List<VersionedTouchPoints> VersionedTouchPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TouchPoints {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  DefaultColorValuesId: ").Append(DefaultColorValuesId).Append("\n");
            sb.Append("  LogoSupported: ").Append(LogoSupported).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  BusinessParty: ").Append(BusinessParty).Append("\n");
            sb.Append("  ConfigKeys: ").Append(ConfigKeys).Append("\n");
            sb.Append("  VersionedTouchPoints: ").Append(VersionedTouchPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TouchPoints);
        }

        /// <summary>
        /// Returns true if TouchPoints instances are equal
        /// </summary>
        /// <param name="input">Instance of TouchPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TouchPoints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.DefaultColorValuesId == input.DefaultColorValuesId ||
                    (this.DefaultColorValuesId != null &&
                    this.DefaultColorValuesId.Equals(input.DefaultColorValuesId))
                ) && 
                (
                    this.LogoSupported == input.LogoSupported ||
                    (this.LogoSupported != null &&
                    this.LogoSupported.Equals(input.LogoSupported))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.BusinessParty == input.BusinessParty ||
                    (this.BusinessParty != null &&
                    this.BusinessParty.Equals(input.BusinessParty))
                ) && 
                (
                    this.ConfigKeys == input.ConfigKeys ||
                    this.ConfigKeys != null &&
                    this.ConfigKeys.SequenceEqual(input.ConfigKeys)
                ) && 
                (
                    this.VersionedTouchPoints == input.VersionedTouchPoints ||
                    this.VersionedTouchPoints != null &&
                    this.VersionedTouchPoints.SequenceEqual(input.VersionedTouchPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.DefaultColorValuesId != null)
                    hashCode = hashCode * 59 + this.DefaultColorValuesId.GetHashCode();
                if (this.LogoSupported != null)
                    hashCode = hashCode * 59 + this.LogoSupported.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.BusinessParty != null)
                    hashCode = hashCode * 59 + this.BusinessParty.GetHashCode();
                if (this.ConfigKeys != null)
                    hashCode = hashCode * 59 + this.ConfigKeys.GetHashCode();
                if (this.VersionedTouchPoints != null)
                    hashCode = hashCode * 59 + this.VersionedTouchPoints.GetHashCode();
                return hashCode;
            }
        }
    }

}
