/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ReAuthorizations
    /// </summary>
    [DataContract]
    public partial class ReAuthorizations :  IEquatable<ReAuthorizations>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReAuthorizations" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReAuthorizations() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReAuthorizations" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="installmentPlanId">installmentPlanId (required).</param>
        /// <param name="processorId">processorId (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="processDateTime">processDateTime.</param>
        /// <param name="isTest">isTest (required).</param>
        /// <param name="cardStateId">cardStateId.</param>
        /// <param name="cardState">cardState.</param>
        /// <param name="installmentPlan">installmentPlan.</param>
        /// <param name="processor">processor.</param>
        /// <param name="reAuthorizationPaymentGatewayTransactionLogs">reAuthorizationPaymentGatewayTransactionLogs.</param>
        /// <param name="status">status (required).</param>
        public ReAuthorizations(long? id = default(long?), long? installmentPlanId = default(long?), long? processorId = default(long?), decimal? amount = default(decimal?), DateTime? processDateTime = default(DateTime?), bool? isTest = default(bool?), long? cardStateId = default(long?), CardStateLogs cardState = default(CardStateLogs), InstallmentPlans installmentPlan = default(InstallmentPlans), Processors processor = default(Processors), List<ReAuthorizationPaymentGatewayTransactionLogs> reAuthorizationPaymentGatewayTransactionLogs = default(List<ReAuthorizationPaymentGatewayTransactionLogs>), InstallmentStatus status = default(InstallmentStatus))
        {
            this.Id = id;
            this.InstallmentPlanId = installmentPlanId;
            this.ProcessorId = processorId;
            this.Amount = amount;
            this.IsTest = isTest;
            this.Status = status;
            this.ProcessDateTime = processDateTime;
            this.CardStateId = cardStateId;
            this.CardState = cardState;
            this.InstallmentPlan = installmentPlan;
            this.Processor = processor;
            this.ReAuthorizationPaymentGatewayTransactionLogs = reAuthorizationPaymentGatewayTransactionLogs;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanId
        /// </summary>
        [DataMember(Name="InstallmentPlanId", EmitDefaultValue=false)]
        public long? InstallmentPlanId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorId
        /// </summary>
        [DataMember(Name="ProcessorId", EmitDefaultValue=false)]
        public long? ProcessorId { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDateTime
        /// </summary>
        [DataMember(Name="ProcessDateTime", EmitDefaultValue=false)]
        public DateTime? ProcessDateTime { get; set; }

        /// <summary>
        /// Gets or Sets IsTest
        /// </summary>
        [DataMember(Name="IsTest", EmitDefaultValue=false)]
        public bool? IsTest { get; set; }

        /// <summary>
        /// Gets or Sets CardStateId
        /// </summary>
        [DataMember(Name="CardStateId", EmitDefaultValue=false)]
        public long? CardStateId { get; set; }

        /// <summary>
        /// Gets or Sets CardState
        /// </summary>
        [DataMember(Name="CardState", EmitDefaultValue=false)]
        public CardStateLogs CardState { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlan
        /// </summary>
        [DataMember(Name="InstallmentPlan", EmitDefaultValue=false)]
        public InstallmentPlans InstallmentPlan { get; set; }

        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="Processor", EmitDefaultValue=false)]
        public Processors Processor { get; set; }

        /// <summary>
        /// Gets or Sets ReAuthorizationPaymentGatewayTransactionLogs
        /// </summary>
        [DataMember(Name="ReAuthorizationPaymentGatewayTransactionLogs", EmitDefaultValue=false)]
        public List<ReAuthorizationPaymentGatewayTransactionLogs> ReAuthorizationPaymentGatewayTransactionLogs { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public InstallmentStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReAuthorizations {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallmentPlanId: ").Append(InstallmentPlanId).Append("\n");
            sb.Append("  ProcessorId: ").Append(ProcessorId).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ProcessDateTime: ").Append(ProcessDateTime).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  CardStateId: ").Append(CardStateId).Append("\n");
            sb.Append("  CardState: ").Append(CardState).Append("\n");
            sb.Append("  InstallmentPlan: ").Append(InstallmentPlan).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("  ReAuthorizationPaymentGatewayTransactionLogs: ").Append(ReAuthorizationPaymentGatewayTransactionLogs).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReAuthorizations);
        }

        /// <summary>
        /// Returns true if ReAuthorizations instances are equal
        /// </summary>
        /// <param name="input">Instance of ReAuthorizations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReAuthorizations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallmentPlanId == input.InstallmentPlanId ||
                    (this.InstallmentPlanId != null &&
                    this.InstallmentPlanId.Equals(input.InstallmentPlanId))
                ) && 
                (
                    this.ProcessorId == input.ProcessorId ||
                    (this.ProcessorId != null &&
                    this.ProcessorId.Equals(input.ProcessorId))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ProcessDateTime == input.ProcessDateTime ||
                    (this.ProcessDateTime != null &&
                    this.ProcessDateTime.Equals(input.ProcessDateTime))
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    (this.IsTest != null &&
                    this.IsTest.Equals(input.IsTest))
                ) && 
                (
                    this.CardStateId == input.CardStateId ||
                    (this.CardStateId != null &&
                    this.CardStateId.Equals(input.CardStateId))
                ) && 
                (
                    this.CardState == input.CardState ||
                    (this.CardState != null &&
                    this.CardState.Equals(input.CardState))
                ) && 
                (
                    this.InstallmentPlan == input.InstallmentPlan ||
                    (this.InstallmentPlan != null &&
                    this.InstallmentPlan.Equals(input.InstallmentPlan))
                ) && 
                (
                    this.Processor == input.Processor ||
                    (this.Processor != null &&
                    this.Processor.Equals(input.Processor))
                ) && 
                (
                    this.ReAuthorizationPaymentGatewayTransactionLogs == input.ReAuthorizationPaymentGatewayTransactionLogs ||
                    this.ReAuthorizationPaymentGatewayTransactionLogs != null &&
                    this.ReAuthorizationPaymentGatewayTransactionLogs.SequenceEqual(input.ReAuthorizationPaymentGatewayTransactionLogs)
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallmentPlanId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanId.GetHashCode();
                if (this.ProcessorId != null)
                    hashCode = hashCode * 59 + this.ProcessorId.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ProcessDateTime != null)
                    hashCode = hashCode * 59 + this.ProcessDateTime.GetHashCode();
                if (this.IsTest != null)
                    hashCode = hashCode * 59 + this.IsTest.GetHashCode();
                if (this.CardStateId != null)
                    hashCode = hashCode * 59 + this.CardStateId.GetHashCode();
                if (this.CardState != null)
                    hashCode = hashCode * 59 + this.CardState.GetHashCode();
                if (this.InstallmentPlan != null)
                    hashCode = hashCode * 59 + this.InstallmentPlan.GetHashCode();
                if (this.Processor != null)
                    hashCode = hashCode * 59 + this.Processor.GetHashCode();
                if (this.ReAuthorizationPaymentGatewayTransactionLogs != null)
                    hashCode = hashCode * 59 + this.ReAuthorizationPaymentGatewayTransactionLogs.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
