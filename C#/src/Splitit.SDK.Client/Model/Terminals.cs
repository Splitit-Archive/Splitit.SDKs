/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Terminals
    /// </summary>
    [DataContract]
    public partial class Terminals :  IEquatable<Terminals>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Terminals" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Terminals() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Terminals" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="email">email.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="wizardTimeout">wizardTimeout (required).</param>
        /// <param name="merchantId">merchantId (required).</param>
        /// <param name="utcOffset">utcOffset (required).</param>
        /// <param name="isDisabled">isDisabled (required).</param>
        /// <param name="chargeBeforeShipping">chargeBeforeShipping (required).</param>
        /// <param name="terminalId">terminalId.</param>
        /// <param name="agentId">agentId (required).</param>
        /// <param name="canCancelInstallmentsPlan">canCancelInstallmentsPlan (required).</param>
        /// <param name="crmId">crmId.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="pendingShipmentReminderDays">pendingShipmentReminderDays (required).</param>
        /// <param name="businessUnitId">businessUnitId (required).</param>
        /// <param name="keepNonApprovedPlanLive">keepNonApprovedPlanLive (required).</param>
        /// <param name="useTestGateway">useTestGateway (required).</param>
        /// <param name="agent">agent.</param>
        /// <param name="businessUnit">businessUnit.</param>
        /// <param name="currency">currency.</param>
        /// <param name="merchant">merchant.</param>
        /// <param name="accountUpdaterSubscribersScopes">accountUpdaterSubscribersScopes.</param>
        /// <param name="installmentPlans">installmentPlans.</param>
        /// <param name="reconciliationReports">reconciliationReports.</param>
        /// <param name="stateLimitRuleDatas">stateLimitRuleDatas.</param>
        /// <param name="terminalCountries">terminalCountries.</param>
        /// <param name="terminalGatewayDatas">terminalGatewayDatas.</param>
        /// <param name="terminalKvps">terminalKvps.</param>
        /// <param name="continueExistingPlanWithOriginalGateway">continueExistingPlanWithOriginalGateway (required).</param>
        /// <param name="activeTerminalData">activeTerminalData.</param>
        /// <param name="chbDefaultAction">chbDefaultAction (required).</param>
        /// <param name="failureUnderFrozenInstallmentsPlan">failureUnderFrozenInstallmentsPlan (required).</param>
        /// <param name="refundUnderCancelation">refundUnderCancelation (required).</param>
        /// <param name="integrationType">integrationType (required).</param>
        /// <param name="testMode">testMode (required).</param>
        public Terminals(long? id = default(long?), string name = default(string), string email = default(string), string apiKey = default(string), int? wizardTimeout = default(int?), long? merchantId = default(long?), double? utcOffset = default(double?), bool? isDisabled = default(bool?), bool? chargeBeforeShipping = default(bool?), string terminalId = default(string), long? agentId = default(long?), bool? canCancelInstallmentsPlan = default(bool?), string crmId = default(string), long? currencyId = default(long?), int? pendingShipmentReminderDays = default(int?), long? businessUnitId = default(long?), long? keepNonApprovedPlanLive = default(long?), bool? useTestGateway = default(bool?), Agents agent = default(Agents), BusinessUnits businessUnit = default(BusinessUnits), Currencies currency = default(Currencies), Merchants merchant = default(Merchants), List<AccountUpdaterSubscribersScopes> accountUpdaterSubscribersScopes = default(List<AccountUpdaterSubscribersScopes>), List<InstallmentPlans> installmentPlans = default(List<InstallmentPlans>), List<ReconciliationReports> reconciliationReports = default(List<ReconciliationReports>), List<StateLimitRuleDatas> stateLimitRuleDatas = default(List<StateLimitRuleDatas>), List<TerminalCountries> terminalCountries = default(List<TerminalCountries>), List<TerminalGatewayDatas> terminalGatewayDatas = default(List<TerminalGatewayDatas>), List<TerminalKvps> terminalKvps = default(List<TerminalKvps>), bool? continueExistingPlanWithOriginalGateway = default(bool?), TerminalGatewayDatas activeTerminalData = default(TerminalGatewayDatas), ChbDefaultAction chbDefaultAction = default(ChbDefaultAction), FailureUnderFrozenInstallmentsPlan failureUnderFrozenInstallmentsPlan = default(FailureUnderFrozenInstallmentsPlan), RefundUnderCancelation refundUnderCancelation = default(RefundUnderCancelation), IntegrationType integrationType = default(IntegrationType), TestModes testMode = default(TestModes))
        {
            this.Id = id;
            this.WizardTimeout = wizardTimeout;
            this.MerchantId = merchantId;
            this.UtcOffset = utcOffset;
            this.IsDisabled = isDisabled;
            this.ChargeBeforeShipping = chargeBeforeShipping;
            this.AgentId = agentId;
            this.CanCancelInstallmentsPlan = canCancelInstallmentsPlan;
            this.PendingShipmentReminderDays = pendingShipmentReminderDays;
            this.BusinessUnitId = businessUnitId;
            this.KeepNonApprovedPlanLive = keepNonApprovedPlanLive;
            this.UseTestGateway = useTestGateway;
            this.ContinueExistingPlanWithOriginalGateway = continueExistingPlanWithOriginalGateway;
            this.ChbDefaultAction = chbDefaultAction;
            this.FailureUnderFrozenInstallmentsPlan = failureUnderFrozenInstallmentsPlan;
            this.RefundUnderCancelation = refundUnderCancelation;
            this.IntegrationType = integrationType;
            this.TestMode = testMode;
            this.Name = name;
            this.Email = email;
            this.ApiKey = apiKey;
            this.TerminalId = terminalId;
            this.CrmId = crmId;
            this.CurrencyId = currencyId;
            this.Agent = agent;
            this.BusinessUnit = businessUnit;
            this.Currency = currency;
            this.Merchant = merchant;
            this.AccountUpdaterSubscribersScopes = accountUpdaterSubscribersScopes;
            this.InstallmentPlans = installmentPlans;
            this.ReconciliationReports = reconciliationReports;
            this.StateLimitRuleDatas = stateLimitRuleDatas;
            this.TerminalCountries = terminalCountries;
            this.TerminalGatewayDatas = terminalGatewayDatas;
            this.TerminalKvps = terminalKvps;
            this.ActiveTerminalData = activeTerminalData;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="ApiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets WizardTimeout
        /// </summary>
        [DataMember(Name="WizardTimeout", EmitDefaultValue=false)]
        public int? WizardTimeout { get; set; }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="MerchantId", EmitDefaultValue=false)]
        public long? MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets UtcOffset
        /// </summary>
        [DataMember(Name="UtcOffset", EmitDefaultValue=false)]
        public double? UtcOffset { get; set; }

        /// <summary>
        /// Gets or Sets IsDisabled
        /// </summary>
        [DataMember(Name="IsDisabled", EmitDefaultValue=false)]
        public bool? IsDisabled { get; set; }

        /// <summary>
        /// Gets or Sets ChargeBeforeShipping
        /// </summary>
        [DataMember(Name="ChargeBeforeShipping", EmitDefaultValue=false)]
        public bool? ChargeBeforeShipping { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="TerminalId", EmitDefaultValue=false)]
        public string TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets AgentId
        /// </summary>
        [DataMember(Name="AgentId", EmitDefaultValue=false)]
        public long? AgentId { get; set; }

        /// <summary>
        /// Gets or Sets CanCancelInstallmentsPlan
        /// </summary>
        [DataMember(Name="CanCancelInstallmentsPlan", EmitDefaultValue=false)]
        public bool? CanCancelInstallmentsPlan { get; set; }

        /// <summary>
        /// Gets or Sets CrmId
        /// </summary>
        [DataMember(Name="CrmId", EmitDefaultValue=false)]
        public string CrmId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="CurrencyId", EmitDefaultValue=false)]
        public long? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets PendingShipmentReminderDays
        /// </summary>
        [DataMember(Name="PendingShipmentReminderDays", EmitDefaultValue=false)]
        public int? PendingShipmentReminderDays { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="BusinessUnitId", EmitDefaultValue=false)]
        public long? BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets KeepNonApprovedPlanLive
        /// </summary>
        [DataMember(Name="KeepNonApprovedPlanLive", EmitDefaultValue=false)]
        public long? KeepNonApprovedPlanLive { get; set; }

        /// <summary>
        /// Gets or Sets UseTestGateway
        /// </summary>
        [DataMember(Name="UseTestGateway", EmitDefaultValue=false)]
        public bool? UseTestGateway { get; set; }

        /// <summary>
        /// Gets or Sets Agent
        /// </summary>
        [DataMember(Name="Agent", EmitDefaultValue=false)]
        public Agents Agent { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="BusinessUnit", EmitDefaultValue=false)]
        public BusinessUnits BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public Currencies Currency { get; set; }

        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name="Merchant", EmitDefaultValue=false)]
        public Merchants Merchant { get; set; }

        /// <summary>
        /// Gets or Sets AccountUpdaterSubscribersScopes
        /// </summary>
        [DataMember(Name="AccountUpdaterSubscribersScopes", EmitDefaultValue=false)]
        public List<AccountUpdaterSubscribersScopes> AccountUpdaterSubscribersScopes { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlans
        /// </summary>
        [DataMember(Name="InstallmentPlans", EmitDefaultValue=false)]
        public List<InstallmentPlans> InstallmentPlans { get; set; }

        /// <summary>
        /// Gets or Sets ReconciliationReports
        /// </summary>
        [DataMember(Name="ReconciliationReports", EmitDefaultValue=false)]
        public List<ReconciliationReports> ReconciliationReports { get; set; }

        /// <summary>
        /// Gets or Sets StateLimitRuleDatas
        /// </summary>
        [DataMember(Name="StateLimitRuleDatas", EmitDefaultValue=false)]
        public List<StateLimitRuleDatas> StateLimitRuleDatas { get; set; }

        /// <summary>
        /// Gets or Sets TerminalCountries
        /// </summary>
        [DataMember(Name="TerminalCountries", EmitDefaultValue=false)]
        public List<TerminalCountries> TerminalCountries { get; set; }

        /// <summary>
        /// Gets or Sets TerminalGatewayDatas
        /// </summary>
        [DataMember(Name="TerminalGatewayDatas", EmitDefaultValue=false)]
        public List<TerminalGatewayDatas> TerminalGatewayDatas { get; set; }

        /// <summary>
        /// Gets or Sets TerminalKvps
        /// </summary>
        [DataMember(Name="TerminalKvps", EmitDefaultValue=false)]
        public List<TerminalKvps> TerminalKvps { get; set; }

        /// <summary>
        /// Gets or Sets ContinueExistingPlanWithOriginalGateway
        /// </summary>
        [DataMember(Name="ContinueExistingPlanWithOriginalGateway", EmitDefaultValue=false)]
        public bool? ContinueExistingPlanWithOriginalGateway { get; set; }

        /// <summary>
        /// Gets or Sets ActiveTerminalData
        /// </summary>
        [DataMember(Name="ActiveTerminalData", EmitDefaultValue=false)]
        public TerminalGatewayDatas ActiveTerminalData { get; set; }

        /// <summary>
        /// Gets or Sets ChbDefaultAction
        /// </summary>
        [DataMember(Name="ChbDefaultAction", EmitDefaultValue=false)]
        public ChbDefaultAction ChbDefaultAction { get; set; }

        /// <summary>
        /// Gets or Sets FailureUnderFrozenInstallmentsPlan
        /// </summary>
        [DataMember(Name="FailureUnderFrozenInstallmentsPlan", EmitDefaultValue=false)]
        public FailureUnderFrozenInstallmentsPlan FailureUnderFrozenInstallmentsPlan { get; set; }

        /// <summary>
        /// Gets or Sets RefundUnderCancelation
        /// </summary>
        [DataMember(Name="RefundUnderCancelation", EmitDefaultValue=false)]
        public RefundUnderCancelation RefundUnderCancelation { get; set; }

        /// <summary>
        /// Gets or Sets IntegrationType
        /// </summary>
        [DataMember(Name="IntegrationType", EmitDefaultValue=false)]
        public IntegrationType IntegrationType { get; set; }

        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name="TestMode", EmitDefaultValue=false)]
        public TestModes TestMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Terminals {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  WizardTimeout: ").Append(WizardTimeout).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  UtcOffset: ").Append(UtcOffset).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  ChargeBeforeShipping: ").Append(ChargeBeforeShipping).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  CanCancelInstallmentsPlan: ").Append(CanCancelInstallmentsPlan).Append("\n");
            sb.Append("  CrmId: ").Append(CrmId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  PendingShipmentReminderDays: ").Append(PendingShipmentReminderDays).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  KeepNonApprovedPlanLive: ").Append(KeepNonApprovedPlanLive).Append("\n");
            sb.Append("  UseTestGateway: ").Append(UseTestGateway).Append("\n");
            sb.Append("  Agent: ").Append(Agent).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  AccountUpdaterSubscribersScopes: ").Append(AccountUpdaterSubscribersScopes).Append("\n");
            sb.Append("  InstallmentPlans: ").Append(InstallmentPlans).Append("\n");
            sb.Append("  ReconciliationReports: ").Append(ReconciliationReports).Append("\n");
            sb.Append("  StateLimitRuleDatas: ").Append(StateLimitRuleDatas).Append("\n");
            sb.Append("  TerminalCountries: ").Append(TerminalCountries).Append("\n");
            sb.Append("  TerminalGatewayDatas: ").Append(TerminalGatewayDatas).Append("\n");
            sb.Append("  TerminalKvps: ").Append(TerminalKvps).Append("\n");
            sb.Append("  ContinueExistingPlanWithOriginalGateway: ").Append(ContinueExistingPlanWithOriginalGateway).Append("\n");
            sb.Append("  ActiveTerminalData: ").Append(ActiveTerminalData).Append("\n");
            sb.Append("  ChbDefaultAction: ").Append(ChbDefaultAction).Append("\n");
            sb.Append("  FailureUnderFrozenInstallmentsPlan: ").Append(FailureUnderFrozenInstallmentsPlan).Append("\n");
            sb.Append("  RefundUnderCancelation: ").Append(RefundUnderCancelation).Append("\n");
            sb.Append("  IntegrationType: ").Append(IntegrationType).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Terminals);
        }

        /// <summary>
        /// Returns true if Terminals instances are equal
        /// </summary>
        /// <param name="input">Instance of Terminals to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Terminals input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.WizardTimeout == input.WizardTimeout ||
                    (this.WizardTimeout != null &&
                    this.WizardTimeout.Equals(input.WizardTimeout))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && 
                (
                    this.UtcOffset == input.UtcOffset ||
                    (this.UtcOffset != null &&
                    this.UtcOffset.Equals(input.UtcOffset))
                ) && 
                (
                    this.IsDisabled == input.IsDisabled ||
                    (this.IsDisabled != null &&
                    this.IsDisabled.Equals(input.IsDisabled))
                ) && 
                (
                    this.ChargeBeforeShipping == input.ChargeBeforeShipping ||
                    (this.ChargeBeforeShipping != null &&
                    this.ChargeBeforeShipping.Equals(input.ChargeBeforeShipping))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                ) && 
                (
                    this.CanCancelInstallmentsPlan == input.CanCancelInstallmentsPlan ||
                    (this.CanCancelInstallmentsPlan != null &&
                    this.CanCancelInstallmentsPlan.Equals(input.CanCancelInstallmentsPlan))
                ) && 
                (
                    this.CrmId == input.CrmId ||
                    (this.CrmId != null &&
                    this.CrmId.Equals(input.CrmId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.PendingShipmentReminderDays == input.PendingShipmentReminderDays ||
                    (this.PendingShipmentReminderDays != null &&
                    this.PendingShipmentReminderDays.Equals(input.PendingShipmentReminderDays))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.KeepNonApprovedPlanLive == input.KeepNonApprovedPlanLive ||
                    (this.KeepNonApprovedPlanLive != null &&
                    this.KeepNonApprovedPlanLive.Equals(input.KeepNonApprovedPlanLive))
                ) && 
                (
                    this.UseTestGateway == input.UseTestGateway ||
                    (this.UseTestGateway != null &&
                    this.UseTestGateway.Equals(input.UseTestGateway))
                ) && 
                (
                    this.Agent == input.Agent ||
                    (this.Agent != null &&
                    this.Agent.Equals(input.Agent))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Merchant == input.Merchant ||
                    (this.Merchant != null &&
                    this.Merchant.Equals(input.Merchant))
                ) && 
                (
                    this.AccountUpdaterSubscribersScopes == input.AccountUpdaterSubscribersScopes ||
                    this.AccountUpdaterSubscribersScopes != null &&
                    this.AccountUpdaterSubscribersScopes.SequenceEqual(input.AccountUpdaterSubscribersScopes)
                ) && 
                (
                    this.InstallmentPlans == input.InstallmentPlans ||
                    this.InstallmentPlans != null &&
                    this.InstallmentPlans.SequenceEqual(input.InstallmentPlans)
                ) && 
                (
                    this.ReconciliationReports == input.ReconciliationReports ||
                    this.ReconciliationReports != null &&
                    this.ReconciliationReports.SequenceEqual(input.ReconciliationReports)
                ) && 
                (
                    this.StateLimitRuleDatas == input.StateLimitRuleDatas ||
                    this.StateLimitRuleDatas != null &&
                    this.StateLimitRuleDatas.SequenceEqual(input.StateLimitRuleDatas)
                ) && 
                (
                    this.TerminalCountries == input.TerminalCountries ||
                    this.TerminalCountries != null &&
                    this.TerminalCountries.SequenceEqual(input.TerminalCountries)
                ) && 
                (
                    this.TerminalGatewayDatas == input.TerminalGatewayDatas ||
                    this.TerminalGatewayDatas != null &&
                    this.TerminalGatewayDatas.SequenceEqual(input.TerminalGatewayDatas)
                ) && 
                (
                    this.TerminalKvps == input.TerminalKvps ||
                    this.TerminalKvps != null &&
                    this.TerminalKvps.SequenceEqual(input.TerminalKvps)
                ) && 
                (
                    this.ContinueExistingPlanWithOriginalGateway == input.ContinueExistingPlanWithOriginalGateway ||
                    (this.ContinueExistingPlanWithOriginalGateway != null &&
                    this.ContinueExistingPlanWithOriginalGateway.Equals(input.ContinueExistingPlanWithOriginalGateway))
                ) && 
                (
                    this.ActiveTerminalData == input.ActiveTerminalData ||
                    (this.ActiveTerminalData != null &&
                    this.ActiveTerminalData.Equals(input.ActiveTerminalData))
                ) && 
                (
                    this.ChbDefaultAction == input.ChbDefaultAction ||
                    (this.ChbDefaultAction != null &&
                    this.ChbDefaultAction.Equals(input.ChbDefaultAction))
                ) && 
                (
                    this.FailureUnderFrozenInstallmentsPlan == input.FailureUnderFrozenInstallmentsPlan ||
                    (this.FailureUnderFrozenInstallmentsPlan != null &&
                    this.FailureUnderFrozenInstallmentsPlan.Equals(input.FailureUnderFrozenInstallmentsPlan))
                ) && 
                (
                    this.RefundUnderCancelation == input.RefundUnderCancelation ||
                    (this.RefundUnderCancelation != null &&
                    this.RefundUnderCancelation.Equals(input.RefundUnderCancelation))
                ) && 
                (
                    this.IntegrationType == input.IntegrationType ||
                    (this.IntegrationType != null &&
                    this.IntegrationType.Equals(input.IntegrationType))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.WizardTimeout != null)
                    hashCode = hashCode * 59 + this.WizardTimeout.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.UtcOffset != null)
                    hashCode = hashCode * 59 + this.UtcOffset.GetHashCode();
                if (this.IsDisabled != null)
                    hashCode = hashCode * 59 + this.IsDisabled.GetHashCode();
                if (this.ChargeBeforeShipping != null)
                    hashCode = hashCode * 59 + this.ChargeBeforeShipping.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.AgentId != null)
                    hashCode = hashCode * 59 + this.AgentId.GetHashCode();
                if (this.CanCancelInstallmentsPlan != null)
                    hashCode = hashCode * 59 + this.CanCancelInstallmentsPlan.GetHashCode();
                if (this.CrmId != null)
                    hashCode = hashCode * 59 + this.CrmId.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.PendingShipmentReminderDays != null)
                    hashCode = hashCode * 59 + this.PendingShipmentReminderDays.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.KeepNonApprovedPlanLive != null)
                    hashCode = hashCode * 59 + this.KeepNonApprovedPlanLive.GetHashCode();
                if (this.UseTestGateway != null)
                    hashCode = hashCode * 59 + this.UseTestGateway.GetHashCode();
                if (this.Agent != null)
                    hashCode = hashCode * 59 + this.Agent.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Merchant != null)
                    hashCode = hashCode * 59 + this.Merchant.GetHashCode();
                if (this.AccountUpdaterSubscribersScopes != null)
                    hashCode = hashCode * 59 + this.AccountUpdaterSubscribersScopes.GetHashCode();
                if (this.InstallmentPlans != null)
                    hashCode = hashCode * 59 + this.InstallmentPlans.GetHashCode();
                if (this.ReconciliationReports != null)
                    hashCode = hashCode * 59 + this.ReconciliationReports.GetHashCode();
                if (this.StateLimitRuleDatas != null)
                    hashCode = hashCode * 59 + this.StateLimitRuleDatas.GetHashCode();
                if (this.TerminalCountries != null)
                    hashCode = hashCode * 59 + this.TerminalCountries.GetHashCode();
                if (this.TerminalGatewayDatas != null)
                    hashCode = hashCode * 59 + this.TerminalGatewayDatas.GetHashCode();
                if (this.TerminalKvps != null)
                    hashCode = hashCode * 59 + this.TerminalKvps.GetHashCode();
                if (this.ContinueExistingPlanWithOriginalGateway != null)
                    hashCode = hashCode * 59 + this.ContinueExistingPlanWithOriginalGateway.GetHashCode();
                if (this.ActiveTerminalData != null)
                    hashCode = hashCode * 59 + this.ActiveTerminalData.GetHashCode();
                if (this.ChbDefaultAction != null)
                    hashCode = hashCode * 59 + this.ChbDefaultAction.GetHashCode();
                if (this.FailureUnderFrozenInstallmentsPlan != null)
                    hashCode = hashCode * 59 + this.FailureUnderFrozenInstallmentsPlan.GetHashCode();
                if (this.RefundUnderCancelation != null)
                    hashCode = hashCode * 59 + this.RefundUnderCancelation.GetHashCode();
                if (this.IntegrationType != null)
                    hashCode = hashCode * 59 + this.IntegrationType.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                return hashCode;
            }
        }
    }

}
