/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// SplititJobDefinitions
    /// </summary>
    [DataContract]
    public partial class SplititJobDefinitions :  IEquatable<SplititJobDefinitions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SplititJobDefinitions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SplititJobDefinitions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SplititJobDefinitions" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="code">code.</param>
        /// <param name="name">name.</param>
        /// <param name="scopeCode">scopeCode.</param>
        /// <param name="cronExpression">cronExpression.</param>
        /// <param name="parameterGroupId">parameterGroupId.</param>
        /// <param name="parameterGroup">parameterGroup.</param>
        /// <param name="userJobSubscriptions">userJobSubscriptions.</param>
        public SplititJobDefinitions(long? id = default(long?), string code = default(string), string name = default(string), string scopeCode = default(string), string cronExpression = default(string), long? parameterGroupId = default(long?), ParameterGroups parameterGroup = default(ParameterGroups), List<UserJobSubscriptions> userJobSubscriptions = default(List<UserJobSubscriptions>))
        {
            this.Id = id;
            this.Code = code;
            this.Name = name;
            this.ScopeCode = scopeCode;
            this.CronExpression = cronExpression;
            this.ParameterGroupId = parameterGroupId;
            this.ParameterGroup = parameterGroup;
            this.UserJobSubscriptions = userJobSubscriptions;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ScopeCode
        /// </summary>
        [DataMember(Name="ScopeCode", EmitDefaultValue=false)]
        public string ScopeCode { get; set; }

        /// <summary>
        /// Gets or Sets CronExpression
        /// </summary>
        [DataMember(Name="CronExpression", EmitDefaultValue=false)]
        public string CronExpression { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroupId
        /// </summary>
        [DataMember(Name="ParameterGroupId", EmitDefaultValue=false)]
        public long? ParameterGroupId { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroup
        /// </summary>
        [DataMember(Name="ParameterGroup", EmitDefaultValue=false)]
        public ParameterGroups ParameterGroup { get; set; }

        /// <summary>
        /// Gets or Sets UserJobSubscriptions
        /// </summary>
        [DataMember(Name="UserJobSubscriptions", EmitDefaultValue=false)]
        public List<UserJobSubscriptions> UserJobSubscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SplititJobDefinitions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScopeCode: ").Append(ScopeCode).Append("\n");
            sb.Append("  CronExpression: ").Append(CronExpression).Append("\n");
            sb.Append("  ParameterGroupId: ").Append(ParameterGroupId).Append("\n");
            sb.Append("  ParameterGroup: ").Append(ParameterGroup).Append("\n");
            sb.Append("  UserJobSubscriptions: ").Append(UserJobSubscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SplititJobDefinitions);
        }

        /// <summary>
        /// Returns true if SplititJobDefinitions instances are equal
        /// </summary>
        /// <param name="input">Instance of SplititJobDefinitions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SplititJobDefinitions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ScopeCode == input.ScopeCode ||
                    (this.ScopeCode != null &&
                    this.ScopeCode.Equals(input.ScopeCode))
                ) && 
                (
                    this.CronExpression == input.CronExpression ||
                    (this.CronExpression != null &&
                    this.CronExpression.Equals(input.CronExpression))
                ) && 
                (
                    this.ParameterGroupId == input.ParameterGroupId ||
                    (this.ParameterGroupId != null &&
                    this.ParameterGroupId.Equals(input.ParameterGroupId))
                ) && 
                (
                    this.ParameterGroup == input.ParameterGroup ||
                    (this.ParameterGroup != null &&
                    this.ParameterGroup.Equals(input.ParameterGroup))
                ) && 
                (
                    this.UserJobSubscriptions == input.UserJobSubscriptions ||
                    this.UserJobSubscriptions != null &&
                    this.UserJobSubscriptions.SequenceEqual(input.UserJobSubscriptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ScopeCode != null)
                    hashCode = hashCode * 59 + this.ScopeCode.GetHashCode();
                if (this.CronExpression != null)
                    hashCode = hashCode * 59 + this.CronExpression.GetHashCode();
                if (this.ParameterGroupId != null)
                    hashCode = hashCode * 59 + this.ParameterGroupId.GetHashCode();
                if (this.ParameterGroup != null)
                    hashCode = hashCode * 59 + this.ParameterGroup.GetHashCode();
                if (this.UserJobSubscriptions != null)
                    hashCode = hashCode * 59 + this.UserJobSubscriptions.GetHashCode();
                return hashCode;
            }
        }
    }

}
