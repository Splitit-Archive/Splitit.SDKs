/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FraudDetectionLogs
    /// </summary>
    [DataContract]
    public partial class FraudDetectionLogs :  IEquatable<FraudDetectionLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudDetectionLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FraudDetectionLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudDetectionLogs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="installmentPlanId">installmentPlanId (required).</param>
        /// <param name="fullLog">fullLog.</param>
        /// <param name="providerResultDescription">providerResultDescription.</param>
        /// <param name="providerResultCode">providerResultCode.</param>
        /// <param name="providerReferenceId">providerReferenceId.</param>
        /// <param name="timeLapse">timeLapse (required).</param>
        /// <param name="cardId">cardId (required).</param>
        /// <param name="provider">provider.</param>
        /// <param name="paymentGateWayTransactionLogId">paymentGateWayTransactionLogId.</param>
        /// <param name="card">card.</param>
        /// <param name="installmentPlan">installmentPlan.</param>
        /// <param name="paymentGateWayTransactionLog">paymentGateWayTransactionLog.</param>
        /// <param name="result">result (required).</param>
        public FraudDetectionLogs(long? id = default(long?), long? installmentPlanId = default(long?), string fullLog = default(string), string providerResultDescription = default(string), string providerResultCode = default(string), string providerReferenceId = default(string), long? timeLapse = default(long?), long? cardId = default(long?), string provider = default(string), long? paymentGateWayTransactionLogId = default(long?), Cards card = default(Cards), InstallmentPlans installmentPlan = default(InstallmentPlans), PaymentGatewayTransactionLogs paymentGateWayTransactionLog = default(PaymentGatewayTransactionLogs), FraudCheckResult result = default(FraudCheckResult))
        {
            this.Id = id;
            this.InstallmentPlanId = installmentPlanId;
            this.TimeLapse = timeLapse;
            this.CardId = cardId;
            this.Result = result;
            this.FullLog = fullLog;
            this.ProviderResultDescription = providerResultDescription;
            this.ProviderResultCode = providerResultCode;
            this.ProviderReferenceId = providerReferenceId;
            this.Provider = provider;
            this.PaymentGateWayTransactionLogId = paymentGateWayTransactionLogId;
            this.Card = card;
            this.InstallmentPlan = installmentPlan;
            this.PaymentGateWayTransactionLog = paymentGateWayTransactionLog;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanId
        /// </summary>
        [DataMember(Name="InstallmentPlanId", EmitDefaultValue=false)]
        public long? InstallmentPlanId { get; set; }

        /// <summary>
        /// Gets or Sets FullLog
        /// </summary>
        [DataMember(Name="FullLog", EmitDefaultValue=false)]
        public string FullLog { get; set; }

        /// <summary>
        /// Gets or Sets ProviderResultDescription
        /// </summary>
        [DataMember(Name="ProviderResultDescription", EmitDefaultValue=false)]
        public string ProviderResultDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProviderResultCode
        /// </summary>
        [DataMember(Name="ProviderResultCode", EmitDefaultValue=false)]
        public string ProviderResultCode { get; set; }

        /// <summary>
        /// Gets or Sets ProviderReferenceId
        /// </summary>
        [DataMember(Name="ProviderReferenceId", EmitDefaultValue=false)]
        public string ProviderReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets TimeLapse
        /// </summary>
        [DataMember(Name="TimeLapse", EmitDefaultValue=false)]
        public long? TimeLapse { get; set; }

        /// <summary>
        /// Gets or Sets CardId
        /// </summary>
        [DataMember(Name="CardId", EmitDefaultValue=false)]
        public long? CardId { get; set; }

        /// <summary>
        /// Gets or Sets Provider
        /// </summary>
        [DataMember(Name="Provider", EmitDefaultValue=false)]
        public string Provider { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGateWayTransactionLogId
        /// </summary>
        [DataMember(Name="PaymentGateWayTransactionLogId", EmitDefaultValue=false)]
        public long? PaymentGateWayTransactionLogId { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="Card", EmitDefaultValue=false)]
        public Cards Card { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlan
        /// </summary>
        [DataMember(Name="InstallmentPlan", EmitDefaultValue=false)]
        public InstallmentPlans InstallmentPlan { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGateWayTransactionLog
        /// </summary>
        [DataMember(Name="PaymentGateWayTransactionLog", EmitDefaultValue=false)]
        public PaymentGatewayTransactionLogs PaymentGateWayTransactionLog { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public FraudCheckResult Result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FraudDetectionLogs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallmentPlanId: ").Append(InstallmentPlanId).Append("\n");
            sb.Append("  FullLog: ").Append(FullLog).Append("\n");
            sb.Append("  ProviderResultDescription: ").Append(ProviderResultDescription).Append("\n");
            sb.Append("  ProviderResultCode: ").Append(ProviderResultCode).Append("\n");
            sb.Append("  ProviderReferenceId: ").Append(ProviderReferenceId).Append("\n");
            sb.Append("  TimeLapse: ").Append(TimeLapse).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  PaymentGateWayTransactionLogId: ").Append(PaymentGateWayTransactionLogId).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  InstallmentPlan: ").Append(InstallmentPlan).Append("\n");
            sb.Append("  PaymentGateWayTransactionLog: ").Append(PaymentGateWayTransactionLog).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudDetectionLogs);
        }

        /// <summary>
        /// Returns true if FraudDetectionLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudDetectionLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudDetectionLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallmentPlanId == input.InstallmentPlanId ||
                    (this.InstallmentPlanId != null &&
                    this.InstallmentPlanId.Equals(input.InstallmentPlanId))
                ) && 
                (
                    this.FullLog == input.FullLog ||
                    (this.FullLog != null &&
                    this.FullLog.Equals(input.FullLog))
                ) && 
                (
                    this.ProviderResultDescription == input.ProviderResultDescription ||
                    (this.ProviderResultDescription != null &&
                    this.ProviderResultDescription.Equals(input.ProviderResultDescription))
                ) && 
                (
                    this.ProviderResultCode == input.ProviderResultCode ||
                    (this.ProviderResultCode != null &&
                    this.ProviderResultCode.Equals(input.ProviderResultCode))
                ) && 
                (
                    this.ProviderReferenceId == input.ProviderReferenceId ||
                    (this.ProviderReferenceId != null &&
                    this.ProviderReferenceId.Equals(input.ProviderReferenceId))
                ) && 
                (
                    this.TimeLapse == input.TimeLapse ||
                    (this.TimeLapse != null &&
                    this.TimeLapse.Equals(input.TimeLapse))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.PaymentGateWayTransactionLogId == input.PaymentGateWayTransactionLogId ||
                    (this.PaymentGateWayTransactionLogId != null &&
                    this.PaymentGateWayTransactionLogId.Equals(input.PaymentGateWayTransactionLogId))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.InstallmentPlan == input.InstallmentPlan ||
                    (this.InstallmentPlan != null &&
                    this.InstallmentPlan.Equals(input.InstallmentPlan))
                ) && 
                (
                    this.PaymentGateWayTransactionLog == input.PaymentGateWayTransactionLog ||
                    (this.PaymentGateWayTransactionLog != null &&
                    this.PaymentGateWayTransactionLog.Equals(input.PaymentGateWayTransactionLog))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallmentPlanId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanId.GetHashCode();
                if (this.FullLog != null)
                    hashCode = hashCode * 59 + this.FullLog.GetHashCode();
                if (this.ProviderResultDescription != null)
                    hashCode = hashCode * 59 + this.ProviderResultDescription.GetHashCode();
                if (this.ProviderResultCode != null)
                    hashCode = hashCode * 59 + this.ProviderResultCode.GetHashCode();
                if (this.ProviderReferenceId != null)
                    hashCode = hashCode * 59 + this.ProviderReferenceId.GetHashCode();
                if (this.TimeLapse != null)
                    hashCode = hashCode * 59 + this.TimeLapse.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.Provider != null)
                    hashCode = hashCode * 59 + this.Provider.GetHashCode();
                if (this.PaymentGateWayTransactionLogId != null)
                    hashCode = hashCode * 59 + this.PaymentGateWayTransactionLogId.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.InstallmentPlan != null)
                    hashCode = hashCode * 59 + this.InstallmentPlan.GetHashCode();
                if (this.PaymentGateWayTransactionLog != null)
                    hashCode = hashCode * 59 + this.PaymentGateWayTransactionLog.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }
    }

}
