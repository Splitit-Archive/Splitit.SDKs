/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Currencies
    /// </summary>
    [DataContract]
    public partial class Currencies :  IEquatable<Currencies>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Currencies" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Currencies() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Currencies" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="currencyCode">currencyCode (required).</param>
        /// <param name="currencyName">currencyName (required).</param>
        /// <param name="currencySymbol">currencySymbol (required).</param>
        /// <param name="currencyIsoNumber">currencyIsoNumber (required).</param>
        /// <param name="decimalPlaces">decimalPlaces (required).</param>
        public Currencies(long? id = default(long?), string currencyCode = default(string), string currencyName = default(string), string currencySymbol = default(string), string currencyIsoNumber = default(string), int? decimalPlaces = default(int?))
        {
            this.Id = id;
            this.CurrencyCode = currencyCode;
            this.CurrencyName = currencyName;
            this.CurrencySymbol = currencySymbol;
            this.CurrencyIsoNumber = currencyIsoNumber;
            this.DecimalPlaces = decimalPlaces;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyName
        /// </summary>
        [DataMember(Name="CurrencyName", EmitDefaultValue=false)]
        public string CurrencyName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencySymbol
        /// </summary>
        [DataMember(Name="CurrencySymbol", EmitDefaultValue=false)]
        public string CurrencySymbol { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyIsoNumber
        /// </summary>
        [DataMember(Name="CurrencyIsoNumber", EmitDefaultValue=false)]
        public string CurrencyIsoNumber { get; set; }

        /// <summary>
        /// Gets or Sets DecimalPlaces
        /// </summary>
        [DataMember(Name="DecimalPlaces", EmitDefaultValue=false)]
        public int? DecimalPlaces { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Currencies {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CurrencyName: ").Append(CurrencyName).Append("\n");
            sb.Append("  CurrencySymbol: ").Append(CurrencySymbol).Append("\n");
            sb.Append("  CurrencyIsoNumber: ").Append(CurrencyIsoNumber).Append("\n");
            sb.Append("  DecimalPlaces: ").Append(DecimalPlaces).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Currencies);
        }

        /// <summary>
        /// Returns true if Currencies instances are equal
        /// </summary>
        /// <param name="input">Instance of Currencies to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Currencies input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.CurrencyName == input.CurrencyName ||
                    (this.CurrencyName != null &&
                    this.CurrencyName.Equals(input.CurrencyName))
                ) && 
                (
                    this.CurrencySymbol == input.CurrencySymbol ||
                    (this.CurrencySymbol != null &&
                    this.CurrencySymbol.Equals(input.CurrencySymbol))
                ) && 
                (
                    this.CurrencyIsoNumber == input.CurrencyIsoNumber ||
                    (this.CurrencyIsoNumber != null &&
                    this.CurrencyIsoNumber.Equals(input.CurrencyIsoNumber))
                ) && 
                (
                    this.DecimalPlaces == input.DecimalPlaces ||
                    (this.DecimalPlaces != null &&
                    this.DecimalPlaces.Equals(input.DecimalPlaces))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.CurrencyName != null)
                    hashCode = hashCode * 59 + this.CurrencyName.GetHashCode();
                if (this.CurrencySymbol != null)
                    hashCode = hashCode * 59 + this.CurrencySymbol.GetHashCode();
                if (this.CurrencyIsoNumber != null)
                    hashCode = hashCode * 59 + this.CurrencyIsoNumber.GetHashCode();
                if (this.DecimalPlaces != null)
                    hashCode = hashCode * 59 + this.DecimalPlaces.GetHashCode();
                return hashCode;
            }
        }
    }

}
