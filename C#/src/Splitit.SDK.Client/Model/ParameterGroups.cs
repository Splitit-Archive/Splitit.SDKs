/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ParameterGroups
    /// </summary>
    [DataContract]
    public partial class ParameterGroups :  IEquatable<ParameterGroups>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterGroups" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ParameterGroups() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ParameterGroups" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="tokens">tokens.</param>
        /// <param name="merchants">merchants.</param>
        /// <param name="parameters">parameters.</param>
        /// <param name="splititJobDefinitions">splititJobDefinitions.</param>
        public ParameterGroups(long? id = default(long?), List<Tokens> tokens = default(List<Tokens>), List<Merchants> merchants = default(List<Merchants>), List<Parameters> parameters = default(List<Parameters>), List<SplititJobDefinitions> splititJobDefinitions = default(List<SplititJobDefinitions>))
        {
            this.Id = id;
            this.Tokens = tokens;
            this.Merchants = merchants;
            this.Parameters = parameters;
            this.SplititJobDefinitions = splititJobDefinitions;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Tokens
        /// </summary>
        [DataMember(Name="Tokens", EmitDefaultValue=false)]
        public List<Tokens> Tokens { get; set; }

        /// <summary>
        /// Gets or Sets Merchants
        /// </summary>
        [DataMember(Name="Merchants", EmitDefaultValue=false)]
        public List<Merchants> Merchants { get; set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [DataMember(Name="Parameters", EmitDefaultValue=false)]
        public List<Parameters> Parameters { get; set; }

        /// <summary>
        /// Gets or Sets SplititJobDefinitions
        /// </summary>
        [DataMember(Name="SplititJobDefinitions", EmitDefaultValue=false)]
        public List<SplititJobDefinitions> SplititJobDefinitions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParameterGroups {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Tokens: ").Append(Tokens).Append("\n");
            sb.Append("  Merchants: ").Append(Merchants).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  SplititJobDefinitions: ").Append(SplititJobDefinitions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParameterGroups);
        }

        /// <summary>
        /// Returns true if ParameterGroups instances are equal
        /// </summary>
        /// <param name="input">Instance of ParameterGroups to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParameterGroups input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Tokens == input.Tokens ||
                    this.Tokens != null &&
                    this.Tokens.SequenceEqual(input.Tokens)
                ) && 
                (
                    this.Merchants == input.Merchants ||
                    this.Merchants != null &&
                    this.Merchants.SequenceEqual(input.Merchants)
                ) && 
                (
                    this.Parameters == input.Parameters ||
                    this.Parameters != null &&
                    this.Parameters.SequenceEqual(input.Parameters)
                ) && 
                (
                    this.SplititJobDefinitions == input.SplititJobDefinitions ||
                    this.SplititJobDefinitions != null &&
                    this.SplititJobDefinitions.SequenceEqual(input.SplititJobDefinitions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Tokens != null)
                    hashCode = hashCode * 59 + this.Tokens.GetHashCode();
                if (this.Merchants != null)
                    hashCode = hashCode * 59 + this.Merchants.GetHashCode();
                if (this.Parameters != null)
                    hashCode = hashCode * 59 + this.Parameters.GetHashCode();
                if (this.SplititJobDefinitions != null)
                    hashCode = hashCode * 59 + this.SplititJobDefinitions.GetHashCode();
                return hashCode;
            }
        }
    }

}
