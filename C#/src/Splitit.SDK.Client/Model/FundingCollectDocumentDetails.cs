/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FundingCollectDocumentDetails
    /// </summary>
    [DataContract]
    public partial class FundingCollectDocumentDetails :  IEquatable<FundingCollectDocumentDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingCollectDocumentDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundingCollectDocumentDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingCollectDocumentDetails" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="collectDocumentId">collectDocumentId (required).</param>
        /// <param name="installmentId">installmentId.</param>
        /// <param name="planId">planId.</param>
        /// <param name="collectDocument">collectDocument.</param>
        /// <param name="installment">installment.</param>
        /// <param name="plan">plan.</param>
        /// <param name="fundingPayDocumentDetails">fundingPayDocumentDetails.</param>
        /// <param name="transferReason">transferReason (required).</param>
        public FundingCollectDocumentDetails(long? id = default(long?), decimal? amount = default(decimal?), long? collectDocumentId = default(long?), long? installmentId = default(long?), long? planId = default(long?), CollectDocuments collectDocument = default(CollectDocuments), Installments installment = default(Installments), InstallmentPlans plan = default(InstallmentPlans), List<FundingPayDocumentDetails> fundingPayDocumentDetails = default(List<FundingPayDocumentDetails>), FundingTransferReason transferReason = default(FundingTransferReason))
        {
            this.Id = id;
            this.Amount = amount;
            this.CollectDocumentId = collectDocumentId;
            this.TransferReason = transferReason;
            this.InstallmentId = installmentId;
            this.PlanId = planId;
            this.CollectDocument = collectDocument;
            this.Installment = installment;
            this.Plan = plan;
            this.FundingPayDocumentDetails = fundingPayDocumentDetails;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets CollectDocumentId
        /// </summary>
        [DataMember(Name="CollectDocumentId", EmitDefaultValue=false)]
        public long? CollectDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentId
        /// </summary>
        [DataMember(Name="InstallmentId", EmitDefaultValue=false)]
        public long? InstallmentId { get; set; }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        [DataMember(Name="PlanId", EmitDefaultValue=false)]
        public long? PlanId { get; set; }

        /// <summary>
        /// Gets or Sets CollectDocument
        /// </summary>
        [DataMember(Name="CollectDocument", EmitDefaultValue=false)]
        public CollectDocuments CollectDocument { get; set; }

        /// <summary>
        /// Gets or Sets Installment
        /// </summary>
        [DataMember(Name="Installment", EmitDefaultValue=false)]
        public Installments Installment { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name="Plan", EmitDefaultValue=false)]
        public InstallmentPlans Plan { get; set; }

        /// <summary>
        /// Gets or Sets FundingPayDocumentDetails
        /// </summary>
        [DataMember(Name="FundingPayDocumentDetails", EmitDefaultValue=false)]
        public List<FundingPayDocumentDetails> FundingPayDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets TransferReason
        /// </summary>
        [DataMember(Name="TransferReason", EmitDefaultValue=false)]
        public FundingTransferReason TransferReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FundingCollectDocumentDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CollectDocumentId: ").Append(CollectDocumentId).Append("\n");
            sb.Append("  InstallmentId: ").Append(InstallmentId).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  CollectDocument: ").Append(CollectDocument).Append("\n");
            sb.Append("  Installment: ").Append(Installment).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  FundingPayDocumentDetails: ").Append(FundingPayDocumentDetails).Append("\n");
            sb.Append("  TransferReason: ").Append(TransferReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundingCollectDocumentDetails);
        }

        /// <summary>
        /// Returns true if FundingCollectDocumentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of FundingCollectDocumentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundingCollectDocumentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CollectDocumentId == input.CollectDocumentId ||
                    (this.CollectDocumentId != null &&
                    this.CollectDocumentId.Equals(input.CollectDocumentId))
                ) && 
                (
                    this.InstallmentId == input.InstallmentId ||
                    (this.InstallmentId != null &&
                    this.InstallmentId.Equals(input.InstallmentId))
                ) && 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.CollectDocument == input.CollectDocument ||
                    (this.CollectDocument != null &&
                    this.CollectDocument.Equals(input.CollectDocument))
                ) && 
                (
                    this.Installment == input.Installment ||
                    (this.Installment != null &&
                    this.Installment.Equals(input.Installment))
                ) && 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                ) && 
                (
                    this.FundingPayDocumentDetails == input.FundingPayDocumentDetails ||
                    this.FundingPayDocumentDetails != null &&
                    this.FundingPayDocumentDetails.SequenceEqual(input.FundingPayDocumentDetails)
                ) && 
                (
                    this.TransferReason == input.TransferReason ||
                    (this.TransferReason != null &&
                    this.TransferReason.Equals(input.TransferReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CollectDocumentId != null)
                    hashCode = hashCode * 59 + this.CollectDocumentId.GetHashCode();
                if (this.InstallmentId != null)
                    hashCode = hashCode * 59 + this.InstallmentId.GetHashCode();
                if (this.PlanId != null)
                    hashCode = hashCode * 59 + this.PlanId.GetHashCode();
                if (this.CollectDocument != null)
                    hashCode = hashCode * 59 + this.CollectDocument.GetHashCode();
                if (this.Installment != null)
                    hashCode = hashCode * 59 + this.Installment.GetHashCode();
                if (this.Plan != null)
                    hashCode = hashCode * 59 + this.Plan.GetHashCode();
                if (this.FundingPayDocumentDetails != null)
                    hashCode = hashCode * 59 + this.FundingPayDocumentDetails.GetHashCode();
                if (this.TransferReason != null)
                    hashCode = hashCode * 59 + this.TransferReason.GetHashCode();
                return hashCode;
            }
        }
    }

}
