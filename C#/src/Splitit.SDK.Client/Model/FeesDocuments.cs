/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FeesDocuments
    /// </summary>
    [DataContract]
    public partial class FeesDocuments :  IEquatable<FeesDocuments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesDocuments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeesDocuments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesDocuments" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="feeAmountInEffectiveCurrencyAmount">feeAmountInEffectiveCurrencyAmount (required).</param>
        /// <param name="feeAmountInTransactionCurrencyAmount">feeAmountInTransactionCurrencyAmount (required).</param>
        /// <param name="feeAmountInUniformCurrencyAmount">feeAmountInUniformCurrencyAmount (required).</param>
        /// <param name="effectiveCurrencyId">effectiveCurrencyId (required).</param>
        /// <param name="transactionCurrencyId">transactionCurrencyId.</param>
        /// <param name="uniformCurrencyId">uniformCurrencyId (required).</param>
        /// <param name="referenceFeesDocumentId">referenceFeesDocumentId.</param>
        /// <param name="installmentId">installmentId.</param>
        /// <param name="planId">planId.</param>
        /// <param name="businessUnitId">businessUnitId.</param>
        /// <param name="effectiveDateUtc">effectiveDateUtc (required).</param>
        /// <param name="feeRuleDataId">feeRuleDataId.</param>
        /// <param name="feeRuleData">feeRuleData.</param>
        /// <param name="businessUnit">businessUnit.</param>
        /// <param name="effectiveCurrency">effectiveCurrency.</param>
        /// <param name="installment">installment.</param>
        /// <param name="plan">plan.</param>
        /// <param name="referenceFeesDocument">referenceFeesDocument.</param>
        /// <param name="transactionCurrency">transactionCurrency.</param>
        /// <param name="uniformCurrency">uniformCurrency.</param>
        /// <param name="inverseReferenceFeesDocument">inverseReferenceFeesDocument.</param>
        /// <param name="feeEntity">feeEntity (required).</param>
        /// <param name="feeType">feeType (required).</param>
        /// <param name="rangeType">rangeType.</param>
        /// <param name="feeAmountInEffectiveCurrency">feeAmountInEffectiveCurrency.</param>
        /// <param name="feeAmountInTransactionCurrency">feeAmountInTransactionCurrency.</param>
        /// <param name="feeAmountInUniformCurrency">feeAmountInUniformCurrency.</param>
        public FeesDocuments(long? id = default(long?), decimal? feeAmountInEffectiveCurrencyAmount = default(decimal?), decimal? feeAmountInTransactionCurrencyAmount = default(decimal?), decimal? feeAmountInUniformCurrencyAmount = default(decimal?), long? effectiveCurrencyId = default(long?), long? transactionCurrencyId = default(long?), long? uniformCurrencyId = default(long?), long? referenceFeesDocumentId = default(long?), long? installmentId = default(long?), long? planId = default(long?), long? businessUnitId = default(long?), DateTime? effectiveDateUtc = default(DateTime?), long? feeRuleDataId = default(long?), FeesRuleDatas feeRuleData = default(FeesRuleDatas), BusinessUnits businessUnit = default(BusinessUnits), Currencies effectiveCurrency = default(Currencies), Installments installment = default(Installments), InstallmentPlans plan = default(InstallmentPlans), FeesDocuments referenceFeesDocument = default(FeesDocuments), Currencies transactionCurrency = default(Currencies), Currencies uniformCurrency = default(Currencies), List<FeesDocuments> inverseReferenceFeesDocument = default(List<FeesDocuments>), AccountingParty feeEntity = default(AccountingParty), FeesTypes feeType = default(FeesTypes), RangeType rangeType = default(RangeType), Money2 feeAmountInEffectiveCurrency = default(Money2), Money2 feeAmountInTransactionCurrency = default(Money2), Money2 feeAmountInUniformCurrency = default(Money2))
        {
            this.Id = id;
            this.FeeAmountInEffectiveCurrencyAmount = feeAmountInEffectiveCurrencyAmount;
            this.FeeAmountInTransactionCurrencyAmount = feeAmountInTransactionCurrencyAmount;
            this.FeeAmountInUniformCurrencyAmount = feeAmountInUniformCurrencyAmount;
            this.EffectiveCurrencyId = effectiveCurrencyId;
            this.UniformCurrencyId = uniformCurrencyId;
            this.EffectiveDateUtc = effectiveDateUtc;
            this.FeeEntity = feeEntity;
            this.FeeType = feeType;
            this.TransactionCurrencyId = transactionCurrencyId;
            this.ReferenceFeesDocumentId = referenceFeesDocumentId;
            this.InstallmentId = installmentId;
            this.PlanId = planId;
            this.BusinessUnitId = businessUnitId;
            this.FeeRuleDataId = feeRuleDataId;
            this.FeeRuleData = feeRuleData;
            this.BusinessUnit = businessUnit;
            this.EffectiveCurrency = effectiveCurrency;
            this.Installment = installment;
            this.Plan = plan;
            this.ReferenceFeesDocument = referenceFeesDocument;
            this.TransactionCurrency = transactionCurrency;
            this.UniformCurrency = uniformCurrency;
            this.InverseReferenceFeesDocument = inverseReferenceFeesDocument;
            this.RangeType = rangeType;
            this.FeeAmountInEffectiveCurrency = feeAmountInEffectiveCurrency;
            this.FeeAmountInTransactionCurrency = feeAmountInTransactionCurrency;
            this.FeeAmountInUniformCurrency = feeAmountInUniformCurrency;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmountInEffectiveCurrencyAmount
        /// </summary>
        [DataMember(Name="FeeAmountInEffectiveCurrencyAmount", EmitDefaultValue=false)]
        public decimal? FeeAmountInEffectiveCurrencyAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmountInTransactionCurrencyAmount
        /// </summary>
        [DataMember(Name="FeeAmountInTransactionCurrencyAmount", EmitDefaultValue=false)]
        public decimal? FeeAmountInTransactionCurrencyAmount { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmountInUniformCurrencyAmount
        /// </summary>
        [DataMember(Name="FeeAmountInUniformCurrencyAmount", EmitDefaultValue=false)]
        public decimal? FeeAmountInUniformCurrencyAmount { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveCurrencyId
        /// </summary>
        [DataMember(Name="EffectiveCurrencyId", EmitDefaultValue=false)]
        public long? EffectiveCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCurrencyId
        /// </summary>
        [DataMember(Name="TransactionCurrencyId", EmitDefaultValue=false)]
        public long? TransactionCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets UniformCurrencyId
        /// </summary>
        [DataMember(Name="UniformCurrencyId", EmitDefaultValue=false)]
        public long? UniformCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceFeesDocumentId
        /// </summary>
        [DataMember(Name="ReferenceFeesDocumentId", EmitDefaultValue=false)]
        public long? ReferenceFeesDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentId
        /// </summary>
        [DataMember(Name="InstallmentId", EmitDefaultValue=false)]
        public long? InstallmentId { get; set; }

        /// <summary>
        /// Gets or Sets PlanId
        /// </summary>
        [DataMember(Name="PlanId", EmitDefaultValue=false)]
        public long? PlanId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="BusinessUnitId", EmitDefaultValue=false)]
        public long? BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveDateUtc
        /// </summary>
        [DataMember(Name="EffectiveDateUtc", EmitDefaultValue=false)]
        public DateTime? EffectiveDateUtc { get; set; }

        /// <summary>
        /// Gets or Sets FeeRuleDataId
        /// </summary>
        [DataMember(Name="FeeRuleDataId", EmitDefaultValue=false)]
        public long? FeeRuleDataId { get; set; }

        /// <summary>
        /// Gets or Sets FeeRuleData
        /// </summary>
        [DataMember(Name="FeeRuleData", EmitDefaultValue=false)]
        public FeesRuleDatas FeeRuleData { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="BusinessUnit", EmitDefaultValue=false)]
        public BusinessUnits BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveCurrency
        /// </summary>
        [DataMember(Name="EffectiveCurrency", EmitDefaultValue=false)]
        public Currencies EffectiveCurrency { get; set; }

        /// <summary>
        /// Gets or Sets Installment
        /// </summary>
        [DataMember(Name="Installment", EmitDefaultValue=false)]
        public Installments Installment { get; set; }

        /// <summary>
        /// Gets or Sets Plan
        /// </summary>
        [DataMember(Name="Plan", EmitDefaultValue=false)]
        public InstallmentPlans Plan { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceFeesDocument
        /// </summary>
        [DataMember(Name="ReferenceFeesDocument", EmitDefaultValue=false)]
        public FeesDocuments ReferenceFeesDocument { get; set; }

        /// <summary>
        /// Gets or Sets TransactionCurrency
        /// </summary>
        [DataMember(Name="TransactionCurrency", EmitDefaultValue=false)]
        public Currencies TransactionCurrency { get; set; }

        /// <summary>
        /// Gets or Sets UniformCurrency
        /// </summary>
        [DataMember(Name="UniformCurrency", EmitDefaultValue=false)]
        public Currencies UniformCurrency { get; set; }

        /// <summary>
        /// Gets or Sets InverseReferenceFeesDocument
        /// </summary>
        [DataMember(Name="InverseReferenceFeesDocument", EmitDefaultValue=false)]
        public List<FeesDocuments> InverseReferenceFeesDocument { get; set; }

        /// <summary>
        /// Gets or Sets FeeEntity
        /// </summary>
        [DataMember(Name="FeeEntity", EmitDefaultValue=false)]
        public AccountingParty FeeEntity { get; set; }

        /// <summary>
        /// Gets or Sets FeeType
        /// </summary>
        [DataMember(Name="FeeType", EmitDefaultValue=false)]
        public FeesTypes FeeType { get; set; }

        /// <summary>
        /// Gets or Sets RangeType
        /// </summary>
        [DataMember(Name="RangeType", EmitDefaultValue=false)]
        public RangeType RangeType { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmountInEffectiveCurrency
        /// </summary>
        [DataMember(Name="FeeAmountInEffectiveCurrency", EmitDefaultValue=false)]
        public Money2 FeeAmountInEffectiveCurrency { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmountInTransactionCurrency
        /// </summary>
        [DataMember(Name="FeeAmountInTransactionCurrency", EmitDefaultValue=false)]
        public Money2 FeeAmountInTransactionCurrency { get; set; }

        /// <summary>
        /// Gets or Sets FeeAmountInUniformCurrency
        /// </summary>
        [DataMember(Name="FeeAmountInUniformCurrency", EmitDefaultValue=false)]
        public Money2 FeeAmountInUniformCurrency { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesDocuments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FeeAmountInEffectiveCurrencyAmount: ").Append(FeeAmountInEffectiveCurrencyAmount).Append("\n");
            sb.Append("  FeeAmountInTransactionCurrencyAmount: ").Append(FeeAmountInTransactionCurrencyAmount).Append("\n");
            sb.Append("  FeeAmountInUniformCurrencyAmount: ").Append(FeeAmountInUniformCurrencyAmount).Append("\n");
            sb.Append("  EffectiveCurrencyId: ").Append(EffectiveCurrencyId).Append("\n");
            sb.Append("  TransactionCurrencyId: ").Append(TransactionCurrencyId).Append("\n");
            sb.Append("  UniformCurrencyId: ").Append(UniformCurrencyId).Append("\n");
            sb.Append("  ReferenceFeesDocumentId: ").Append(ReferenceFeesDocumentId).Append("\n");
            sb.Append("  InstallmentId: ").Append(InstallmentId).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  EffectiveDateUtc: ").Append(EffectiveDateUtc).Append("\n");
            sb.Append("  FeeRuleDataId: ").Append(FeeRuleDataId).Append("\n");
            sb.Append("  FeeRuleData: ").Append(FeeRuleData).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  EffectiveCurrency: ").Append(EffectiveCurrency).Append("\n");
            sb.Append("  Installment: ").Append(Installment).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  ReferenceFeesDocument: ").Append(ReferenceFeesDocument).Append("\n");
            sb.Append("  TransactionCurrency: ").Append(TransactionCurrency).Append("\n");
            sb.Append("  UniformCurrency: ").Append(UniformCurrency).Append("\n");
            sb.Append("  InverseReferenceFeesDocument: ").Append(InverseReferenceFeesDocument).Append("\n");
            sb.Append("  FeeEntity: ").Append(FeeEntity).Append("\n");
            sb.Append("  FeeType: ").Append(FeeType).Append("\n");
            sb.Append("  RangeType: ").Append(RangeType).Append("\n");
            sb.Append("  FeeAmountInEffectiveCurrency: ").Append(FeeAmountInEffectiveCurrency).Append("\n");
            sb.Append("  FeeAmountInTransactionCurrency: ").Append(FeeAmountInTransactionCurrency).Append("\n");
            sb.Append("  FeeAmountInUniformCurrency: ").Append(FeeAmountInUniformCurrency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeesDocuments);
        }

        /// <summary>
        /// Returns true if FeesDocuments instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesDocuments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FeeAmountInEffectiveCurrencyAmount == input.FeeAmountInEffectiveCurrencyAmount ||
                    (this.FeeAmountInEffectiveCurrencyAmount != null &&
                    this.FeeAmountInEffectiveCurrencyAmount.Equals(input.FeeAmountInEffectiveCurrencyAmount))
                ) && 
                (
                    this.FeeAmountInTransactionCurrencyAmount == input.FeeAmountInTransactionCurrencyAmount ||
                    (this.FeeAmountInTransactionCurrencyAmount != null &&
                    this.FeeAmountInTransactionCurrencyAmount.Equals(input.FeeAmountInTransactionCurrencyAmount))
                ) && 
                (
                    this.FeeAmountInUniformCurrencyAmount == input.FeeAmountInUniformCurrencyAmount ||
                    (this.FeeAmountInUniformCurrencyAmount != null &&
                    this.FeeAmountInUniformCurrencyAmount.Equals(input.FeeAmountInUniformCurrencyAmount))
                ) && 
                (
                    this.EffectiveCurrencyId == input.EffectiveCurrencyId ||
                    (this.EffectiveCurrencyId != null &&
                    this.EffectiveCurrencyId.Equals(input.EffectiveCurrencyId))
                ) && 
                (
                    this.TransactionCurrencyId == input.TransactionCurrencyId ||
                    (this.TransactionCurrencyId != null &&
                    this.TransactionCurrencyId.Equals(input.TransactionCurrencyId))
                ) && 
                (
                    this.UniformCurrencyId == input.UniformCurrencyId ||
                    (this.UniformCurrencyId != null &&
                    this.UniformCurrencyId.Equals(input.UniformCurrencyId))
                ) && 
                (
                    this.ReferenceFeesDocumentId == input.ReferenceFeesDocumentId ||
                    (this.ReferenceFeesDocumentId != null &&
                    this.ReferenceFeesDocumentId.Equals(input.ReferenceFeesDocumentId))
                ) && 
                (
                    this.InstallmentId == input.InstallmentId ||
                    (this.InstallmentId != null &&
                    this.InstallmentId.Equals(input.InstallmentId))
                ) && 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.EffectiveDateUtc == input.EffectiveDateUtc ||
                    (this.EffectiveDateUtc != null &&
                    this.EffectiveDateUtc.Equals(input.EffectiveDateUtc))
                ) && 
                (
                    this.FeeRuleDataId == input.FeeRuleDataId ||
                    (this.FeeRuleDataId != null &&
                    this.FeeRuleDataId.Equals(input.FeeRuleDataId))
                ) && 
                (
                    this.FeeRuleData == input.FeeRuleData ||
                    (this.FeeRuleData != null &&
                    this.FeeRuleData.Equals(input.FeeRuleData))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.EffectiveCurrency == input.EffectiveCurrency ||
                    (this.EffectiveCurrency != null &&
                    this.EffectiveCurrency.Equals(input.EffectiveCurrency))
                ) && 
                (
                    this.Installment == input.Installment ||
                    (this.Installment != null &&
                    this.Installment.Equals(input.Installment))
                ) && 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                ) && 
                (
                    this.ReferenceFeesDocument == input.ReferenceFeesDocument ||
                    (this.ReferenceFeesDocument != null &&
                    this.ReferenceFeesDocument.Equals(input.ReferenceFeesDocument))
                ) && 
                (
                    this.TransactionCurrency == input.TransactionCurrency ||
                    (this.TransactionCurrency != null &&
                    this.TransactionCurrency.Equals(input.TransactionCurrency))
                ) && 
                (
                    this.UniformCurrency == input.UniformCurrency ||
                    (this.UniformCurrency != null &&
                    this.UniformCurrency.Equals(input.UniformCurrency))
                ) && 
                (
                    this.InverseReferenceFeesDocument == input.InverseReferenceFeesDocument ||
                    this.InverseReferenceFeesDocument != null &&
                    this.InverseReferenceFeesDocument.SequenceEqual(input.InverseReferenceFeesDocument)
                ) && 
                (
                    this.FeeEntity == input.FeeEntity ||
                    (this.FeeEntity != null &&
                    this.FeeEntity.Equals(input.FeeEntity))
                ) && 
                (
                    this.FeeType == input.FeeType ||
                    (this.FeeType != null &&
                    this.FeeType.Equals(input.FeeType))
                ) && 
                (
                    this.RangeType == input.RangeType ||
                    (this.RangeType != null &&
                    this.RangeType.Equals(input.RangeType))
                ) && 
                (
                    this.FeeAmountInEffectiveCurrency == input.FeeAmountInEffectiveCurrency ||
                    (this.FeeAmountInEffectiveCurrency != null &&
                    this.FeeAmountInEffectiveCurrency.Equals(input.FeeAmountInEffectiveCurrency))
                ) && 
                (
                    this.FeeAmountInTransactionCurrency == input.FeeAmountInTransactionCurrency ||
                    (this.FeeAmountInTransactionCurrency != null &&
                    this.FeeAmountInTransactionCurrency.Equals(input.FeeAmountInTransactionCurrency))
                ) && 
                (
                    this.FeeAmountInUniformCurrency == input.FeeAmountInUniformCurrency ||
                    (this.FeeAmountInUniformCurrency != null &&
                    this.FeeAmountInUniformCurrency.Equals(input.FeeAmountInUniformCurrency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FeeAmountInEffectiveCurrencyAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmountInEffectiveCurrencyAmount.GetHashCode();
                if (this.FeeAmountInTransactionCurrencyAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmountInTransactionCurrencyAmount.GetHashCode();
                if (this.FeeAmountInUniformCurrencyAmount != null)
                    hashCode = hashCode * 59 + this.FeeAmountInUniformCurrencyAmount.GetHashCode();
                if (this.EffectiveCurrencyId != null)
                    hashCode = hashCode * 59 + this.EffectiveCurrencyId.GetHashCode();
                if (this.TransactionCurrencyId != null)
                    hashCode = hashCode * 59 + this.TransactionCurrencyId.GetHashCode();
                if (this.UniformCurrencyId != null)
                    hashCode = hashCode * 59 + this.UniformCurrencyId.GetHashCode();
                if (this.ReferenceFeesDocumentId != null)
                    hashCode = hashCode * 59 + this.ReferenceFeesDocumentId.GetHashCode();
                if (this.InstallmentId != null)
                    hashCode = hashCode * 59 + this.InstallmentId.GetHashCode();
                if (this.PlanId != null)
                    hashCode = hashCode * 59 + this.PlanId.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.EffectiveDateUtc != null)
                    hashCode = hashCode * 59 + this.EffectiveDateUtc.GetHashCode();
                if (this.FeeRuleDataId != null)
                    hashCode = hashCode * 59 + this.FeeRuleDataId.GetHashCode();
                if (this.FeeRuleData != null)
                    hashCode = hashCode * 59 + this.FeeRuleData.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.EffectiveCurrency != null)
                    hashCode = hashCode * 59 + this.EffectiveCurrency.GetHashCode();
                if (this.Installment != null)
                    hashCode = hashCode * 59 + this.Installment.GetHashCode();
                if (this.Plan != null)
                    hashCode = hashCode * 59 + this.Plan.GetHashCode();
                if (this.ReferenceFeesDocument != null)
                    hashCode = hashCode * 59 + this.ReferenceFeesDocument.GetHashCode();
                if (this.TransactionCurrency != null)
                    hashCode = hashCode * 59 + this.TransactionCurrency.GetHashCode();
                if (this.UniformCurrency != null)
                    hashCode = hashCode * 59 + this.UniformCurrency.GetHashCode();
                if (this.InverseReferenceFeesDocument != null)
                    hashCode = hashCode * 59 + this.InverseReferenceFeesDocument.GetHashCode();
                if (this.FeeEntity != null)
                    hashCode = hashCode * 59 + this.FeeEntity.GetHashCode();
                if (this.FeeType != null)
                    hashCode = hashCode * 59 + this.FeeType.GetHashCode();
                if (this.RangeType != null)
                    hashCode = hashCode * 59 + this.RangeType.GetHashCode();
                if (this.FeeAmountInEffectiveCurrency != null)
                    hashCode = hashCode * 59 + this.FeeAmountInEffectiveCurrency.GetHashCode();
                if (this.FeeAmountInTransactionCurrency != null)
                    hashCode = hashCode * 59 + this.FeeAmountInTransactionCurrency.GetHashCode();
                if (this.FeeAmountInUniformCurrency != null)
                    hashCode = hashCode * 59 + this.FeeAmountInUniformCurrency.GetHashCode();
                return hashCode;
            }
        }
    }

}
