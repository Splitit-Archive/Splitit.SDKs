/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// PayDocuments
    /// </summary>
    [DataContract]
    public partial class PayDocuments :  IEquatable<PayDocuments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PayDocuments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PayDocuments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PayDocuments" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="totalAmount">totalAmount (required).</param>
        /// <param name="scpProviderId">scpProviderId.</param>
        /// <param name="businessUnitId">businessUnitId.</param>
        /// <param name="discriminator">discriminator.</param>
        /// <param name="currencyId">currencyId.</param>
        /// <param name="businessUnit">businessUnit.</param>
        /// <param name="currency">currency.</param>
        /// <param name="scpProvider">scpProvider.</param>
        /// <param name="fundingPayDocumentDetails">fundingPayDocumentDetails.</param>
        public PayDocuments(long? id = default(long?), decimal? totalAmount = default(decimal?), long? scpProviderId = default(long?), long? businessUnitId = default(long?), string discriminator = default(string), long? currencyId = default(long?), BusinessUnits businessUnit = default(BusinessUnits), Currencies currency = default(Currencies), Object scpProvider = default(Object), List<FundingPayDocumentDetails> fundingPayDocumentDetails = default(List<FundingPayDocumentDetails>))
        {
            this.Id = id;
            this.TotalAmount = totalAmount;
            this.ScpProviderId = scpProviderId;
            this.BusinessUnitId = businessUnitId;
            this.Discriminator = discriminator;
            this.CurrencyId = currencyId;
            this.BusinessUnit = businessUnit;
            this.Currency = currency;
            this.ScpProvider = scpProvider;
            this.FundingPayDocumentDetails = fundingPayDocumentDetails;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets TotalAmount
        /// </summary>
        [DataMember(Name="TotalAmount", EmitDefaultValue=false)]
        public decimal? TotalAmount { get; set; }

        /// <summary>
        /// Gets or Sets ScpProviderId
        /// </summary>
        [DataMember(Name="ScpProviderId", EmitDefaultValue=false)]
        public long? ScpProviderId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="BusinessUnitId", EmitDefaultValue=false)]
        public long? BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets Discriminator
        /// </summary>
        [DataMember(Name="Discriminator", EmitDefaultValue=false)]
        public string Discriminator { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="CurrencyId", EmitDefaultValue=false)]
        public long? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="BusinessUnit", EmitDefaultValue=false)]
        public BusinessUnits BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public Currencies Currency { get; set; }

        /// <summary>
        /// Gets or Sets ScpProvider
        /// </summary>
        [DataMember(Name="ScpProvider", EmitDefaultValue=false)]
        public Object ScpProvider { get; set; }

        /// <summary>
        /// Gets or Sets FundingPayDocumentDetails
        /// </summary>
        [DataMember(Name="FundingPayDocumentDetails", EmitDefaultValue=false)]
        public List<FundingPayDocumentDetails> FundingPayDocumentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PayDocuments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TotalAmount: ").Append(TotalAmount).Append("\n");
            sb.Append("  ScpProviderId: ").Append(ScpProviderId).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  Discriminator: ").Append(Discriminator).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ScpProvider: ").Append(ScpProvider).Append("\n");
            sb.Append("  FundingPayDocumentDetails: ").Append(FundingPayDocumentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PayDocuments);
        }

        /// <summary>
        /// Returns true if PayDocuments instances are equal
        /// </summary>
        /// <param name="input">Instance of PayDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PayDocuments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TotalAmount == input.TotalAmount ||
                    (this.TotalAmount != null &&
                    this.TotalAmount.Equals(input.TotalAmount))
                ) && 
                (
                    this.ScpProviderId == input.ScpProviderId ||
                    (this.ScpProviderId != null &&
                    this.ScpProviderId.Equals(input.ScpProviderId))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.Discriminator == input.Discriminator ||
                    (this.Discriminator != null &&
                    this.Discriminator.Equals(input.Discriminator))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ScpProvider == input.ScpProvider ||
                    (this.ScpProvider != null &&
                    this.ScpProvider.Equals(input.ScpProvider))
                ) && 
                (
                    this.FundingPayDocumentDetails == input.FundingPayDocumentDetails ||
                    this.FundingPayDocumentDetails != null &&
                    this.FundingPayDocumentDetails.SequenceEqual(input.FundingPayDocumentDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TotalAmount != null)
                    hashCode = hashCode * 59 + this.TotalAmount.GetHashCode();
                if (this.ScpProviderId != null)
                    hashCode = hashCode * 59 + this.ScpProviderId.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.Discriminator != null)
                    hashCode = hashCode * 59 + this.Discriminator.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ScpProvider != null)
                    hashCode = hashCode * 59 + this.ScpProvider.GetHashCode();
                if (this.FundingPayDocumentDetails != null)
                    hashCode = hashCode * 59 + this.FundingPayDocumentDetails.GetHashCode();
                return hashCode;
            }
        }
    }

}
