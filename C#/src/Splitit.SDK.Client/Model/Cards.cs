/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Cards
    /// </summary>
    [DataContract]
    public partial class Cards :  IEquatable<Cards>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Cards" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Cards() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Cards" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="kekId">kekId (required).</param>
        /// <param name="binBinNumber">binBinNumber.</param>
        /// <param name="binIssuingCountryIsoNumber">binIssuingCountryIsoNumber.</param>
        /// <param name="binId">binId (required).</param>
        /// <param name="expirationMonth">expirationMonth (required).</param>
        /// <param name="expirationYear">expirationYear (required).</param>
        /// <param name="addressDataAddressLine">addressDataAddressLine.</param>
        /// <param name="addressDataZip">addressDataZip.</param>
        /// <param name="isDeleted">isDeleted (required).</param>
        /// <param name="version">version (required).</param>
        /// <param name="pisMemberUniqueId">pisMemberUniqueId.</param>
        /// <param name="pisMemberId">pisMemberId.</param>
        /// <param name="addressDataAddressLine2">addressDataAddressLine2.</param>
        /// <param name="addressDataCity">addressDataCity.</param>
        /// <param name="addressDataCountryId">addressDataCountryId.</param>
        /// <param name="addressDataStateId">addressDataStateId.</param>
        /// <param name="addressDataLegacyFullAddressLine">addressDataLegacyFullAddressLine.</param>
        /// <param name="binIsPrepaid">binIsPrepaid.</param>
        /// <param name="token">token.</param>
        /// <param name="kek">kek.</param>
        /// <param name="cardClass">cardClass.</param>
        /// <param name="productId">productId.</param>
        /// <param name="issuerBankName">issuerBankName.</param>
        /// <param name="dekDataId">dekDataId.</param>
        /// <param name="dekData">dekData.</param>
        /// <param name="pisMember">pisMember.</param>
        /// <param name="accountUpdaterPendingCards">accountUpdaterPendingCards.</param>
        /// <param name="cardStateLogs">cardStateLogs.</param>
        /// <param name="fraudDetectionLogs">fraudDetectionLogs.</param>
        /// <param name="installmentPlanAuditLogs">installmentPlanAuditLogs.</param>
        /// <param name="installmentPlans">installmentPlans.</param>
        /// <param name="addressData">addressData.</param>
        /// <param name="encryptedNumber">encryptedNumber.</param>
        /// <param name="dek">dek.</param>
        /// <param name="maskedNumber">maskedNumber.</param>
        /// <param name="cardHolderName">cardHolderName.</param>
        /// <param name="binCardBrand">binCardBrand (required).</param>
        /// <param name="binCardType">binCardType (required).</param>
        /// <param name="cvv">cvv.</param>
        /// <param name="bin">bin.</param>
        /// <param name="country">country.</param>
        /// <param name="state">state.</param>
        public Cards(long? id = default(long?), long? kekId = default(long?), string binBinNumber = default(string), string binIssuingCountryIsoNumber = default(string), long? binId = default(long?), int? expirationMonth = default(int?), int? expirationYear = default(int?), string addressDataAddressLine = default(string), string addressDataZip = default(string), bool? isDeleted = default(bool?), int? version = default(int?), string pisMemberUniqueId = default(string), long? pisMemberId = default(long?), string addressDataAddressLine2 = default(string), string addressDataCity = default(string), long? addressDataCountryId = default(long?), long? addressDataStateId = default(long?), string addressDataLegacyFullAddressLine = default(string), bool? binIsPrepaid = default(bool?), string token = default(string), Keks kek = default(Keks), string cardClass = default(string), string productId = default(string), string issuerBankName = default(string), long? dekDataId = default(long?), DEKData dekData = default(DEKData), Object pisMember = default(Object), List<AccountUpdaterPendingCards> accountUpdaterPendingCards = default(List<AccountUpdaterPendingCards>), List<CardStateLogs> cardStateLogs = default(List<CardStateLogs>), List<FraudDetectionLogs> fraudDetectionLogs = default(List<FraudDetectionLogs>), List<InstallmentPlanAuditLogs> installmentPlanAuditLogs = default(List<InstallmentPlanAuditLogs>), List<InstallmentPlans> installmentPlans = default(List<InstallmentPlans>), AddressData2 addressData = default(AddressData2), string encryptedNumber = default(string), string dek = default(string), string maskedNumber = default(string), string cardHolderName = default(string), CardBrand binCardBrand = default(CardBrand), CardType binCardType = default(CardType), string cvv = default(string), BinData bin = default(BinData), Countries country = default(Countries), CountrySubdivisions state = default(CountrySubdivisions))
        {
            this.Id = id;
            this.KekId = kekId;
            this.BinId = binId;
            this.ExpirationMonth = expirationMonth;
            this.ExpirationYear = expirationYear;
            this.IsDeleted = isDeleted;
            this.Version = version;
            this.BinCardBrand = binCardBrand;
            this.BinCardType = binCardType;
            this.BinBinNumber = binBinNumber;
            this.BinIssuingCountryIsoNumber = binIssuingCountryIsoNumber;
            this.AddressDataAddressLine = addressDataAddressLine;
            this.AddressDataZip = addressDataZip;
            this.PisMemberUniqueId = pisMemberUniqueId;
            this.PisMemberId = pisMemberId;
            this.AddressDataAddressLine2 = addressDataAddressLine2;
            this.AddressDataCity = addressDataCity;
            this.AddressDataCountryId = addressDataCountryId;
            this.AddressDataStateId = addressDataStateId;
            this.AddressDataLegacyFullAddressLine = addressDataLegacyFullAddressLine;
            this.BinIsPrepaid = binIsPrepaid;
            this.Token = token;
            this.Kek = kek;
            this.CardClass = cardClass;
            this.ProductId = productId;
            this.IssuerBankName = issuerBankName;
            this.DekDataId = dekDataId;
            this.DekData = dekData;
            this.PisMember = pisMember;
            this.AccountUpdaterPendingCards = accountUpdaterPendingCards;
            this.CardStateLogs = cardStateLogs;
            this.FraudDetectionLogs = fraudDetectionLogs;
            this.InstallmentPlanAuditLogs = installmentPlanAuditLogs;
            this.InstallmentPlans = installmentPlans;
            this.AddressData = addressData;
            this.EncryptedNumber = encryptedNumber;
            this.Dek = dek;
            this.MaskedNumber = maskedNumber;
            this.CardHolderName = cardHolderName;
            this.Cvv = cvv;
            this.Bin = bin;
            this.Country = country;
            this.State = state;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets KekId
        /// </summary>
        [DataMember(Name="KekId", EmitDefaultValue=false)]
        public long? KekId { get; set; }

        /// <summary>
        /// Gets or Sets BinBinNumber
        /// </summary>
        [DataMember(Name="BinBinNumber", EmitDefaultValue=false)]
        public string BinBinNumber { get; set; }

        /// <summary>
        /// Gets or Sets BinIssuingCountryIsoNumber
        /// </summary>
        [DataMember(Name="BinIssuingCountryIsoNumber", EmitDefaultValue=false)]
        public string BinIssuingCountryIsoNumber { get; set; }

        /// <summary>
        /// Gets or Sets BinId
        /// </summary>
        [DataMember(Name="BinId", EmitDefaultValue=false)]
        public long? BinId { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationMonth
        /// </summary>
        [DataMember(Name="ExpirationMonth", EmitDefaultValue=false)]
        public int? ExpirationMonth { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationYear
        /// </summary>
        [DataMember(Name="ExpirationYear", EmitDefaultValue=false)]
        public int? ExpirationYear { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataAddressLine
        /// </summary>
        [DataMember(Name="AddressDataAddressLine", EmitDefaultValue=false)]
        public string AddressDataAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataZip
        /// </summary>
        [DataMember(Name="AddressDataZip", EmitDefaultValue=false)]
        public string AddressDataZip { get; set; }

        /// <summary>
        /// Gets or Sets IsDeleted
        /// </summary>
        [DataMember(Name="IsDeleted", EmitDefaultValue=false)]
        public bool? IsDeleted { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets PisMemberUniqueId
        /// </summary>
        [DataMember(Name="PisMemberUniqueId", EmitDefaultValue=false)]
        public string PisMemberUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets PisMemberId
        /// </summary>
        [DataMember(Name="PisMemberId", EmitDefaultValue=false)]
        public long? PisMemberId { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataAddressLine2
        /// </summary>
        [DataMember(Name="AddressDataAddressLine2", EmitDefaultValue=false)]
        public string AddressDataAddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataCity
        /// </summary>
        [DataMember(Name="AddressDataCity", EmitDefaultValue=false)]
        public string AddressDataCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataCountryId
        /// </summary>
        [DataMember(Name="AddressDataCountryId", EmitDefaultValue=false)]
        public long? AddressDataCountryId { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataStateId
        /// </summary>
        [DataMember(Name="AddressDataStateId", EmitDefaultValue=false)]
        public long? AddressDataStateId { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataLegacyFullAddressLine
        /// </summary>
        [DataMember(Name="AddressDataLegacyFullAddressLine", EmitDefaultValue=false)]
        public string AddressDataLegacyFullAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets BinIsPrepaid
        /// </summary>
        [DataMember(Name="BinIsPrepaid", EmitDefaultValue=false)]
        public bool? BinIsPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="Token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets Kek
        /// </summary>
        [DataMember(Name="Kek", EmitDefaultValue=false)]
        public Keks Kek { get; set; }

        /// <summary>
        /// Gets or Sets CardClass
        /// </summary>
        [DataMember(Name="CardClass", EmitDefaultValue=false)]
        public string CardClass { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="ProductId", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets IssuerBankName
        /// </summary>
        [DataMember(Name="IssuerBankName", EmitDefaultValue=false)]
        public string IssuerBankName { get; set; }

        /// <summary>
        /// Gets or Sets DekDataId
        /// </summary>
        [DataMember(Name="DekDataId", EmitDefaultValue=false)]
        public long? DekDataId { get; set; }

        /// <summary>
        /// Gets or Sets DekData
        /// </summary>
        [DataMember(Name="DekData", EmitDefaultValue=false)]
        public DEKData DekData { get; set; }

        /// <summary>
        /// Gets or Sets PisMember
        /// </summary>
        [DataMember(Name="PisMember", EmitDefaultValue=false)]
        public Object PisMember { get; set; }

        /// <summary>
        /// Gets or Sets AccountUpdaterPendingCards
        /// </summary>
        [DataMember(Name="AccountUpdaterPendingCards", EmitDefaultValue=false)]
        public List<AccountUpdaterPendingCards> AccountUpdaterPendingCards { get; set; }

        /// <summary>
        /// Gets or Sets CardStateLogs
        /// </summary>
        [DataMember(Name="CardStateLogs", EmitDefaultValue=false)]
        public List<CardStateLogs> CardStateLogs { get; set; }

        /// <summary>
        /// Gets or Sets FraudDetectionLogs
        /// </summary>
        [DataMember(Name="FraudDetectionLogs", EmitDefaultValue=false)]
        public List<FraudDetectionLogs> FraudDetectionLogs { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanAuditLogs
        /// </summary>
        [DataMember(Name="InstallmentPlanAuditLogs", EmitDefaultValue=false)]
        public List<InstallmentPlanAuditLogs> InstallmentPlanAuditLogs { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlans
        /// </summary>
        [DataMember(Name="InstallmentPlans", EmitDefaultValue=false)]
        public List<InstallmentPlans> InstallmentPlans { get; set; }

        /// <summary>
        /// Gets or Sets AddressData
        /// </summary>
        [DataMember(Name="AddressData", EmitDefaultValue=false)]
        public AddressData2 AddressData { get; set; }

        /// <summary>
        /// Gets or Sets EncryptedNumber
        /// </summary>
        [DataMember(Name="EncryptedNumber", EmitDefaultValue=false)]
        public string EncryptedNumber { get; set; }

        /// <summary>
        /// Gets or Sets Dek
        /// </summary>
        [DataMember(Name="Dek", EmitDefaultValue=false)]
        public string Dek { get; set; }

        /// <summary>
        /// Gets or Sets MaskedNumber
        /// </summary>
        [DataMember(Name="MaskedNumber", EmitDefaultValue=false)]
        public string MaskedNumber { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderName
        /// </summary>
        [DataMember(Name="CardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or Sets BinCardBrand
        /// </summary>
        [DataMember(Name="BinCardBrand", EmitDefaultValue=false)]
        public CardBrand BinCardBrand { get; set; }

        /// <summary>
        /// Gets or Sets BinCardType
        /// </summary>
        [DataMember(Name="BinCardType", EmitDefaultValue=false)]
        public CardType BinCardType { get; set; }

        /// <summary>
        /// Gets or Sets Cvv
        /// </summary>
        [DataMember(Name="Cvv", EmitDefaultValue=false)]
        public string Cvv { get; set; }

        /// <summary>
        /// Gets or Sets Bin
        /// </summary>
        [DataMember(Name="Bin", EmitDefaultValue=false)]
        public BinData Bin { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public Countries Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public CountrySubdivisions State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Cards {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KekId: ").Append(KekId).Append("\n");
            sb.Append("  BinBinNumber: ").Append(BinBinNumber).Append("\n");
            sb.Append("  BinIssuingCountryIsoNumber: ").Append(BinIssuingCountryIsoNumber).Append("\n");
            sb.Append("  BinId: ").Append(BinId).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  AddressDataAddressLine: ").Append(AddressDataAddressLine).Append("\n");
            sb.Append("  AddressDataZip: ").Append(AddressDataZip).Append("\n");
            sb.Append("  IsDeleted: ").Append(IsDeleted).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  PisMemberUniqueId: ").Append(PisMemberUniqueId).Append("\n");
            sb.Append("  PisMemberId: ").Append(PisMemberId).Append("\n");
            sb.Append("  AddressDataAddressLine2: ").Append(AddressDataAddressLine2).Append("\n");
            sb.Append("  AddressDataCity: ").Append(AddressDataCity).Append("\n");
            sb.Append("  AddressDataCountryId: ").Append(AddressDataCountryId).Append("\n");
            sb.Append("  AddressDataStateId: ").Append(AddressDataStateId).Append("\n");
            sb.Append("  AddressDataLegacyFullAddressLine: ").Append(AddressDataLegacyFullAddressLine).Append("\n");
            sb.Append("  BinIsPrepaid: ").Append(BinIsPrepaid).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Kek: ").Append(Kek).Append("\n");
            sb.Append("  CardClass: ").Append(CardClass).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  IssuerBankName: ").Append(IssuerBankName).Append("\n");
            sb.Append("  DekDataId: ").Append(DekDataId).Append("\n");
            sb.Append("  DekData: ").Append(DekData).Append("\n");
            sb.Append("  PisMember: ").Append(PisMember).Append("\n");
            sb.Append("  AccountUpdaterPendingCards: ").Append(AccountUpdaterPendingCards).Append("\n");
            sb.Append("  CardStateLogs: ").Append(CardStateLogs).Append("\n");
            sb.Append("  FraudDetectionLogs: ").Append(FraudDetectionLogs).Append("\n");
            sb.Append("  InstallmentPlanAuditLogs: ").Append(InstallmentPlanAuditLogs).Append("\n");
            sb.Append("  InstallmentPlans: ").Append(InstallmentPlans).Append("\n");
            sb.Append("  AddressData: ").Append(AddressData).Append("\n");
            sb.Append("  EncryptedNumber: ").Append(EncryptedNumber).Append("\n");
            sb.Append("  Dek: ").Append(Dek).Append("\n");
            sb.Append("  MaskedNumber: ").Append(MaskedNumber).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  BinCardBrand: ").Append(BinCardBrand).Append("\n");
            sb.Append("  BinCardType: ").Append(BinCardType).Append("\n");
            sb.Append("  Cvv: ").Append(Cvv).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Cards);
        }

        /// <summary>
        /// Returns true if Cards instances are equal
        /// </summary>
        /// <param name="input">Instance of Cards to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Cards input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.KekId == input.KekId ||
                    (this.KekId != null &&
                    this.KekId.Equals(input.KekId))
                ) && 
                (
                    this.BinBinNumber == input.BinBinNumber ||
                    (this.BinBinNumber != null &&
                    this.BinBinNumber.Equals(input.BinBinNumber))
                ) && 
                (
                    this.BinIssuingCountryIsoNumber == input.BinIssuingCountryIsoNumber ||
                    (this.BinIssuingCountryIsoNumber != null &&
                    this.BinIssuingCountryIsoNumber.Equals(input.BinIssuingCountryIsoNumber))
                ) && 
                (
                    this.BinId == input.BinId ||
                    (this.BinId != null &&
                    this.BinId.Equals(input.BinId))
                ) && 
                (
                    this.ExpirationMonth == input.ExpirationMonth ||
                    (this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(input.ExpirationMonth))
                ) && 
                (
                    this.ExpirationYear == input.ExpirationYear ||
                    (this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(input.ExpirationYear))
                ) && 
                (
                    this.AddressDataAddressLine == input.AddressDataAddressLine ||
                    (this.AddressDataAddressLine != null &&
                    this.AddressDataAddressLine.Equals(input.AddressDataAddressLine))
                ) && 
                (
                    this.AddressDataZip == input.AddressDataZip ||
                    (this.AddressDataZip != null &&
                    this.AddressDataZip.Equals(input.AddressDataZip))
                ) && 
                (
                    this.IsDeleted == input.IsDeleted ||
                    (this.IsDeleted != null &&
                    this.IsDeleted.Equals(input.IsDeleted))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.PisMemberUniqueId == input.PisMemberUniqueId ||
                    (this.PisMemberUniqueId != null &&
                    this.PisMemberUniqueId.Equals(input.PisMemberUniqueId))
                ) && 
                (
                    this.PisMemberId == input.PisMemberId ||
                    (this.PisMemberId != null &&
                    this.PisMemberId.Equals(input.PisMemberId))
                ) && 
                (
                    this.AddressDataAddressLine2 == input.AddressDataAddressLine2 ||
                    (this.AddressDataAddressLine2 != null &&
                    this.AddressDataAddressLine2.Equals(input.AddressDataAddressLine2))
                ) && 
                (
                    this.AddressDataCity == input.AddressDataCity ||
                    (this.AddressDataCity != null &&
                    this.AddressDataCity.Equals(input.AddressDataCity))
                ) && 
                (
                    this.AddressDataCountryId == input.AddressDataCountryId ||
                    (this.AddressDataCountryId != null &&
                    this.AddressDataCountryId.Equals(input.AddressDataCountryId))
                ) && 
                (
                    this.AddressDataStateId == input.AddressDataStateId ||
                    (this.AddressDataStateId != null &&
                    this.AddressDataStateId.Equals(input.AddressDataStateId))
                ) && 
                (
                    this.AddressDataLegacyFullAddressLine == input.AddressDataLegacyFullAddressLine ||
                    (this.AddressDataLegacyFullAddressLine != null &&
                    this.AddressDataLegacyFullAddressLine.Equals(input.AddressDataLegacyFullAddressLine))
                ) && 
                (
                    this.BinIsPrepaid == input.BinIsPrepaid ||
                    (this.BinIsPrepaid != null &&
                    this.BinIsPrepaid.Equals(input.BinIsPrepaid))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.Kek == input.Kek ||
                    (this.Kek != null &&
                    this.Kek.Equals(input.Kek))
                ) && 
                (
                    this.CardClass == input.CardClass ||
                    (this.CardClass != null &&
                    this.CardClass.Equals(input.CardClass))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.IssuerBankName == input.IssuerBankName ||
                    (this.IssuerBankName != null &&
                    this.IssuerBankName.Equals(input.IssuerBankName))
                ) && 
                (
                    this.DekDataId == input.DekDataId ||
                    (this.DekDataId != null &&
                    this.DekDataId.Equals(input.DekDataId))
                ) && 
                (
                    this.DekData == input.DekData ||
                    (this.DekData != null &&
                    this.DekData.Equals(input.DekData))
                ) && 
                (
                    this.PisMember == input.PisMember ||
                    (this.PisMember != null &&
                    this.PisMember.Equals(input.PisMember))
                ) && 
                (
                    this.AccountUpdaterPendingCards == input.AccountUpdaterPendingCards ||
                    this.AccountUpdaterPendingCards != null &&
                    this.AccountUpdaterPendingCards.SequenceEqual(input.AccountUpdaterPendingCards)
                ) && 
                (
                    this.CardStateLogs == input.CardStateLogs ||
                    this.CardStateLogs != null &&
                    this.CardStateLogs.SequenceEqual(input.CardStateLogs)
                ) && 
                (
                    this.FraudDetectionLogs == input.FraudDetectionLogs ||
                    this.FraudDetectionLogs != null &&
                    this.FraudDetectionLogs.SequenceEqual(input.FraudDetectionLogs)
                ) && 
                (
                    this.InstallmentPlanAuditLogs == input.InstallmentPlanAuditLogs ||
                    this.InstallmentPlanAuditLogs != null &&
                    this.InstallmentPlanAuditLogs.SequenceEqual(input.InstallmentPlanAuditLogs)
                ) && 
                (
                    this.InstallmentPlans == input.InstallmentPlans ||
                    this.InstallmentPlans != null &&
                    this.InstallmentPlans.SequenceEqual(input.InstallmentPlans)
                ) && 
                (
                    this.AddressData == input.AddressData ||
                    (this.AddressData != null &&
                    this.AddressData.Equals(input.AddressData))
                ) && 
                (
                    this.EncryptedNumber == input.EncryptedNumber ||
                    (this.EncryptedNumber != null &&
                    this.EncryptedNumber.Equals(input.EncryptedNumber))
                ) && 
                (
                    this.Dek == input.Dek ||
                    (this.Dek != null &&
                    this.Dek.Equals(input.Dek))
                ) && 
                (
                    this.MaskedNumber == input.MaskedNumber ||
                    (this.MaskedNumber != null &&
                    this.MaskedNumber.Equals(input.MaskedNumber))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.BinCardBrand == input.BinCardBrand ||
                    (this.BinCardBrand != null &&
                    this.BinCardBrand.Equals(input.BinCardBrand))
                ) && 
                (
                    this.BinCardType == input.BinCardType ||
                    (this.BinCardType != null &&
                    this.BinCardType.Equals(input.BinCardType))
                ) && 
                (
                    this.Cvv == input.Cvv ||
                    (this.Cvv != null &&
                    this.Cvv.Equals(input.Cvv))
                ) && 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.KekId != null)
                    hashCode = hashCode * 59 + this.KekId.GetHashCode();
                if (this.BinBinNumber != null)
                    hashCode = hashCode * 59 + this.BinBinNumber.GetHashCode();
                if (this.BinIssuingCountryIsoNumber != null)
                    hashCode = hashCode * 59 + this.BinIssuingCountryIsoNumber.GetHashCode();
                if (this.BinId != null)
                    hashCode = hashCode * 59 + this.BinId.GetHashCode();
                if (this.ExpirationMonth != null)
                    hashCode = hashCode * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hashCode = hashCode * 59 + this.ExpirationYear.GetHashCode();
                if (this.AddressDataAddressLine != null)
                    hashCode = hashCode * 59 + this.AddressDataAddressLine.GetHashCode();
                if (this.AddressDataZip != null)
                    hashCode = hashCode * 59 + this.AddressDataZip.GetHashCode();
                if (this.IsDeleted != null)
                    hashCode = hashCode * 59 + this.IsDeleted.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.PisMemberUniqueId != null)
                    hashCode = hashCode * 59 + this.PisMemberUniqueId.GetHashCode();
                if (this.PisMemberId != null)
                    hashCode = hashCode * 59 + this.PisMemberId.GetHashCode();
                if (this.AddressDataAddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressDataAddressLine2.GetHashCode();
                if (this.AddressDataCity != null)
                    hashCode = hashCode * 59 + this.AddressDataCity.GetHashCode();
                if (this.AddressDataCountryId != null)
                    hashCode = hashCode * 59 + this.AddressDataCountryId.GetHashCode();
                if (this.AddressDataStateId != null)
                    hashCode = hashCode * 59 + this.AddressDataStateId.GetHashCode();
                if (this.AddressDataLegacyFullAddressLine != null)
                    hashCode = hashCode * 59 + this.AddressDataLegacyFullAddressLine.GetHashCode();
                if (this.BinIsPrepaid != null)
                    hashCode = hashCode * 59 + this.BinIsPrepaid.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.Kek != null)
                    hashCode = hashCode * 59 + this.Kek.GetHashCode();
                if (this.CardClass != null)
                    hashCode = hashCode * 59 + this.CardClass.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.IssuerBankName != null)
                    hashCode = hashCode * 59 + this.IssuerBankName.GetHashCode();
                if (this.DekDataId != null)
                    hashCode = hashCode * 59 + this.DekDataId.GetHashCode();
                if (this.DekData != null)
                    hashCode = hashCode * 59 + this.DekData.GetHashCode();
                if (this.PisMember != null)
                    hashCode = hashCode * 59 + this.PisMember.GetHashCode();
                if (this.AccountUpdaterPendingCards != null)
                    hashCode = hashCode * 59 + this.AccountUpdaterPendingCards.GetHashCode();
                if (this.CardStateLogs != null)
                    hashCode = hashCode * 59 + this.CardStateLogs.GetHashCode();
                if (this.FraudDetectionLogs != null)
                    hashCode = hashCode * 59 + this.FraudDetectionLogs.GetHashCode();
                if (this.InstallmentPlanAuditLogs != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanAuditLogs.GetHashCode();
                if (this.InstallmentPlans != null)
                    hashCode = hashCode * 59 + this.InstallmentPlans.GetHashCode();
                if (this.AddressData != null)
                    hashCode = hashCode * 59 + this.AddressData.GetHashCode();
                if (this.EncryptedNumber != null)
                    hashCode = hashCode * 59 + this.EncryptedNumber.GetHashCode();
                if (this.Dek != null)
                    hashCode = hashCode * 59 + this.Dek.GetHashCode();
                if (this.MaskedNumber != null)
                    hashCode = hashCode * 59 + this.MaskedNumber.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.BinCardBrand != null)
                    hashCode = hashCode * 59 + this.BinCardBrand.GetHashCode();
                if (this.BinCardType != null)
                    hashCode = hashCode * 59 + this.BinCardType.GetHashCode();
                if (this.Cvv != null)
                    hashCode = hashCode * 59 + this.Cvv.GetHashCode();
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }
    }

}
