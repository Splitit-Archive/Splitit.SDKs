/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// AccountUpdaterSubscribersScopes
    /// </summary>
    [DataContract]
    public partial class AccountUpdaterSubscribersScopes :  IEquatable<AccountUpdaterSubscribersScopes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdaterSubscribersScopes" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountUpdaterSubscribersScopes() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdaterSubscribersScopes" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="terminalId">terminalId (required).</param>
        /// <param name="issuingCountryIso">issuingCountryIso.</param>
        /// <param name="terminal">terminal.</param>
        /// <param name="accountUpdaterProvider">accountUpdaterProvider (required).</param>
        /// <param name="cardBrand">cardBrand (required).</param>
        public AccountUpdaterSubscribersScopes(long? id = default(long?), long? terminalId = default(long?), string issuingCountryIso = default(string), Terminals terminal = default(Terminals), AccountUpdaterProvider accountUpdaterProvider = default(AccountUpdaterProvider), CardBrand cardBrand = default(CardBrand))
        {
            this.Id = id;
            this.TerminalId = terminalId;
            this.AccountUpdaterProvider = accountUpdaterProvider;
            this.CardBrand = cardBrand;
            this.IssuingCountryIso = issuingCountryIso;
            this.Terminal = terminal;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="TerminalId", EmitDefaultValue=false)]
        public long? TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets IssuingCountryIso
        /// </summary>
        [DataMember(Name="IssuingCountryIso", EmitDefaultValue=false)]
        public string IssuingCountryIso { get; set; }

        /// <summary>
        /// Gets or Sets Terminal
        /// </summary>
        [DataMember(Name="Terminal", EmitDefaultValue=false)]
        public Terminals Terminal { get; set; }

        /// <summary>
        /// Gets or Sets AccountUpdaterProvider
        /// </summary>
        [DataMember(Name="AccountUpdaterProvider", EmitDefaultValue=false)]
        public AccountUpdaterProvider AccountUpdaterProvider { get; set; }

        /// <summary>
        /// Gets or Sets CardBrand
        /// </summary>
        [DataMember(Name="CardBrand", EmitDefaultValue=false)]
        public CardBrand CardBrand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountUpdaterSubscribersScopes {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  IssuingCountryIso: ").Append(IssuingCountryIso).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  AccountUpdaterProvider: ").Append(AccountUpdaterProvider).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountUpdaterSubscribersScopes);
        }

        /// <summary>
        /// Returns true if AccountUpdaterSubscribersScopes instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountUpdaterSubscribersScopes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountUpdaterSubscribersScopes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.IssuingCountryIso == input.IssuingCountryIso ||
                    (this.IssuingCountryIso != null &&
                    this.IssuingCountryIso.Equals(input.IssuingCountryIso))
                ) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && 
                (
                    this.AccountUpdaterProvider == input.AccountUpdaterProvider ||
                    (this.AccountUpdaterProvider != null &&
                    this.AccountUpdaterProvider.Equals(input.AccountUpdaterProvider))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.IssuingCountryIso != null)
                    hashCode = hashCode * 59 + this.IssuingCountryIso.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.AccountUpdaterProvider != null)
                    hashCode = hashCode * 59 + this.AccountUpdaterProvider.GetHashCode();
                if (this.CardBrand != null)
                    hashCode = hashCode * 59 + this.CardBrand.GetHashCode();
                return hashCode;
            }
        }
    }

}
