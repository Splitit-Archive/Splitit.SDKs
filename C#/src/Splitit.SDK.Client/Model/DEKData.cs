/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// DEKData
    /// </summary>
    [DataContract]
    public partial class DEKData :  IEquatable<DEKData>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DEKData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DEKData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DEKData" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="ciphertextBlob">ciphertextBlob.</param>
        /// <param name="isActive">isActive (required).</param>
        /// <param name="dekCards">dekCards.</param>
        public DEKData(long? id = default(long?), string ciphertextBlob = default(string), bool? isActive = default(bool?), List<Cards> dekCards = default(List<Cards>))
        {
            this.Id = id;
            this.IsActive = isActive;
            this.CiphertextBlob = ciphertextBlob;
            this.DekCards = dekCards;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CiphertextBlob
        /// </summary>
        [DataMember(Name="CiphertextBlob", EmitDefaultValue=false)]
        public string CiphertextBlob { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets DekCards
        /// </summary>
        [DataMember(Name="DekCards", EmitDefaultValue=false)]
        public List<Cards> DekCards { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DEKData {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CiphertextBlob: ").Append(CiphertextBlob).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  DekCards: ").Append(DekCards).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DEKData);
        }

        /// <summary>
        /// Returns true if DEKData instances are equal
        /// </summary>
        /// <param name="input">Instance of DEKData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DEKData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CiphertextBlob == input.CiphertextBlob ||
                    (this.CiphertextBlob != null &&
                    this.CiphertextBlob.Equals(input.CiphertextBlob))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.DekCards == input.DekCards ||
                    this.DekCards != null &&
                    this.DekCards.SequenceEqual(input.DekCards)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CiphertextBlob != null)
                    hashCode = hashCode * 59 + this.CiphertextBlob.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.DekCards != null)
                    hashCode = hashCode * 59 + this.DekCards.GetHashCode();
                return hashCode;
            }
        }
    }

}
