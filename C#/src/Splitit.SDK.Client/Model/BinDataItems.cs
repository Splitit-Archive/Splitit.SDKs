/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// BinDataItems
    /// </summary>
    [DataContract]
    public partial class BinDataItems :  IEquatable<BinDataItems>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BinDataItems" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BinDataItems() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BinDataItems" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="lowBin">lowBin.</param>
        /// <param name="highBin">highBin.</param>
        /// <param name="binLength">binLength (required).</param>
        /// <param name="binDetailPan">binDetailPan (required).</param>
        /// <param name="issuerBankName">issuerBankName.</param>
        /// <param name="issueCountryId">issueCountryId.</param>
        /// <param name="detailCardIndicator">detailCardIndicator.</param>
        /// <param name="issuerUpdateDate">issuerUpdateDate (required).</param>
        /// <param name="ebtState">ebtState.</param>
        /// <param name="isDebitSignatureNetworkParticipant">isDebitSignatureNetworkParticipant (required).</param>
        /// <param name="isFsa">isFsa (required).</param>
        /// <param name="isPrepaid">isPrepaid (required).</param>
        /// <param name="productId">productId.</param>
        /// <param name="regulatorIndicator">regulatorIndicator.</param>
        /// <param name="visaProductSubType">visaProductSubType.</param>
        /// <param name="visaLargeTicketIndicator">visaLargeTicketIndicator.</param>
        /// <param name="accountLevelProcessingIndicator">accountLevelProcessingIndicator.</param>
        /// <param name="cardClass">cardClass.</param>
        /// <param name="panLengthMin">panLengthMin (required).</param>
        /// <param name="panLengthMax">panLengthMax (required).</param>
        /// <param name="tokenIndicator">tokenIndicator.</param>
        /// <param name="issuingNetwork">issuingNetwork.</param>
        /// <param name="cardHolderBillingCurrency">cardHolderBillingCurrency.</param>
        /// <param name="moneySendIndicator">moneySendIndicator.</param>
        /// <param name="originalCreditMoneyTransferIndicator">originalCreditMoneyTransferIndicator.</param>
        /// <param name="originalCreditOnlineGamblingIndicator">originalCreditOnlineGamblingIndicator.</param>
        /// <param name="originalCreditTransactionIndicator">originalCreditTransactionIndicator.</param>
        /// <param name="fastFunds">fastFunds.</param>
        /// <param name="reservedField">reservedField.</param>
        /// <param name="issueCountry">issueCountry.</param>
        /// <param name="cardBrand">cardBrand (required).</param>
        /// <param name="cardType">cardType (required).</param>
        public BinDataItems(long? id = default(long?), string lowBin = default(string), string highBin = default(string), int? binLength = default(int?), int? binDetailPan = default(int?), string issuerBankName = default(string), long? issueCountryId = default(long?), string detailCardIndicator = default(string), DateTime? issuerUpdateDate = default(DateTime?), string ebtState = default(string), bool? isDebitSignatureNetworkParticipant = default(bool?), bool? isFsa = default(bool?), bool? isPrepaid = default(bool?), string productId = default(string), string regulatorIndicator = default(string), string visaProductSubType = default(string), string visaLargeTicketIndicator = default(string), string accountLevelProcessingIndicator = default(string), string cardClass = default(string), int? panLengthMin = default(int?), int? panLengthMax = default(int?), string tokenIndicator = default(string), string issuingNetwork = default(string), string cardHolderBillingCurrency = default(string), string moneySendIndicator = default(string), string originalCreditMoneyTransferIndicator = default(string), string originalCreditOnlineGamblingIndicator = default(string), string originalCreditTransactionIndicator = default(string), string fastFunds = default(string), string reservedField = default(string), Countries issueCountry = default(Countries), CardBrand cardBrand = default(CardBrand), CardType cardType = default(CardType))
        {
            this.Id = id;
            this.BinLength = binLength;
            this.BinDetailPan = binDetailPan;
            this.IssuerUpdateDate = issuerUpdateDate;
            this.IsDebitSignatureNetworkParticipant = isDebitSignatureNetworkParticipant;
            this.IsFsa = isFsa;
            this.IsPrepaid = isPrepaid;
            this.PanLengthMin = panLengthMin;
            this.PanLengthMax = panLengthMax;
            this.CardBrand = cardBrand;
            this.CardType = cardType;
            this.LowBin = lowBin;
            this.HighBin = highBin;
            this.IssuerBankName = issuerBankName;
            this.IssueCountryId = issueCountryId;
            this.DetailCardIndicator = detailCardIndicator;
            this.EbtState = ebtState;
            this.ProductId = productId;
            this.RegulatorIndicator = regulatorIndicator;
            this.VisaProductSubType = visaProductSubType;
            this.VisaLargeTicketIndicator = visaLargeTicketIndicator;
            this.AccountLevelProcessingIndicator = accountLevelProcessingIndicator;
            this.CardClass = cardClass;
            this.TokenIndicator = tokenIndicator;
            this.IssuingNetwork = issuingNetwork;
            this.CardHolderBillingCurrency = cardHolderBillingCurrency;
            this.MoneySendIndicator = moneySendIndicator;
            this.OriginalCreditMoneyTransferIndicator = originalCreditMoneyTransferIndicator;
            this.OriginalCreditOnlineGamblingIndicator = originalCreditOnlineGamblingIndicator;
            this.OriginalCreditTransactionIndicator = originalCreditTransactionIndicator;
            this.FastFunds = fastFunds;
            this.ReservedField = reservedField;
            this.IssueCountry = issueCountry;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets LowBin
        /// </summary>
        [DataMember(Name="LowBin", EmitDefaultValue=false)]
        public string LowBin { get; set; }

        /// <summary>
        /// Gets or Sets HighBin
        /// </summary>
        [DataMember(Name="HighBin", EmitDefaultValue=false)]
        public string HighBin { get; set; }

        /// <summary>
        /// Gets or Sets BinLength
        /// </summary>
        [DataMember(Name="BinLength", EmitDefaultValue=false)]
        public int? BinLength { get; set; }

        /// <summary>
        /// Gets or Sets BinDetailPan
        /// </summary>
        [DataMember(Name="BinDetailPan", EmitDefaultValue=false)]
        public int? BinDetailPan { get; set; }

        /// <summary>
        /// Gets or Sets IssuerBankName
        /// </summary>
        [DataMember(Name="IssuerBankName", EmitDefaultValue=false)]
        public string IssuerBankName { get; set; }

        /// <summary>
        /// Gets or Sets IssueCountryId
        /// </summary>
        [DataMember(Name="IssueCountryId", EmitDefaultValue=false)]
        public long? IssueCountryId { get; set; }

        /// <summary>
        /// Gets or Sets DetailCardIndicator
        /// </summary>
        [DataMember(Name="DetailCardIndicator", EmitDefaultValue=false)]
        public string DetailCardIndicator { get; set; }

        /// <summary>
        /// Gets or Sets IssuerUpdateDate
        /// </summary>
        [DataMember(Name="IssuerUpdateDate", EmitDefaultValue=false)]
        public DateTime? IssuerUpdateDate { get; set; }

        /// <summary>
        /// Gets or Sets EbtState
        /// </summary>
        [DataMember(Name="EbtState", EmitDefaultValue=false)]
        public string EbtState { get; set; }

        /// <summary>
        /// Gets or Sets IsDebitSignatureNetworkParticipant
        /// </summary>
        [DataMember(Name="IsDebitSignatureNetworkParticipant", EmitDefaultValue=false)]
        public bool? IsDebitSignatureNetworkParticipant { get; set; }

        /// <summary>
        /// Gets or Sets IsFsa
        /// </summary>
        [DataMember(Name="IsFsa", EmitDefaultValue=false)]
        public bool? IsFsa { get; set; }

        /// <summary>
        /// Gets or Sets IsPrepaid
        /// </summary>
        [DataMember(Name="IsPrepaid", EmitDefaultValue=false)]
        public bool? IsPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="ProductId", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets RegulatorIndicator
        /// </summary>
        [DataMember(Name="RegulatorIndicator", EmitDefaultValue=false)]
        public string RegulatorIndicator { get; set; }

        /// <summary>
        /// Gets or Sets VisaProductSubType
        /// </summary>
        [DataMember(Name="VisaProductSubType", EmitDefaultValue=false)]
        public string VisaProductSubType { get; set; }

        /// <summary>
        /// Gets or Sets VisaLargeTicketIndicator
        /// </summary>
        [DataMember(Name="VisaLargeTicketIndicator", EmitDefaultValue=false)]
        public string VisaLargeTicketIndicator { get; set; }

        /// <summary>
        /// Gets or Sets AccountLevelProcessingIndicator
        /// </summary>
        [DataMember(Name="AccountLevelProcessingIndicator", EmitDefaultValue=false)]
        public string AccountLevelProcessingIndicator { get; set; }

        /// <summary>
        /// Gets or Sets CardClass
        /// </summary>
        [DataMember(Name="CardClass", EmitDefaultValue=false)]
        public string CardClass { get; set; }

        /// <summary>
        /// Gets or Sets PanLengthMin
        /// </summary>
        [DataMember(Name="PanLengthMin", EmitDefaultValue=false)]
        public int? PanLengthMin { get; set; }

        /// <summary>
        /// Gets or Sets PanLengthMax
        /// </summary>
        [DataMember(Name="PanLengthMax", EmitDefaultValue=false)]
        public int? PanLengthMax { get; set; }

        /// <summary>
        /// Gets or Sets TokenIndicator
        /// </summary>
        [DataMember(Name="TokenIndicator", EmitDefaultValue=false)]
        public string TokenIndicator { get; set; }

        /// <summary>
        /// Gets or Sets IssuingNetwork
        /// </summary>
        [DataMember(Name="IssuingNetwork", EmitDefaultValue=false)]
        public string IssuingNetwork { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderBillingCurrency
        /// </summary>
        [DataMember(Name="CardHolderBillingCurrency", EmitDefaultValue=false)]
        public string CardHolderBillingCurrency { get; set; }

        /// <summary>
        /// Gets or Sets MoneySendIndicator
        /// </summary>
        [DataMember(Name="MoneySendIndicator", EmitDefaultValue=false)]
        public string MoneySendIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCreditMoneyTransferIndicator
        /// </summary>
        [DataMember(Name="OriginalCreditMoneyTransferIndicator", EmitDefaultValue=false)]
        public string OriginalCreditMoneyTransferIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCreditOnlineGamblingIndicator
        /// </summary>
        [DataMember(Name="OriginalCreditOnlineGamblingIndicator", EmitDefaultValue=false)]
        public string OriginalCreditOnlineGamblingIndicator { get; set; }

        /// <summary>
        /// Gets or Sets OriginalCreditTransactionIndicator
        /// </summary>
        [DataMember(Name="OriginalCreditTransactionIndicator", EmitDefaultValue=false)]
        public string OriginalCreditTransactionIndicator { get; set; }

        /// <summary>
        /// Gets or Sets FastFunds
        /// </summary>
        [DataMember(Name="FastFunds", EmitDefaultValue=false)]
        public string FastFunds { get; set; }

        /// <summary>
        /// Gets or Sets ReservedField
        /// </summary>
        [DataMember(Name="ReservedField", EmitDefaultValue=false)]
        public string ReservedField { get; set; }

        /// <summary>
        /// Gets or Sets IssueCountry
        /// </summary>
        [DataMember(Name="IssueCountry", EmitDefaultValue=false)]
        public Countries IssueCountry { get; set; }

        /// <summary>
        /// Gets or Sets CardBrand
        /// </summary>
        [DataMember(Name="CardBrand", EmitDefaultValue=false)]
        public CardBrand CardBrand { get; set; }

        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name="CardType", EmitDefaultValue=false)]
        public CardType CardType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinDataItems {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LowBin: ").Append(LowBin).Append("\n");
            sb.Append("  HighBin: ").Append(HighBin).Append("\n");
            sb.Append("  BinLength: ").Append(BinLength).Append("\n");
            sb.Append("  BinDetailPan: ").Append(BinDetailPan).Append("\n");
            sb.Append("  IssuerBankName: ").Append(IssuerBankName).Append("\n");
            sb.Append("  IssueCountryId: ").Append(IssueCountryId).Append("\n");
            sb.Append("  DetailCardIndicator: ").Append(DetailCardIndicator).Append("\n");
            sb.Append("  IssuerUpdateDate: ").Append(IssuerUpdateDate).Append("\n");
            sb.Append("  EbtState: ").Append(EbtState).Append("\n");
            sb.Append("  IsDebitSignatureNetworkParticipant: ").Append(IsDebitSignatureNetworkParticipant).Append("\n");
            sb.Append("  IsFsa: ").Append(IsFsa).Append("\n");
            sb.Append("  IsPrepaid: ").Append(IsPrepaid).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  RegulatorIndicator: ").Append(RegulatorIndicator).Append("\n");
            sb.Append("  VisaProductSubType: ").Append(VisaProductSubType).Append("\n");
            sb.Append("  VisaLargeTicketIndicator: ").Append(VisaLargeTicketIndicator).Append("\n");
            sb.Append("  AccountLevelProcessingIndicator: ").Append(AccountLevelProcessingIndicator).Append("\n");
            sb.Append("  CardClass: ").Append(CardClass).Append("\n");
            sb.Append("  PanLengthMin: ").Append(PanLengthMin).Append("\n");
            sb.Append("  PanLengthMax: ").Append(PanLengthMax).Append("\n");
            sb.Append("  TokenIndicator: ").Append(TokenIndicator).Append("\n");
            sb.Append("  IssuingNetwork: ").Append(IssuingNetwork).Append("\n");
            sb.Append("  CardHolderBillingCurrency: ").Append(CardHolderBillingCurrency).Append("\n");
            sb.Append("  MoneySendIndicator: ").Append(MoneySendIndicator).Append("\n");
            sb.Append("  OriginalCreditMoneyTransferIndicator: ").Append(OriginalCreditMoneyTransferIndicator).Append("\n");
            sb.Append("  OriginalCreditOnlineGamblingIndicator: ").Append(OriginalCreditOnlineGamblingIndicator).Append("\n");
            sb.Append("  OriginalCreditTransactionIndicator: ").Append(OriginalCreditTransactionIndicator).Append("\n");
            sb.Append("  FastFunds: ").Append(FastFunds).Append("\n");
            sb.Append("  ReservedField: ").Append(ReservedField).Append("\n");
            sb.Append("  IssueCountry: ").Append(IssueCountry).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BinDataItems);
        }

        /// <summary>
        /// Returns true if BinDataItems instances are equal
        /// </summary>
        /// <param name="input">Instance of BinDataItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinDataItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LowBin == input.LowBin ||
                    (this.LowBin != null &&
                    this.LowBin.Equals(input.LowBin))
                ) && 
                (
                    this.HighBin == input.HighBin ||
                    (this.HighBin != null &&
                    this.HighBin.Equals(input.HighBin))
                ) && 
                (
                    this.BinLength == input.BinLength ||
                    (this.BinLength != null &&
                    this.BinLength.Equals(input.BinLength))
                ) && 
                (
                    this.BinDetailPan == input.BinDetailPan ||
                    (this.BinDetailPan != null &&
                    this.BinDetailPan.Equals(input.BinDetailPan))
                ) && 
                (
                    this.IssuerBankName == input.IssuerBankName ||
                    (this.IssuerBankName != null &&
                    this.IssuerBankName.Equals(input.IssuerBankName))
                ) && 
                (
                    this.IssueCountryId == input.IssueCountryId ||
                    (this.IssueCountryId != null &&
                    this.IssueCountryId.Equals(input.IssueCountryId))
                ) && 
                (
                    this.DetailCardIndicator == input.DetailCardIndicator ||
                    (this.DetailCardIndicator != null &&
                    this.DetailCardIndicator.Equals(input.DetailCardIndicator))
                ) && 
                (
                    this.IssuerUpdateDate == input.IssuerUpdateDate ||
                    (this.IssuerUpdateDate != null &&
                    this.IssuerUpdateDate.Equals(input.IssuerUpdateDate))
                ) && 
                (
                    this.EbtState == input.EbtState ||
                    (this.EbtState != null &&
                    this.EbtState.Equals(input.EbtState))
                ) && 
                (
                    this.IsDebitSignatureNetworkParticipant == input.IsDebitSignatureNetworkParticipant ||
                    (this.IsDebitSignatureNetworkParticipant != null &&
                    this.IsDebitSignatureNetworkParticipant.Equals(input.IsDebitSignatureNetworkParticipant))
                ) && 
                (
                    this.IsFsa == input.IsFsa ||
                    (this.IsFsa != null &&
                    this.IsFsa.Equals(input.IsFsa))
                ) && 
                (
                    this.IsPrepaid == input.IsPrepaid ||
                    (this.IsPrepaid != null &&
                    this.IsPrepaid.Equals(input.IsPrepaid))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.RegulatorIndicator == input.RegulatorIndicator ||
                    (this.RegulatorIndicator != null &&
                    this.RegulatorIndicator.Equals(input.RegulatorIndicator))
                ) && 
                (
                    this.VisaProductSubType == input.VisaProductSubType ||
                    (this.VisaProductSubType != null &&
                    this.VisaProductSubType.Equals(input.VisaProductSubType))
                ) && 
                (
                    this.VisaLargeTicketIndicator == input.VisaLargeTicketIndicator ||
                    (this.VisaLargeTicketIndicator != null &&
                    this.VisaLargeTicketIndicator.Equals(input.VisaLargeTicketIndicator))
                ) && 
                (
                    this.AccountLevelProcessingIndicator == input.AccountLevelProcessingIndicator ||
                    (this.AccountLevelProcessingIndicator != null &&
                    this.AccountLevelProcessingIndicator.Equals(input.AccountLevelProcessingIndicator))
                ) && 
                (
                    this.CardClass == input.CardClass ||
                    (this.CardClass != null &&
                    this.CardClass.Equals(input.CardClass))
                ) && 
                (
                    this.PanLengthMin == input.PanLengthMin ||
                    (this.PanLengthMin != null &&
                    this.PanLengthMin.Equals(input.PanLengthMin))
                ) && 
                (
                    this.PanLengthMax == input.PanLengthMax ||
                    (this.PanLengthMax != null &&
                    this.PanLengthMax.Equals(input.PanLengthMax))
                ) && 
                (
                    this.TokenIndicator == input.TokenIndicator ||
                    (this.TokenIndicator != null &&
                    this.TokenIndicator.Equals(input.TokenIndicator))
                ) && 
                (
                    this.IssuingNetwork == input.IssuingNetwork ||
                    (this.IssuingNetwork != null &&
                    this.IssuingNetwork.Equals(input.IssuingNetwork))
                ) && 
                (
                    this.CardHolderBillingCurrency == input.CardHolderBillingCurrency ||
                    (this.CardHolderBillingCurrency != null &&
                    this.CardHolderBillingCurrency.Equals(input.CardHolderBillingCurrency))
                ) && 
                (
                    this.MoneySendIndicator == input.MoneySendIndicator ||
                    (this.MoneySendIndicator != null &&
                    this.MoneySendIndicator.Equals(input.MoneySendIndicator))
                ) && 
                (
                    this.OriginalCreditMoneyTransferIndicator == input.OriginalCreditMoneyTransferIndicator ||
                    (this.OriginalCreditMoneyTransferIndicator != null &&
                    this.OriginalCreditMoneyTransferIndicator.Equals(input.OriginalCreditMoneyTransferIndicator))
                ) && 
                (
                    this.OriginalCreditOnlineGamblingIndicator == input.OriginalCreditOnlineGamblingIndicator ||
                    (this.OriginalCreditOnlineGamblingIndicator != null &&
                    this.OriginalCreditOnlineGamblingIndicator.Equals(input.OriginalCreditOnlineGamblingIndicator))
                ) && 
                (
                    this.OriginalCreditTransactionIndicator == input.OriginalCreditTransactionIndicator ||
                    (this.OriginalCreditTransactionIndicator != null &&
                    this.OriginalCreditTransactionIndicator.Equals(input.OriginalCreditTransactionIndicator))
                ) && 
                (
                    this.FastFunds == input.FastFunds ||
                    (this.FastFunds != null &&
                    this.FastFunds.Equals(input.FastFunds))
                ) && 
                (
                    this.ReservedField == input.ReservedField ||
                    (this.ReservedField != null &&
                    this.ReservedField.Equals(input.ReservedField))
                ) && 
                (
                    this.IssueCountry == input.IssueCountry ||
                    (this.IssueCountry != null &&
                    this.IssueCountry.Equals(input.IssueCountry))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LowBin != null)
                    hashCode = hashCode * 59 + this.LowBin.GetHashCode();
                if (this.HighBin != null)
                    hashCode = hashCode * 59 + this.HighBin.GetHashCode();
                if (this.BinLength != null)
                    hashCode = hashCode * 59 + this.BinLength.GetHashCode();
                if (this.BinDetailPan != null)
                    hashCode = hashCode * 59 + this.BinDetailPan.GetHashCode();
                if (this.IssuerBankName != null)
                    hashCode = hashCode * 59 + this.IssuerBankName.GetHashCode();
                if (this.IssueCountryId != null)
                    hashCode = hashCode * 59 + this.IssueCountryId.GetHashCode();
                if (this.DetailCardIndicator != null)
                    hashCode = hashCode * 59 + this.DetailCardIndicator.GetHashCode();
                if (this.IssuerUpdateDate != null)
                    hashCode = hashCode * 59 + this.IssuerUpdateDate.GetHashCode();
                if (this.EbtState != null)
                    hashCode = hashCode * 59 + this.EbtState.GetHashCode();
                if (this.IsDebitSignatureNetworkParticipant != null)
                    hashCode = hashCode * 59 + this.IsDebitSignatureNetworkParticipant.GetHashCode();
                if (this.IsFsa != null)
                    hashCode = hashCode * 59 + this.IsFsa.GetHashCode();
                if (this.IsPrepaid != null)
                    hashCode = hashCode * 59 + this.IsPrepaid.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.RegulatorIndicator != null)
                    hashCode = hashCode * 59 + this.RegulatorIndicator.GetHashCode();
                if (this.VisaProductSubType != null)
                    hashCode = hashCode * 59 + this.VisaProductSubType.GetHashCode();
                if (this.VisaLargeTicketIndicator != null)
                    hashCode = hashCode * 59 + this.VisaLargeTicketIndicator.GetHashCode();
                if (this.AccountLevelProcessingIndicator != null)
                    hashCode = hashCode * 59 + this.AccountLevelProcessingIndicator.GetHashCode();
                if (this.CardClass != null)
                    hashCode = hashCode * 59 + this.CardClass.GetHashCode();
                if (this.PanLengthMin != null)
                    hashCode = hashCode * 59 + this.PanLengthMin.GetHashCode();
                if (this.PanLengthMax != null)
                    hashCode = hashCode * 59 + this.PanLengthMax.GetHashCode();
                if (this.TokenIndicator != null)
                    hashCode = hashCode * 59 + this.TokenIndicator.GetHashCode();
                if (this.IssuingNetwork != null)
                    hashCode = hashCode * 59 + this.IssuingNetwork.GetHashCode();
                if (this.CardHolderBillingCurrency != null)
                    hashCode = hashCode * 59 + this.CardHolderBillingCurrency.GetHashCode();
                if (this.MoneySendIndicator != null)
                    hashCode = hashCode * 59 + this.MoneySendIndicator.GetHashCode();
                if (this.OriginalCreditMoneyTransferIndicator != null)
                    hashCode = hashCode * 59 + this.OriginalCreditMoneyTransferIndicator.GetHashCode();
                if (this.OriginalCreditOnlineGamblingIndicator != null)
                    hashCode = hashCode * 59 + this.OriginalCreditOnlineGamblingIndicator.GetHashCode();
                if (this.OriginalCreditTransactionIndicator != null)
                    hashCode = hashCode * 59 + this.OriginalCreditTransactionIndicator.GetHashCode();
                if (this.FastFunds != null)
                    hashCode = hashCode * 59 + this.FastFunds.GetHashCode();
                if (this.ReservedField != null)
                    hashCode = hashCode * 59 + this.ReservedField.GetHashCode();
                if (this.IssueCountry != null)
                    hashCode = hashCode * 59 + this.IssueCountry.GetHashCode();
                if (this.CardBrand != null)
                    hashCode = hashCode * 59 + this.CardBrand.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                return hashCode;
            }
        }
    }

}
