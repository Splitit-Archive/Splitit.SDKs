/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ConfigKeys
    /// </summary>
    [DataContract]
    public partial class ConfigKeys :  IEquatable<ConfigKeys>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigKeys" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigKeys() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigKeys" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="code">code.</param>
        /// <param name="touchPointId">touchPointId.</param>
        /// <param name="touchPoint">touchPoint.</param>
        /// <param name="configValues">configValues.</param>
        public ConfigKeys(long? id = default(long?), string name = default(string), string code = default(string), long? touchPointId = default(long?), TouchPoints touchPoint = default(TouchPoints), List<ConfigValues> configValues = default(List<ConfigValues>))
        {
            this.Id = id;
            this.Name = name;
            this.Code = code;
            this.TouchPointId = touchPointId;
            this.TouchPoint = touchPoint;
            this.ConfigValues = configValues;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointId
        /// </summary>
        [DataMember(Name="TouchPointId", EmitDefaultValue=false)]
        public long? TouchPointId { get; set; }

        /// <summary>
        /// Gets or Sets TouchPoint
        /// </summary>
        [DataMember(Name="TouchPoint", EmitDefaultValue=false)]
        public TouchPoints TouchPoint { get; set; }

        /// <summary>
        /// Gets or Sets ConfigValues
        /// </summary>
        [DataMember(Name="ConfigValues", EmitDefaultValue=false)]
        public List<ConfigValues> ConfigValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigKeys {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  TouchPointId: ").Append(TouchPointId).Append("\n");
            sb.Append("  TouchPoint: ").Append(TouchPoint).Append("\n");
            sb.Append("  ConfigValues: ").Append(ConfigValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigKeys);
        }

        /// <summary>
        /// Returns true if ConfigKeys instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigKeys to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigKeys input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.TouchPointId == input.TouchPointId ||
                    (this.TouchPointId != null &&
                    this.TouchPointId.Equals(input.TouchPointId))
                ) && 
                (
                    this.TouchPoint == input.TouchPoint ||
                    (this.TouchPoint != null &&
                    this.TouchPoint.Equals(input.TouchPoint))
                ) && 
                (
                    this.ConfigValues == input.ConfigValues ||
                    this.ConfigValues != null &&
                    this.ConfigValues.SequenceEqual(input.ConfigValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.TouchPointId != null)
                    hashCode = hashCode * 59 + this.TouchPointId.GetHashCode();
                if (this.TouchPoint != null)
                    hashCode = hashCode * 59 + this.TouchPoint.GetHashCode();
                if (this.ConfigValues != null)
                    hashCode = hashCode * 59 + this.ConfigValues.GetHashCode();
                return hashCode;
            }
        }
    }

}
