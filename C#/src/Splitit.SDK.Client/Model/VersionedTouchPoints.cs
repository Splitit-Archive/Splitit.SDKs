/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// VersionedTouchPoints
    /// </summary>
    [DataContract]
    public partial class VersionedTouchPoints :  IEquatable<VersionedTouchPoints>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedTouchPoints" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VersionedTouchPoints() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VersionedTouchPoints" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="version">version.</param>
        /// <param name="touchPointId">touchPointId (required).</param>
        /// <param name="subVersion">subVersion.</param>
        /// <param name="touchPoint">touchPoint.</param>
        /// <param name="pisSessions">pisSessions.</param>
        /// <param name="installmentPlanAuditLogs">installmentPlanAuditLogs.</param>
        public VersionedTouchPoints(long? id = default(long?), string version = default(string), long? touchPointId = default(long?), string subVersion = default(string), TouchPoints touchPoint = default(TouchPoints), List<PisSessions> pisSessions = default(List<PisSessions>), List<InstallmentPlanAuditLogs> installmentPlanAuditLogs = default(List<InstallmentPlanAuditLogs>))
        {
            this.Id = id;
            this.TouchPointId = touchPointId;
            this.Version = version;
            this.SubVersion = subVersion;
            this.TouchPoint = touchPoint;
            this.PisSessions = pisSessions;
            this.InstallmentPlanAuditLogs = installmentPlanAuditLogs;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointId
        /// </summary>
        [DataMember(Name="TouchPointId", EmitDefaultValue=false)]
        public long? TouchPointId { get; set; }

        /// <summary>
        /// Gets or Sets SubVersion
        /// </summary>
        [DataMember(Name="SubVersion", EmitDefaultValue=false)]
        public string SubVersion { get; set; }

        /// <summary>
        /// Gets or Sets TouchPoint
        /// </summary>
        [DataMember(Name="TouchPoint", EmitDefaultValue=false)]
        public TouchPoints TouchPoint { get; set; }

        /// <summary>
        /// Gets or Sets PisSessions
        /// </summary>
        [DataMember(Name="PisSessions", EmitDefaultValue=false)]
        public List<PisSessions> PisSessions { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanAuditLogs
        /// </summary>
        [DataMember(Name="InstallmentPlanAuditLogs", EmitDefaultValue=false)]
        public List<InstallmentPlanAuditLogs> InstallmentPlanAuditLogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionedTouchPoints {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  TouchPointId: ").Append(TouchPointId).Append("\n");
            sb.Append("  SubVersion: ").Append(SubVersion).Append("\n");
            sb.Append("  TouchPoint: ").Append(TouchPoint).Append("\n");
            sb.Append("  PisSessions: ").Append(PisSessions).Append("\n");
            sb.Append("  InstallmentPlanAuditLogs: ").Append(InstallmentPlanAuditLogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VersionedTouchPoints);
        }

        /// <summary>
        /// Returns true if VersionedTouchPoints instances are equal
        /// </summary>
        /// <param name="input">Instance of VersionedTouchPoints to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionedTouchPoints input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.TouchPointId == input.TouchPointId ||
                    (this.TouchPointId != null &&
                    this.TouchPointId.Equals(input.TouchPointId))
                ) && 
                (
                    this.SubVersion == input.SubVersion ||
                    (this.SubVersion != null &&
                    this.SubVersion.Equals(input.SubVersion))
                ) && 
                (
                    this.TouchPoint == input.TouchPoint ||
                    (this.TouchPoint != null &&
                    this.TouchPoint.Equals(input.TouchPoint))
                ) && 
                (
                    this.PisSessions == input.PisSessions ||
                    this.PisSessions != null &&
                    this.PisSessions.SequenceEqual(input.PisSessions)
                ) && 
                (
                    this.InstallmentPlanAuditLogs == input.InstallmentPlanAuditLogs ||
                    this.InstallmentPlanAuditLogs != null &&
                    this.InstallmentPlanAuditLogs.SequenceEqual(input.InstallmentPlanAuditLogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.TouchPointId != null)
                    hashCode = hashCode * 59 + this.TouchPointId.GetHashCode();
                if (this.SubVersion != null)
                    hashCode = hashCode * 59 + this.SubVersion.GetHashCode();
                if (this.TouchPoint != null)
                    hashCode = hashCode * 59 + this.TouchPoint.GetHashCode();
                if (this.PisSessions != null)
                    hashCode = hashCode * 59 + this.PisSessions.GetHashCode();
                if (this.InstallmentPlanAuditLogs != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanAuditLogs.GetHashCode();
                return hashCode;
            }
        }
    }

}
