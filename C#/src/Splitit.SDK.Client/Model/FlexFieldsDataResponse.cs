/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FlexFieldsDataResponse
    /// </summary>
    [DataContract]
    public partial class FlexFieldsDataResponse :  IEquatable<FlexFieldsDataResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexFieldsDataResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexFieldsDataResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexFieldsDataResponse" /> class.
        /// </summary>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="pickerType">pickerType.</param>
        /// <param name="isSecured">isSecured (required).</param>
        public FlexFieldsDataResponse(ResponseHeader responseHeader = default(ResponseHeader), string pickerType = default(string), bool? isSecured = default(bool?))
        {
            this.IsSecured = isSecured;
            this.ResponseHeader = responseHeader;
            this.PickerType = pickerType;
        }

        
        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name="ResponseHeader", EmitDefaultValue=false)]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets PickerType
        /// </summary>
        [DataMember(Name="PickerType", EmitDefaultValue=false)]
        public string PickerType { get; set; }

        /// <summary>
        /// Gets or Sets IsSecured
        /// </summary>
        [DataMember(Name="IsSecured", EmitDefaultValue=false)]
        public bool? IsSecured { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlexFieldsDataResponse {\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  PickerType: ").Append(PickerType).Append("\n");
            sb.Append("  IsSecured: ").Append(IsSecured).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexFieldsDataResponse);
        }

        /// <summary>
        /// Returns true if FlexFieldsDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexFieldsDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexFieldsDataResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseHeader == input.ResponseHeader ||
                    (this.ResponseHeader != null &&
                    this.ResponseHeader.Equals(input.ResponseHeader))
                ) && 
                (
                    this.PickerType == input.PickerType ||
                    (this.PickerType != null &&
                    this.PickerType.Equals(input.PickerType))
                ) && 
                (
                    this.IsSecured == input.IsSecured ||
                    (this.IsSecured != null &&
                    this.IsSecured.Equals(input.IsSecured))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseHeader != null)
                    hashCode = hashCode * 59 + this.ResponseHeader.GetHashCode();
                if (this.PickerType != null)
                    hashCode = hashCode * 59 + this.PickerType.GetHashCode();
                if (this.IsSecured != null)
                    hashCode = hashCode * 59 + this.IsSecured.GetHashCode();
                return hashCode;
            }
        }
    }

}
