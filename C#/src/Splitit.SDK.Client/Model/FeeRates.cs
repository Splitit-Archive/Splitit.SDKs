/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FeeRates
    /// </summary>
    [DataContract]
    public partial class FeeRates :  IEquatable<FeeRates>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeRates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeeRates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeRates" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="merchantValue">merchantValue (required).</param>
        /// <param name="agentValue">agentValue (required).</param>
        /// <param name="feeRateCollectionId">feeRateCollectionId (required).</param>
        /// <param name="agentFeeType">agentFeeType (required).</param>
        public FeeRates(long? id = default(long?), int? from = default(int?), int? to = default(int?), decimal? merchantValue = default(decimal?), decimal? agentValue = default(decimal?), long? feeRateCollectionId = default(long?), AgentFeeType agentFeeType = default(AgentFeeType))
        {
            this.Id = id;
            this.From = from;
            this.To = to;
            this.MerchantValue = merchantValue;
            this.AgentValue = agentValue;
            this.FeeRateCollectionId = feeRateCollectionId;
            this.AgentFeeType = agentFeeType;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public int? From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public int? To { get; set; }

        /// <summary>
        /// Gets or Sets MerchantValue
        /// </summary>
        [DataMember(Name="MerchantValue", EmitDefaultValue=false)]
        public decimal? MerchantValue { get; set; }

        /// <summary>
        /// Gets or Sets AgentValue
        /// </summary>
        [DataMember(Name="AgentValue", EmitDefaultValue=false)]
        public decimal? AgentValue { get; set; }

        /// <summary>
        /// Gets or Sets FeeRateCollectionId
        /// </summary>
        [DataMember(Name="FeeRateCollectionId", EmitDefaultValue=false)]
        public long? FeeRateCollectionId { get; set; }

        /// <summary>
        /// Gets or Sets AgentFeeType
        /// </summary>
        [DataMember(Name="AgentFeeType", EmitDefaultValue=false)]
        public AgentFeeType AgentFeeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeRates {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  MerchantValue: ").Append(MerchantValue).Append("\n");
            sb.Append("  AgentValue: ").Append(AgentValue).Append("\n");
            sb.Append("  FeeRateCollectionId: ").Append(FeeRateCollectionId).Append("\n");
            sb.Append("  AgentFeeType: ").Append(AgentFeeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeRates);
        }

        /// <summary>
        /// Returns true if FeeRates instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeRates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeRates input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.MerchantValue == input.MerchantValue ||
                    (this.MerchantValue != null &&
                    this.MerchantValue.Equals(input.MerchantValue))
                ) && 
                (
                    this.AgentValue == input.AgentValue ||
                    (this.AgentValue != null &&
                    this.AgentValue.Equals(input.AgentValue))
                ) && 
                (
                    this.FeeRateCollectionId == input.FeeRateCollectionId ||
                    (this.FeeRateCollectionId != null &&
                    this.FeeRateCollectionId.Equals(input.FeeRateCollectionId))
                ) && 
                (
                    this.AgentFeeType == input.AgentFeeType ||
                    (this.AgentFeeType != null &&
                    this.AgentFeeType.Equals(input.AgentFeeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.MerchantValue != null)
                    hashCode = hashCode * 59 + this.MerchantValue.GetHashCode();
                if (this.AgentValue != null)
                    hashCode = hashCode * 59 + this.AgentValue.GetHashCode();
                if (this.FeeRateCollectionId != null)
                    hashCode = hashCode * 59 + this.FeeRateCollectionId.GetHashCode();
                if (this.AgentFeeType != null)
                    hashCode = hashCode * 59 + this.AgentFeeType.GetHashCode();
                return hashCode;
            }
        }
    }

}
