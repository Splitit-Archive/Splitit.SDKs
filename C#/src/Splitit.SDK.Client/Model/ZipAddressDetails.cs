/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ZipAddressDetails
    /// </summary>
    [DataContract]
    public partial class ZipAddressDetails :  IEquatable<ZipAddressDetails>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipAddressDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ZipAddressDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipAddressDetails" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="countrySubdivisionId">countrySubdivisionId (required).</param>
        /// <param name="zip">zip.</param>
        /// <param name="countrySubdivision">countrySubdivision.</param>
        public ZipAddressDetails(long? id = default(long?), long? countrySubdivisionId = default(long?), string zip = default(string), CountrySubdivisions countrySubdivision = default(CountrySubdivisions))
        {
            this.Id = id;
            this.CountrySubdivisionId = countrySubdivisionId;
            this.Zip = zip;
            this.CountrySubdivision = countrySubdivision;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CountrySubdivisionId
        /// </summary>
        [DataMember(Name="CountrySubdivisionId", EmitDefaultValue=false)]
        public long? CountrySubdivisionId { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name="Zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets CountrySubdivision
        /// </summary>
        [DataMember(Name="CountrySubdivision", EmitDefaultValue=false)]
        public CountrySubdivisions CountrySubdivision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZipAddressDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CountrySubdivisionId: ").Append(CountrySubdivisionId).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  CountrySubdivision: ").Append(CountrySubdivision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZipAddressDetails);
        }

        /// <summary>
        /// Returns true if ZipAddressDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of ZipAddressDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZipAddressDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CountrySubdivisionId == input.CountrySubdivisionId ||
                    (this.CountrySubdivisionId != null &&
                    this.CountrySubdivisionId.Equals(input.CountrySubdivisionId))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.CountrySubdivision == input.CountrySubdivision ||
                    (this.CountrySubdivision != null &&
                    this.CountrySubdivision.Equals(input.CountrySubdivision))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CountrySubdivisionId != null)
                    hashCode = hashCode * 59 + this.CountrySubdivisionId.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.CountrySubdivision != null)
                    hashCode = hashCode * 59 + this.CountrySubdivision.GetHashCode();
                return hashCode;
            }
        }
    }

}
