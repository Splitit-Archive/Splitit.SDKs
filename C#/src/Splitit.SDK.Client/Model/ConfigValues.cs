/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ConfigValues
    /// </summary>
    [DataContract]
    public partial class ConfigValues :  IEquatable<ConfigValues>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigValues" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ConfigValues() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigValues" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="value">value.</param>
        /// <param name="configKeyId">configKeyId (required).</param>
        /// <param name="touchPointColorValuesId">touchPointColorValuesId.</param>
        /// <param name="configKey">configKey.</param>
        /// <param name="touchPointColorValues">touchPointColorValues.</param>
        public ConfigValues(long? id = default(long?), string value = default(string), long? configKeyId = default(long?), long? touchPointColorValuesId = default(long?), ConfigKeys configKey = default(ConfigKeys), TouchPointColorValues touchPointColorValues = default(TouchPointColorValues))
        {
            this.Id = id;
            this.ConfigKeyId = configKeyId;
            this.Value = value;
            this.TouchPointColorValuesId = touchPointColorValuesId;
            this.ConfigKey = configKey;
            this.TouchPointColorValues = touchPointColorValues;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ConfigKeyId
        /// </summary>
        [DataMember(Name="ConfigKeyId", EmitDefaultValue=false)]
        public long? ConfigKeyId { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointColorValuesId
        /// </summary>
        [DataMember(Name="TouchPointColorValuesId", EmitDefaultValue=false)]
        public long? TouchPointColorValuesId { get; set; }

        /// <summary>
        /// Gets or Sets ConfigKey
        /// </summary>
        [DataMember(Name="ConfigKey", EmitDefaultValue=false)]
        public ConfigKeys ConfigKey { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointColorValues
        /// </summary>
        [DataMember(Name="TouchPointColorValues", EmitDefaultValue=false)]
        public TouchPointColorValues TouchPointColorValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigValues {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ConfigKeyId: ").Append(ConfigKeyId).Append("\n");
            sb.Append("  TouchPointColorValuesId: ").Append(TouchPointColorValuesId).Append("\n");
            sb.Append("  ConfigKey: ").Append(ConfigKey).Append("\n");
            sb.Append("  TouchPointColorValues: ").Append(TouchPointColorValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigValues);
        }

        /// <summary>
        /// Returns true if ConfigValues instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigValues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigValues input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ConfigKeyId == input.ConfigKeyId ||
                    (this.ConfigKeyId != null &&
                    this.ConfigKeyId.Equals(input.ConfigKeyId))
                ) && 
                (
                    this.TouchPointColorValuesId == input.TouchPointColorValuesId ||
                    (this.TouchPointColorValuesId != null &&
                    this.TouchPointColorValuesId.Equals(input.TouchPointColorValuesId))
                ) && 
                (
                    this.ConfigKey == input.ConfigKey ||
                    (this.ConfigKey != null &&
                    this.ConfigKey.Equals(input.ConfigKey))
                ) && 
                (
                    this.TouchPointColorValues == input.TouchPointColorValues ||
                    (this.TouchPointColorValues != null &&
                    this.TouchPointColorValues.Equals(input.TouchPointColorValues))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ConfigKeyId != null)
                    hashCode = hashCode * 59 + this.ConfigKeyId.GetHashCode();
                if (this.TouchPointColorValuesId != null)
                    hashCode = hashCode * 59 + this.TouchPointColorValuesId.GetHashCode();
                if (this.ConfigKey != null)
                    hashCode = hashCode * 59 + this.ConfigKey.GetHashCode();
                if (this.TouchPointColorValues != null)
                    hashCode = hashCode * 59 + this.TouchPointColorValues.GetHashCode();
                return hashCode;
            }
        }
    }

}
