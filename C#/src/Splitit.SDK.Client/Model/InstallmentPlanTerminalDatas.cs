/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// InstallmentPlanTerminalDatas
    /// </summary>
    [DataContract]
    public partial class InstallmentPlanTerminalDatas :  IEquatable<InstallmentPlanTerminalDatas>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanTerminalDatas" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlanTerminalDatas() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanTerminalDatas" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="scpVariableCostAnnualPercent">scpVariableCostAnnualPercent (required).</param>
        /// <param name="scpFundingPercent">scpFundingPercent (required).</param>
        /// <param name="scpReservePoolPercent">scpReservePoolPercent (required).</param>
        /// <param name="scpReturnMerchantMaxDays">scpReturnMerchantMaxDays (required).</param>
        /// <param name="scpRevenueSharePercent">scpRevenueSharePercent (required).</param>
        /// <param name="scpFixedCost">scpFixedCost (required).</param>
        /// <param name="accountingCurrencyId">accountingCurrencyId.</param>
        /// <param name="fundingRuleScpSettingId">fundingRuleScpSettingId.</param>
        /// <param name="feesRuleDataId">feesRuleDataId.</param>
        /// <param name="accountingCurrency">accountingCurrency.</param>
        /// <param name="feesRuleData">feesRuleData.</param>
        /// <param name="fundingRuleScpSetting">fundingRuleScpSetting.</param>
        /// <param name="installmentPlans">installmentPlans.</param>
        public InstallmentPlanTerminalDatas(long? id = default(long?), decimal? scpVariableCostAnnualPercent = default(decimal?), decimal? scpFundingPercent = default(decimal?), decimal? scpReservePoolPercent = default(decimal?), int? scpReturnMerchantMaxDays = default(int?), decimal? scpRevenueSharePercent = default(decimal?), decimal? scpFixedCost = default(decimal?), long? accountingCurrencyId = default(long?), long? fundingRuleScpSettingId = default(long?), long? feesRuleDataId = default(long?), Currencies accountingCurrency = default(Currencies), FeesRuleDatas feesRuleData = default(FeesRuleDatas), FundingRuleDataScpProviderSetting fundingRuleScpSetting = default(FundingRuleDataScpProviderSetting), List<InstallmentPlans> installmentPlans = default(List<InstallmentPlans>))
        {
            this.Id = id;
            this.ScpVariableCostAnnualPercent = scpVariableCostAnnualPercent;
            this.ScpFundingPercent = scpFundingPercent;
            this.ScpReservePoolPercent = scpReservePoolPercent;
            this.ScpReturnMerchantMaxDays = scpReturnMerchantMaxDays;
            this.ScpRevenueSharePercent = scpRevenueSharePercent;
            this.ScpFixedCost = scpFixedCost;
            this.AccountingCurrencyId = accountingCurrencyId;
            this.FundingRuleScpSettingId = fundingRuleScpSettingId;
            this.FeesRuleDataId = feesRuleDataId;
            this.AccountingCurrency = accountingCurrency;
            this.FeesRuleData = feesRuleData;
            this.FundingRuleScpSetting = fundingRuleScpSetting;
            this.InstallmentPlans = installmentPlans;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ScpVariableCostAnnualPercent
        /// </summary>
        [DataMember(Name="ScpVariableCostAnnualPercent", EmitDefaultValue=false)]
        public decimal? ScpVariableCostAnnualPercent { get; set; }

        /// <summary>
        /// Gets or Sets ScpFundingPercent
        /// </summary>
        [DataMember(Name="ScpFundingPercent", EmitDefaultValue=false)]
        public decimal? ScpFundingPercent { get; set; }

        /// <summary>
        /// Gets or Sets ScpReservePoolPercent
        /// </summary>
        [DataMember(Name="ScpReservePoolPercent", EmitDefaultValue=false)]
        public decimal? ScpReservePoolPercent { get; set; }

        /// <summary>
        /// Gets or Sets ScpReturnMerchantMaxDays
        /// </summary>
        [DataMember(Name="ScpReturnMerchantMaxDays", EmitDefaultValue=false)]
        public int? ScpReturnMerchantMaxDays { get; set; }

        /// <summary>
        /// Gets or Sets ScpRevenueSharePercent
        /// </summary>
        [DataMember(Name="ScpRevenueSharePercent", EmitDefaultValue=false)]
        public decimal? ScpRevenueSharePercent { get; set; }

        /// <summary>
        /// Gets or Sets ScpFixedCost
        /// </summary>
        [DataMember(Name="ScpFixedCost", EmitDefaultValue=false)]
        public decimal? ScpFixedCost { get; set; }

        /// <summary>
        /// Gets or Sets AccountingCurrencyId
        /// </summary>
        [DataMember(Name="AccountingCurrencyId", EmitDefaultValue=false)]
        public long? AccountingCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets FundingRuleScpSettingId
        /// </summary>
        [DataMember(Name="FundingRuleScpSettingId", EmitDefaultValue=false)]
        public long? FundingRuleScpSettingId { get; set; }

        /// <summary>
        /// Gets or Sets FeesRuleDataId
        /// </summary>
        [DataMember(Name="FeesRuleDataId", EmitDefaultValue=false)]
        public long? FeesRuleDataId { get; set; }

        /// <summary>
        /// Gets or Sets AccountingCurrency
        /// </summary>
        [DataMember(Name="AccountingCurrency", EmitDefaultValue=false)]
        public Currencies AccountingCurrency { get; set; }

        /// <summary>
        /// Gets or Sets FeesRuleData
        /// </summary>
        [DataMember(Name="FeesRuleData", EmitDefaultValue=false)]
        public FeesRuleDatas FeesRuleData { get; set; }

        /// <summary>
        /// Gets or Sets FundingRuleScpSetting
        /// </summary>
        [DataMember(Name="FundingRuleScpSetting", EmitDefaultValue=false)]
        public FundingRuleDataScpProviderSetting FundingRuleScpSetting { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlans
        /// </summary>
        [DataMember(Name="InstallmentPlans", EmitDefaultValue=false)]
        public List<InstallmentPlans> InstallmentPlans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentPlanTerminalDatas {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScpVariableCostAnnualPercent: ").Append(ScpVariableCostAnnualPercent).Append("\n");
            sb.Append("  ScpFundingPercent: ").Append(ScpFundingPercent).Append("\n");
            sb.Append("  ScpReservePoolPercent: ").Append(ScpReservePoolPercent).Append("\n");
            sb.Append("  ScpReturnMerchantMaxDays: ").Append(ScpReturnMerchantMaxDays).Append("\n");
            sb.Append("  ScpRevenueSharePercent: ").Append(ScpRevenueSharePercent).Append("\n");
            sb.Append("  ScpFixedCost: ").Append(ScpFixedCost).Append("\n");
            sb.Append("  AccountingCurrencyId: ").Append(AccountingCurrencyId).Append("\n");
            sb.Append("  FundingRuleScpSettingId: ").Append(FundingRuleScpSettingId).Append("\n");
            sb.Append("  FeesRuleDataId: ").Append(FeesRuleDataId).Append("\n");
            sb.Append("  AccountingCurrency: ").Append(AccountingCurrency).Append("\n");
            sb.Append("  FeesRuleData: ").Append(FeesRuleData).Append("\n");
            sb.Append("  FundingRuleScpSetting: ").Append(FundingRuleScpSetting).Append("\n");
            sb.Append("  InstallmentPlans: ").Append(InstallmentPlans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlanTerminalDatas);
        }

        /// <summary>
        /// Returns true if InstallmentPlanTerminalDatas instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlanTerminalDatas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlanTerminalDatas input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ScpVariableCostAnnualPercent == input.ScpVariableCostAnnualPercent ||
                    (this.ScpVariableCostAnnualPercent != null &&
                    this.ScpVariableCostAnnualPercent.Equals(input.ScpVariableCostAnnualPercent))
                ) && 
                (
                    this.ScpFundingPercent == input.ScpFundingPercent ||
                    (this.ScpFundingPercent != null &&
                    this.ScpFundingPercent.Equals(input.ScpFundingPercent))
                ) && 
                (
                    this.ScpReservePoolPercent == input.ScpReservePoolPercent ||
                    (this.ScpReservePoolPercent != null &&
                    this.ScpReservePoolPercent.Equals(input.ScpReservePoolPercent))
                ) && 
                (
                    this.ScpReturnMerchantMaxDays == input.ScpReturnMerchantMaxDays ||
                    (this.ScpReturnMerchantMaxDays != null &&
                    this.ScpReturnMerchantMaxDays.Equals(input.ScpReturnMerchantMaxDays))
                ) && 
                (
                    this.ScpRevenueSharePercent == input.ScpRevenueSharePercent ||
                    (this.ScpRevenueSharePercent != null &&
                    this.ScpRevenueSharePercent.Equals(input.ScpRevenueSharePercent))
                ) && 
                (
                    this.ScpFixedCost == input.ScpFixedCost ||
                    (this.ScpFixedCost != null &&
                    this.ScpFixedCost.Equals(input.ScpFixedCost))
                ) && 
                (
                    this.AccountingCurrencyId == input.AccountingCurrencyId ||
                    (this.AccountingCurrencyId != null &&
                    this.AccountingCurrencyId.Equals(input.AccountingCurrencyId))
                ) && 
                (
                    this.FundingRuleScpSettingId == input.FundingRuleScpSettingId ||
                    (this.FundingRuleScpSettingId != null &&
                    this.FundingRuleScpSettingId.Equals(input.FundingRuleScpSettingId))
                ) && 
                (
                    this.FeesRuleDataId == input.FeesRuleDataId ||
                    (this.FeesRuleDataId != null &&
                    this.FeesRuleDataId.Equals(input.FeesRuleDataId))
                ) && 
                (
                    this.AccountingCurrency == input.AccountingCurrency ||
                    (this.AccountingCurrency != null &&
                    this.AccountingCurrency.Equals(input.AccountingCurrency))
                ) && 
                (
                    this.FeesRuleData == input.FeesRuleData ||
                    (this.FeesRuleData != null &&
                    this.FeesRuleData.Equals(input.FeesRuleData))
                ) && 
                (
                    this.FundingRuleScpSetting == input.FundingRuleScpSetting ||
                    (this.FundingRuleScpSetting != null &&
                    this.FundingRuleScpSetting.Equals(input.FundingRuleScpSetting))
                ) && 
                (
                    this.InstallmentPlans == input.InstallmentPlans ||
                    this.InstallmentPlans != null &&
                    this.InstallmentPlans.SequenceEqual(input.InstallmentPlans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ScpVariableCostAnnualPercent != null)
                    hashCode = hashCode * 59 + this.ScpVariableCostAnnualPercent.GetHashCode();
                if (this.ScpFundingPercent != null)
                    hashCode = hashCode * 59 + this.ScpFundingPercent.GetHashCode();
                if (this.ScpReservePoolPercent != null)
                    hashCode = hashCode * 59 + this.ScpReservePoolPercent.GetHashCode();
                if (this.ScpReturnMerchantMaxDays != null)
                    hashCode = hashCode * 59 + this.ScpReturnMerchantMaxDays.GetHashCode();
                if (this.ScpRevenueSharePercent != null)
                    hashCode = hashCode * 59 + this.ScpRevenueSharePercent.GetHashCode();
                if (this.ScpFixedCost != null)
                    hashCode = hashCode * 59 + this.ScpFixedCost.GetHashCode();
                if (this.AccountingCurrencyId != null)
                    hashCode = hashCode * 59 + this.AccountingCurrencyId.GetHashCode();
                if (this.FundingRuleScpSettingId != null)
                    hashCode = hashCode * 59 + this.FundingRuleScpSettingId.GetHashCode();
                if (this.FeesRuleDataId != null)
                    hashCode = hashCode * 59 + this.FeesRuleDataId.GetHashCode();
                if (this.AccountingCurrency != null)
                    hashCode = hashCode * 59 + this.AccountingCurrency.GetHashCode();
                if (this.FeesRuleData != null)
                    hashCode = hashCode * 59 + this.FeesRuleData.GetHashCode();
                if (this.FundingRuleScpSetting != null)
                    hashCode = hashCode * 59 + this.FundingRuleScpSetting.GetHashCode();
                if (this.InstallmentPlans != null)
                    hashCode = hashCode * 59 + this.InstallmentPlans.GetHashCode();
                return hashCode;
            }
        }
    }

}
