/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// TerminalCountries
    /// </summary>
    [DataContract]
    public partial class TerminalCountries :  IEquatable<TerminalCountries>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalCountries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TerminalCountries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalCountries" /> class.
        /// </summary>
        /// <param name="countryId">countryId (required).</param>
        /// <param name="country">country.</param>
        public TerminalCountries(long? countryId = default(long?), Countries country = default(Countries))
        {
            this.CountryId = countryId;
            this.Country = country;
        }

        
        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name="CountryId", EmitDefaultValue=false)]
        public long? CountryId { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public Countries Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TerminalCountries {\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalCountries);
        }

        /// <summary>
        /// Returns true if TerminalCountries instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalCountries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalCountries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }
    }

}
