/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// InstallmentPlans
    /// </summary>
    [DataContract]
    public partial class InstallmentPlans :  IEquatable<InstallmentPlans>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlans" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlans() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlans" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="terminalId">terminalId (required).</param>
        /// <param name="numberOfInstallments">numberOfInstallments (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="amountBeforeFees">amountBeforeFees (required).</param>
        /// <param name="eula">eula (required).</param>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        /// <param name="isFullCaptured">isFullCaptured (required).</param>
        /// <param name="beginLockTime">beginLockTime.</param>
        /// <param name="merchantFinancedDate">merchantFinancedDate.</param>
        /// <param name="merchantReserveReturnedDate">merchantReserveReturnedDate.</param>
        /// <param name="plannedFullCapture">plannedFullCapture.</param>
        /// <param name="installmentPlanTerminalDataId">installmentPlanTerminalDataId (required).</param>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="refOrderNumber">refOrderNumber.</param>
        /// <param name="activeCardId">activeCardId.</param>
        /// <param name="base64PngSignature">base64PngSignature.</param>
        /// <param name="isChargedBack">isChargedBack (required).</param>
        /// <param name="areChargesHeld">areChargesHeld (required).</param>
        /// <param name="autoRetry">autoRetry (required).</param>
        /// <param name="pisMemberUniqueId">pisMemberUniqueId.</param>
        /// <param name="pisMemberId">pisMemberId.</param>
        /// <param name="subtotal">subtotal (required).</param>
        /// <param name="tax">tax (required).</param>
        /// <param name="shipping">shipping (required).</param>
        /// <param name="setupContextId">setupContextId (required).</param>
        /// <param name="originalAmount">originalAmount (required).</param>
        /// <param name="refundAmount">refundAmount (required).</param>
        /// <param name="reservePoolAmount">reservePoolAmount (required).</param>
        /// <param name="shopperApprovalDateTime">shopperApprovalDateTime.</param>
        /// <param name="cancellationDateTime">cancellationDateTime.</param>
        /// <param name="activatedDate">activatedDate.</param>
        /// <param name="deActivatedDate">deActivatedDate.</param>
        /// <param name="amountForFunding">amountForFunding (required).</param>
        /// <param name="amountForFundingCurrency">amountForFundingCurrency.</param>
        /// <param name="amountForFundingExchangeRate">amountForFundingExchangeRate (required).</param>
        /// <param name="amountForFundingTransactionCurrency">amountForFundingTransactionCurrency (required).</param>
        /// <param name="activeCard">activeCard.</param>
        /// <param name="currency">currency.</param>
        /// <param name="installmentPlanTerminalData">installmentPlanTerminalData.</param>
        /// <param name="pisMember">pisMember.</param>
        /// <param name="setupContext">setupContext.</param>
        /// <param name="terminal">terminal.</param>
        /// <param name="cartItems">cartItems.</param>
        /// <param name="emailAuditLogs">emailAuditLogs.</param>
        /// <param name="feesDocuments">feesDocuments.</param>
        /// <param name="fraudDetectionLogs">fraudDetectionLogs.</param>
        /// <param name="fundingCollectDocumentDetails">fundingCollectDocumentDetails.</param>
        /// <param name="installmentPlanAuditLogs">installmentPlanAuditLogs.</param>
        /// <param name="installmentPlanEvents">installmentPlanEvents.</param>
        /// <param name="installmentPlanStatusLogEntries">installmentPlanStatusLogEntries.</param>
        /// <param name="installments">installments.</param>
        /// <param name="reAuthorizations">reAuthorizations.</param>
        /// <param name="refundLogEntries">refundLogEntries.</param>
        /// <param name="transferDocumentDetails">transferDocumentDetails.</param>
        /// <param name="activeTerminalDataId">activeTerminalDataId.</param>
        /// <param name="activeTerminalData">activeTerminalData.</param>
        /// <param name="delayResolution">delayResolution.</param>
        /// <param name="testMode">testMode (required).</param>
        /// <param name="fundingTypesId">fundingTypesId (required).</param>
        /// <param name="strategy">strategy (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="purchaseMethod">purchaseMethod (required).</param>
        /// <param name="extendedParamsSerializedData">extendedParamsSerializedData.</param>
        /// <param name="extendedParams">extendedParams.</param>
        /// <param name="autoCapture">autoCapture (required).</param>
        /// <param name="items">items.</param>
        /// <param name="amountDetails">amountDetails.</param>
        public InstallmentPlans(long? id = default(long?), long? terminalId = default(long?), long? numberOfInstallments = default(long?), decimal? amount = default(decimal?), decimal? amountBeforeFees = default(decimal?), bool? eula = default(bool?), string installmentPlanNumber = default(string), bool? isFullCaptured = default(bool?), DateTime? beginLockTime = default(DateTime?), DateTime? merchantFinancedDate = default(DateTime?), DateTime? merchantReserveReturnedDate = default(DateTime?), DateTime? plannedFullCapture = default(DateTime?), long? installmentPlanTerminalDataId = default(long?), long? currencyId = default(long?), string refOrderNumber = default(string), long? activeCardId = default(long?), string base64PngSignature = default(string), bool? isChargedBack = default(bool?), bool? areChargesHeld = default(bool?), bool? autoRetry = default(bool?), string pisMemberUniqueId = default(string), long? pisMemberId = default(long?), decimal? subtotal = default(decimal?), decimal? tax = default(decimal?), decimal? shipping = default(decimal?), long? setupContextId = default(long?), decimal? originalAmount = default(decimal?), decimal? refundAmount = default(decimal?), decimal? reservePoolAmount = default(decimal?), DateTime? shopperApprovalDateTime = default(DateTime?), DateTime? cancellationDateTime = default(DateTime?), DateTime? activatedDate = default(DateTime?), DateTime? deActivatedDate = default(DateTime?), decimal? amountForFunding = default(decimal?), Currencies amountForFundingCurrency = default(Currencies), decimal? amountForFundingExchangeRate = default(decimal?), decimal? amountForFundingTransactionCurrency = default(decimal?), Cards activeCard = default(Cards), Currencies currency = default(Currencies), InstallmentPlanTerminalDatas installmentPlanTerminalData = default(InstallmentPlanTerminalDatas), Object pisMember = default(Object), InstallmentPlanSetupContexts setupContext = default(InstallmentPlanSetupContexts), Terminals terminal = default(Terminals), List<CartItems> cartItems = default(List<CartItems>), List<EmailAuditLogs> emailAuditLogs = default(List<EmailAuditLogs>), List<FeesDocuments> feesDocuments = default(List<FeesDocuments>), List<FraudDetectionLogs> fraudDetectionLogs = default(List<FraudDetectionLogs>), List<FundingCollectDocumentDetails> fundingCollectDocumentDetails = default(List<FundingCollectDocumentDetails>), List<InstallmentPlanAuditLogs> installmentPlanAuditLogs = default(List<InstallmentPlanAuditLogs>), List<InstallmentPlanEvents> installmentPlanEvents = default(List<InstallmentPlanEvents>), List<InstallmentPlanStatusLogEntries> installmentPlanStatusLogEntries = default(List<InstallmentPlanStatusLogEntries>), List<Installments> installments = default(List<Installments>), List<ReAuthorizations> reAuthorizations = default(List<ReAuthorizations>), List<RefundLogEntries> refundLogEntries = default(List<RefundLogEntries>), List<TransferDocumentDetails> transferDocumentDetails = default(List<TransferDocumentDetails>), long? activeTerminalDataId = default(long?), TerminalGatewayDatas activeTerminalData = default(TerminalGatewayDatas), DelayResolution delayResolution = default(DelayResolution), TestModes testMode = default(TestModes), MoneyFlows fundingTypesId = default(MoneyFlows), PlanStrategy strategy = default(PlanStrategy), InstallmentPlanStatus status = default(InstallmentPlanStatus), PurchaseMethod purchaseMethod = default(PurchaseMethod), string extendedParamsSerializedData = default(string), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), bool? autoCapture = default(bool?), List<CartItems> items = default(List<CartItems>), AmountDetails2 amountDetails = default(AmountDetails2))
        {
            this.Id = id;
            this.TerminalId = terminalId;
            this.NumberOfInstallments = numberOfInstallments;
            this.Amount = amount;
            this.AmountBeforeFees = amountBeforeFees;
            this.Eula = eula;
            this.IsFullCaptured = isFullCaptured;
            this.InstallmentPlanTerminalDataId = installmentPlanTerminalDataId;
            this.CurrencyId = currencyId;
            this.IsChargedBack = isChargedBack;
            this.AreChargesHeld = areChargesHeld;
            this.AutoRetry = autoRetry;
            this.Subtotal = subtotal;
            this.Tax = tax;
            this.Shipping = shipping;
            this.SetupContextId = setupContextId;
            this.OriginalAmount = originalAmount;
            this.RefundAmount = refundAmount;
            this.ReservePoolAmount = reservePoolAmount;
            this.AmountForFunding = amountForFunding;
            this.AmountForFundingExchangeRate = amountForFundingExchangeRate;
            this.AmountForFundingTransactionCurrency = amountForFundingTransactionCurrency;
            this.TestMode = testMode;
            this.FundingTypesId = fundingTypesId;
            this.Strategy = strategy;
            this.Status = status;
            this.PurchaseMethod = purchaseMethod;
            this.AutoCapture = autoCapture;
            this.InstallmentPlanNumber = installmentPlanNumber;
            this.BeginLockTime = beginLockTime;
            this.MerchantFinancedDate = merchantFinancedDate;
            this.MerchantReserveReturnedDate = merchantReserveReturnedDate;
            this.PlannedFullCapture = plannedFullCapture;
            this.RefOrderNumber = refOrderNumber;
            this.ActiveCardId = activeCardId;
            this.Base64PngSignature = base64PngSignature;
            this.PisMemberUniqueId = pisMemberUniqueId;
            this.PisMemberId = pisMemberId;
            this.ShopperApprovalDateTime = shopperApprovalDateTime;
            this.CancellationDateTime = cancellationDateTime;
            this.ActivatedDate = activatedDate;
            this.DeActivatedDate = deActivatedDate;
            this.AmountForFundingCurrency = amountForFundingCurrency;
            this.ActiveCard = activeCard;
            this.Currency = currency;
            this.InstallmentPlanTerminalData = installmentPlanTerminalData;
            this.PisMember = pisMember;
            this.SetupContext = setupContext;
            this.Terminal = terminal;
            this.CartItems = cartItems;
            this.EmailAuditLogs = emailAuditLogs;
            this.FeesDocuments = feesDocuments;
            this.FraudDetectionLogs = fraudDetectionLogs;
            this.FundingCollectDocumentDetails = fundingCollectDocumentDetails;
            this.InstallmentPlanAuditLogs = installmentPlanAuditLogs;
            this.InstallmentPlanEvents = installmentPlanEvents;
            this.InstallmentPlanStatusLogEntries = installmentPlanStatusLogEntries;
            this.Installments = installments;
            this.ReAuthorizations = reAuthorizations;
            this.RefundLogEntries = refundLogEntries;
            this.TransferDocumentDetails = transferDocumentDetails;
            this.ActiveTerminalDataId = activeTerminalDataId;
            this.ActiveTerminalData = activeTerminalData;
            this.DelayResolution = delayResolution;
            this.ExtendedParamsSerializedData = extendedParamsSerializedData;
            this.ExtendedParams = extendedParams;
            this.Items = items;
            this.AmountDetails = amountDetails;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="TerminalId", EmitDefaultValue=false)]
        public long? TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfInstallments
        /// </summary>
        [DataMember(Name="NumberOfInstallments", EmitDefaultValue=false)]
        public long? NumberOfInstallments { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountBeforeFees
        /// </summary>
        [DataMember(Name="AmountBeforeFees", EmitDefaultValue=false)]
        public decimal? AmountBeforeFees { get; set; }

        /// <summary>
        /// Gets or Sets Eula
        /// </summary>
        [DataMember(Name="Eula", EmitDefaultValue=false)]
        public bool? Eula { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name="InstallmentPlanNumber", EmitDefaultValue=false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsFullCaptured
        /// </summary>
        [DataMember(Name="IsFullCaptured", EmitDefaultValue=false)]
        public bool? IsFullCaptured { get; set; }

        /// <summary>
        /// Gets or Sets BeginLockTime
        /// </summary>
        [DataMember(Name="BeginLockTime", EmitDefaultValue=false)]
        public DateTime? BeginLockTime { get; set; }

        /// <summary>
        /// Gets or Sets MerchantFinancedDate
        /// </summary>
        [DataMember(Name="MerchantFinancedDate", EmitDefaultValue=false)]
        public DateTime? MerchantFinancedDate { get; set; }

        /// <summary>
        /// Gets or Sets MerchantReserveReturnedDate
        /// </summary>
        [DataMember(Name="MerchantReserveReturnedDate", EmitDefaultValue=false)]
        public DateTime? MerchantReserveReturnedDate { get; set; }

        /// <summary>
        /// Gets or Sets PlannedFullCapture
        /// </summary>
        [DataMember(Name="PlannedFullCapture", EmitDefaultValue=false)]
        public DateTime? PlannedFullCapture { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanTerminalDataId
        /// </summary>
        [DataMember(Name="InstallmentPlanTerminalDataId", EmitDefaultValue=false)]
        public long? InstallmentPlanTerminalDataId { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="CurrencyId", EmitDefaultValue=false)]
        public long? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets RefOrderNumber
        /// </summary>
        [DataMember(Name="RefOrderNumber", EmitDefaultValue=false)]
        public string RefOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets ActiveCardId
        /// </summary>
        [DataMember(Name="ActiveCardId", EmitDefaultValue=false)]
        public long? ActiveCardId { get; set; }

        /// <summary>
        /// Gets or Sets Base64PngSignature
        /// </summary>
        [DataMember(Name="Base64PngSignature", EmitDefaultValue=false)]
        public string Base64PngSignature { get; set; }

        /// <summary>
        /// Gets or Sets IsChargedBack
        /// </summary>
        [DataMember(Name="IsChargedBack", EmitDefaultValue=false)]
        public bool? IsChargedBack { get; set; }

        /// <summary>
        /// Gets or Sets AreChargesHeld
        /// </summary>
        [DataMember(Name="AreChargesHeld", EmitDefaultValue=false)]
        public bool? AreChargesHeld { get; set; }

        /// <summary>
        /// Gets or Sets AutoRetry
        /// </summary>
        [DataMember(Name="AutoRetry", EmitDefaultValue=false)]
        public bool? AutoRetry { get; set; }

        /// <summary>
        /// Gets or Sets PisMemberUniqueId
        /// </summary>
        [DataMember(Name="PisMemberUniqueId", EmitDefaultValue=false)]
        public string PisMemberUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets PisMemberId
        /// </summary>
        [DataMember(Name="PisMemberId", EmitDefaultValue=false)]
        public long? PisMemberId { get; set; }

        /// <summary>
        /// Gets or Sets Subtotal
        /// </summary>
        [DataMember(Name="Subtotal", EmitDefaultValue=false)]
        public decimal? Subtotal { get; set; }

        /// <summary>
        /// Gets or Sets Tax
        /// </summary>
        [DataMember(Name="Tax", EmitDefaultValue=false)]
        public decimal? Tax { get; set; }

        /// <summary>
        /// Gets or Sets Shipping
        /// </summary>
        [DataMember(Name="Shipping", EmitDefaultValue=false)]
        public decimal? Shipping { get; set; }

        /// <summary>
        /// Gets or Sets SetupContextId
        /// </summary>
        [DataMember(Name="SetupContextId", EmitDefaultValue=false)]
        public long? SetupContextId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAmount
        /// </summary>
        [DataMember(Name="OriginalAmount", EmitDefaultValue=false)]
        public decimal? OriginalAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmount
        /// </summary>
        [DataMember(Name="RefundAmount", EmitDefaultValue=false)]
        public decimal? RefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets ReservePoolAmount
        /// </summary>
        [DataMember(Name="ReservePoolAmount", EmitDefaultValue=false)]
        public decimal? ReservePoolAmount { get; set; }

        /// <summary>
        /// Gets or Sets ShopperApprovalDateTime
        /// </summary>
        [DataMember(Name="ShopperApprovalDateTime", EmitDefaultValue=false)]
        public DateTime? ShopperApprovalDateTime { get; set; }

        /// <summary>
        /// Gets or Sets CancellationDateTime
        /// </summary>
        [DataMember(Name="CancellationDateTime", EmitDefaultValue=false)]
        public DateTime? CancellationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ActivatedDate
        /// </summary>
        [DataMember(Name="ActivatedDate", EmitDefaultValue=false)]
        public DateTime? ActivatedDate { get; set; }

        /// <summary>
        /// Gets or Sets DeActivatedDate
        /// </summary>
        [DataMember(Name="DeActivatedDate", EmitDefaultValue=false)]
        public DateTime? DeActivatedDate { get; set; }

        /// <summary>
        /// Gets or Sets AmountForFunding
        /// </summary>
        [DataMember(Name="AmountForFunding", EmitDefaultValue=false)]
        public decimal? AmountForFunding { get; set; }

        /// <summary>
        /// Gets or Sets AmountForFundingCurrency
        /// </summary>
        [DataMember(Name="AmountForFunding_Currency", EmitDefaultValue=false)]
        public Currencies AmountForFundingCurrency { get; set; }

        /// <summary>
        /// Gets or Sets AmountForFundingExchangeRate
        /// </summary>
        [DataMember(Name="AmountForFunding_ExchangeRate", EmitDefaultValue=false)]
        public decimal? AmountForFundingExchangeRate { get; set; }

        /// <summary>
        /// Gets or Sets AmountForFundingTransactionCurrency
        /// </summary>
        [DataMember(Name="AmountForFunding_TransactionCurrency", EmitDefaultValue=false)]
        public decimal? AmountForFundingTransactionCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ActiveCard
        /// </summary>
        [DataMember(Name="ActiveCard", EmitDefaultValue=false)]
        public Cards ActiveCard { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public Currencies Currency { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanTerminalData
        /// </summary>
        [DataMember(Name="InstallmentPlanTerminalData", EmitDefaultValue=false)]
        public InstallmentPlanTerminalDatas InstallmentPlanTerminalData { get; set; }

        /// <summary>
        /// Gets or Sets PisMember
        /// </summary>
        [DataMember(Name="PisMember", EmitDefaultValue=false)]
        public Object PisMember { get; set; }

        /// <summary>
        /// Gets or Sets SetupContext
        /// </summary>
        [DataMember(Name="SetupContext", EmitDefaultValue=false)]
        public InstallmentPlanSetupContexts SetupContext { get; set; }

        /// <summary>
        /// Gets or Sets Terminal
        /// </summary>
        [DataMember(Name="Terminal", EmitDefaultValue=false)]
        public Terminals Terminal { get; set; }

        /// <summary>
        /// Gets or Sets CartItems
        /// </summary>
        [DataMember(Name="CartItems", EmitDefaultValue=false)]
        public List<CartItems> CartItems { get; set; }

        /// <summary>
        /// Gets or Sets EmailAuditLogs
        /// </summary>
        [DataMember(Name="EmailAuditLogs", EmitDefaultValue=false)]
        public List<EmailAuditLogs> EmailAuditLogs { get; set; }

        /// <summary>
        /// Gets or Sets FeesDocuments
        /// </summary>
        [DataMember(Name="FeesDocuments", EmitDefaultValue=false)]
        public List<FeesDocuments> FeesDocuments { get; set; }

        /// <summary>
        /// Gets or Sets FraudDetectionLogs
        /// </summary>
        [DataMember(Name="FraudDetectionLogs", EmitDefaultValue=false)]
        public List<FraudDetectionLogs> FraudDetectionLogs { get; set; }

        /// <summary>
        /// Gets or Sets FundingCollectDocumentDetails
        /// </summary>
        [DataMember(Name="FundingCollectDocumentDetails", EmitDefaultValue=false)]
        public List<FundingCollectDocumentDetails> FundingCollectDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanAuditLogs
        /// </summary>
        [DataMember(Name="InstallmentPlanAuditLogs", EmitDefaultValue=false)]
        public List<InstallmentPlanAuditLogs> InstallmentPlanAuditLogs { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEvents
        /// </summary>
        [DataMember(Name="InstallmentPlanEvents", EmitDefaultValue=false)]
        public List<InstallmentPlanEvents> InstallmentPlanEvents { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanStatusLogEntries
        /// </summary>
        [DataMember(Name="InstallmentPlanStatusLogEntries", EmitDefaultValue=false)]
        public List<InstallmentPlanStatusLogEntries> InstallmentPlanStatusLogEntries { get; set; }

        /// <summary>
        /// Gets or Sets Installments
        /// </summary>
        [DataMember(Name="Installments", EmitDefaultValue=false)]
        public List<Installments> Installments { get; set; }

        /// <summary>
        /// Gets or Sets ReAuthorizations
        /// </summary>
        [DataMember(Name="ReAuthorizations", EmitDefaultValue=false)]
        public List<ReAuthorizations> ReAuthorizations { get; set; }

        /// <summary>
        /// Gets or Sets RefundLogEntries
        /// </summary>
        [DataMember(Name="RefundLogEntries", EmitDefaultValue=false)]
        public List<RefundLogEntries> RefundLogEntries { get; set; }

        /// <summary>
        /// Gets or Sets TransferDocumentDetails
        /// </summary>
        [DataMember(Name="TransferDocumentDetails", EmitDefaultValue=false)]
        public List<TransferDocumentDetails> TransferDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets ActiveTerminalDataId
        /// </summary>
        [DataMember(Name="ActiveTerminalDataId", EmitDefaultValue=false)]
        public long? ActiveTerminalDataId { get; set; }

        /// <summary>
        /// Gets or Sets ActiveTerminalData
        /// </summary>
        [DataMember(Name="ActiveTerminalData", EmitDefaultValue=false)]
        public TerminalGatewayDatas ActiveTerminalData { get; set; }

        /// <summary>
        /// Gets or Sets DelayResolution
        /// </summary>
        [DataMember(Name="DelayResolution", EmitDefaultValue=false)]
        public DelayResolution DelayResolution { get; set; }

        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name="TestMode", EmitDefaultValue=false)]
        public TestModes TestMode { get; set; }

        /// <summary>
        /// Gets or Sets FundingTypesId
        /// </summary>
        [DataMember(Name="FundingTypesId", EmitDefaultValue=false)]
        public MoneyFlows FundingTypesId { get; set; }

        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name="Strategy", EmitDefaultValue=false)]
        public PlanStrategy Strategy { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public InstallmentPlanStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets PurchaseMethod
        /// </summary>
        [DataMember(Name="PurchaseMethod", EmitDefaultValue=false)]
        public PurchaseMethod PurchaseMethod { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedParamsSerializedData
        /// </summary>
        [DataMember(Name="ExtendedParamsSerializedData", EmitDefaultValue=false)]
        public string ExtendedParamsSerializedData { get; set; }

        /// <summary>
        /// Gets or Sets ExtendedParams
        /// </summary>
        [DataMember(Name="ExtendedParams", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtendedParams { get; set; }

        /// <summary>
        /// Gets or Sets AutoCapture
        /// </summary>
        [DataMember(Name="AutoCapture", EmitDefaultValue=false)]
        public bool? AutoCapture { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="Items", EmitDefaultValue=false)]
        public List<CartItems> Items { get; set; }

        /// <summary>
        /// Gets or Sets AmountDetails
        /// </summary>
        [DataMember(Name="AmountDetails", EmitDefaultValue=false)]
        public AmountDetails2 AmountDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentPlans {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  NumberOfInstallments: ").Append(NumberOfInstallments).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountBeforeFees: ").Append(AmountBeforeFees).Append("\n");
            sb.Append("  Eula: ").Append(Eula).Append("\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("  IsFullCaptured: ").Append(IsFullCaptured).Append("\n");
            sb.Append("  BeginLockTime: ").Append(BeginLockTime).Append("\n");
            sb.Append("  MerchantFinancedDate: ").Append(MerchantFinancedDate).Append("\n");
            sb.Append("  MerchantReserveReturnedDate: ").Append(MerchantReserveReturnedDate).Append("\n");
            sb.Append("  PlannedFullCapture: ").Append(PlannedFullCapture).Append("\n");
            sb.Append("  InstallmentPlanTerminalDataId: ").Append(InstallmentPlanTerminalDataId).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  RefOrderNumber: ").Append(RefOrderNumber).Append("\n");
            sb.Append("  ActiveCardId: ").Append(ActiveCardId).Append("\n");
            sb.Append("  Base64PngSignature: ").Append(Base64PngSignature).Append("\n");
            sb.Append("  IsChargedBack: ").Append(IsChargedBack).Append("\n");
            sb.Append("  AreChargesHeld: ").Append(AreChargesHeld).Append("\n");
            sb.Append("  AutoRetry: ").Append(AutoRetry).Append("\n");
            sb.Append("  PisMemberUniqueId: ").Append(PisMemberUniqueId).Append("\n");
            sb.Append("  PisMemberId: ").Append(PisMemberId).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Shipping: ").Append(Shipping).Append("\n");
            sb.Append("  SetupContextId: ").Append(SetupContextId).Append("\n");
            sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  ReservePoolAmount: ").Append(ReservePoolAmount).Append("\n");
            sb.Append("  ShopperApprovalDateTime: ").Append(ShopperApprovalDateTime).Append("\n");
            sb.Append("  CancellationDateTime: ").Append(CancellationDateTime).Append("\n");
            sb.Append("  ActivatedDate: ").Append(ActivatedDate).Append("\n");
            sb.Append("  DeActivatedDate: ").Append(DeActivatedDate).Append("\n");
            sb.Append("  AmountForFunding: ").Append(AmountForFunding).Append("\n");
            sb.Append("  AmountForFundingCurrency: ").Append(AmountForFundingCurrency).Append("\n");
            sb.Append("  AmountForFundingExchangeRate: ").Append(AmountForFundingExchangeRate).Append("\n");
            sb.Append("  AmountForFundingTransactionCurrency: ").Append(AmountForFundingTransactionCurrency).Append("\n");
            sb.Append("  ActiveCard: ").Append(ActiveCard).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  InstallmentPlanTerminalData: ").Append(InstallmentPlanTerminalData).Append("\n");
            sb.Append("  PisMember: ").Append(PisMember).Append("\n");
            sb.Append("  SetupContext: ").Append(SetupContext).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  CartItems: ").Append(CartItems).Append("\n");
            sb.Append("  EmailAuditLogs: ").Append(EmailAuditLogs).Append("\n");
            sb.Append("  FeesDocuments: ").Append(FeesDocuments).Append("\n");
            sb.Append("  FraudDetectionLogs: ").Append(FraudDetectionLogs).Append("\n");
            sb.Append("  FundingCollectDocumentDetails: ").Append(FundingCollectDocumentDetails).Append("\n");
            sb.Append("  InstallmentPlanAuditLogs: ").Append(InstallmentPlanAuditLogs).Append("\n");
            sb.Append("  InstallmentPlanEvents: ").Append(InstallmentPlanEvents).Append("\n");
            sb.Append("  InstallmentPlanStatusLogEntries: ").Append(InstallmentPlanStatusLogEntries).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  ReAuthorizations: ").Append(ReAuthorizations).Append("\n");
            sb.Append("  RefundLogEntries: ").Append(RefundLogEntries).Append("\n");
            sb.Append("  TransferDocumentDetails: ").Append(TransferDocumentDetails).Append("\n");
            sb.Append("  ActiveTerminalDataId: ").Append(ActiveTerminalDataId).Append("\n");
            sb.Append("  ActiveTerminalData: ").Append(ActiveTerminalData).Append("\n");
            sb.Append("  DelayResolution: ").Append(DelayResolution).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  FundingTypesId: ").Append(FundingTypesId).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  PurchaseMethod: ").Append(PurchaseMethod).Append("\n");
            sb.Append("  ExtendedParamsSerializedData: ").Append(ExtendedParamsSerializedData).Append("\n");
            sb.Append("  ExtendedParams: ").Append(ExtendedParams).Append("\n");
            sb.Append("  AutoCapture: ").Append(AutoCapture).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  AmountDetails: ").Append(AmountDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlans);
        }

        /// <summary>
        /// Returns true if InstallmentPlans instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlans to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlans input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.NumberOfInstallments == input.NumberOfInstallments ||
                    (this.NumberOfInstallments != null &&
                    this.NumberOfInstallments.Equals(input.NumberOfInstallments))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AmountBeforeFees == input.AmountBeforeFees ||
                    (this.AmountBeforeFees != null &&
                    this.AmountBeforeFees.Equals(input.AmountBeforeFees))
                ) && 
                (
                    this.Eula == input.Eula ||
                    (this.Eula != null &&
                    this.Eula.Equals(input.Eula))
                ) && 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                ) && 
                (
                    this.IsFullCaptured == input.IsFullCaptured ||
                    (this.IsFullCaptured != null &&
                    this.IsFullCaptured.Equals(input.IsFullCaptured))
                ) && 
                (
                    this.BeginLockTime == input.BeginLockTime ||
                    (this.BeginLockTime != null &&
                    this.BeginLockTime.Equals(input.BeginLockTime))
                ) && 
                (
                    this.MerchantFinancedDate == input.MerchantFinancedDate ||
                    (this.MerchantFinancedDate != null &&
                    this.MerchantFinancedDate.Equals(input.MerchantFinancedDate))
                ) && 
                (
                    this.MerchantReserveReturnedDate == input.MerchantReserveReturnedDate ||
                    (this.MerchantReserveReturnedDate != null &&
                    this.MerchantReserveReturnedDate.Equals(input.MerchantReserveReturnedDate))
                ) && 
                (
                    this.PlannedFullCapture == input.PlannedFullCapture ||
                    (this.PlannedFullCapture != null &&
                    this.PlannedFullCapture.Equals(input.PlannedFullCapture))
                ) && 
                (
                    this.InstallmentPlanTerminalDataId == input.InstallmentPlanTerminalDataId ||
                    (this.InstallmentPlanTerminalDataId != null &&
                    this.InstallmentPlanTerminalDataId.Equals(input.InstallmentPlanTerminalDataId))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.RefOrderNumber == input.RefOrderNumber ||
                    (this.RefOrderNumber != null &&
                    this.RefOrderNumber.Equals(input.RefOrderNumber))
                ) && 
                (
                    this.ActiveCardId == input.ActiveCardId ||
                    (this.ActiveCardId != null &&
                    this.ActiveCardId.Equals(input.ActiveCardId))
                ) && 
                (
                    this.Base64PngSignature == input.Base64PngSignature ||
                    (this.Base64PngSignature != null &&
                    this.Base64PngSignature.Equals(input.Base64PngSignature))
                ) && 
                (
                    this.IsChargedBack == input.IsChargedBack ||
                    (this.IsChargedBack != null &&
                    this.IsChargedBack.Equals(input.IsChargedBack))
                ) && 
                (
                    this.AreChargesHeld == input.AreChargesHeld ||
                    (this.AreChargesHeld != null &&
                    this.AreChargesHeld.Equals(input.AreChargesHeld))
                ) && 
                (
                    this.AutoRetry == input.AutoRetry ||
                    (this.AutoRetry != null &&
                    this.AutoRetry.Equals(input.AutoRetry))
                ) && 
                (
                    this.PisMemberUniqueId == input.PisMemberUniqueId ||
                    (this.PisMemberUniqueId != null &&
                    this.PisMemberUniqueId.Equals(input.PisMemberUniqueId))
                ) && 
                (
                    this.PisMemberId == input.PisMemberId ||
                    (this.PisMemberId != null &&
                    this.PisMemberId.Equals(input.PisMemberId))
                ) && 
                (
                    this.Subtotal == input.Subtotal ||
                    (this.Subtotal != null &&
                    this.Subtotal.Equals(input.Subtotal))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Shipping == input.Shipping ||
                    (this.Shipping != null &&
                    this.Shipping.Equals(input.Shipping))
                ) && 
                (
                    this.SetupContextId == input.SetupContextId ||
                    (this.SetupContextId != null &&
                    this.SetupContextId.Equals(input.SetupContextId))
                ) && 
                (
                    this.OriginalAmount == input.OriginalAmount ||
                    (this.OriginalAmount != null &&
                    this.OriginalAmount.Equals(input.OriginalAmount))
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.ReservePoolAmount == input.ReservePoolAmount ||
                    (this.ReservePoolAmount != null &&
                    this.ReservePoolAmount.Equals(input.ReservePoolAmount))
                ) && 
                (
                    this.ShopperApprovalDateTime == input.ShopperApprovalDateTime ||
                    (this.ShopperApprovalDateTime != null &&
                    this.ShopperApprovalDateTime.Equals(input.ShopperApprovalDateTime))
                ) && 
                (
                    this.CancellationDateTime == input.CancellationDateTime ||
                    (this.CancellationDateTime != null &&
                    this.CancellationDateTime.Equals(input.CancellationDateTime))
                ) && 
                (
                    this.ActivatedDate == input.ActivatedDate ||
                    (this.ActivatedDate != null &&
                    this.ActivatedDate.Equals(input.ActivatedDate))
                ) && 
                (
                    this.DeActivatedDate == input.DeActivatedDate ||
                    (this.DeActivatedDate != null &&
                    this.DeActivatedDate.Equals(input.DeActivatedDate))
                ) && 
                (
                    this.AmountForFunding == input.AmountForFunding ||
                    (this.AmountForFunding != null &&
                    this.AmountForFunding.Equals(input.AmountForFunding))
                ) && 
                (
                    this.AmountForFundingCurrency == input.AmountForFundingCurrency ||
                    (this.AmountForFundingCurrency != null &&
                    this.AmountForFundingCurrency.Equals(input.AmountForFundingCurrency))
                ) && 
                (
                    this.AmountForFundingExchangeRate == input.AmountForFundingExchangeRate ||
                    (this.AmountForFundingExchangeRate != null &&
                    this.AmountForFundingExchangeRate.Equals(input.AmountForFundingExchangeRate))
                ) && 
                (
                    this.AmountForFundingTransactionCurrency == input.AmountForFundingTransactionCurrency ||
                    (this.AmountForFundingTransactionCurrency != null &&
                    this.AmountForFundingTransactionCurrency.Equals(input.AmountForFundingTransactionCurrency))
                ) && 
                (
                    this.ActiveCard == input.ActiveCard ||
                    (this.ActiveCard != null &&
                    this.ActiveCard.Equals(input.ActiveCard))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.InstallmentPlanTerminalData == input.InstallmentPlanTerminalData ||
                    (this.InstallmentPlanTerminalData != null &&
                    this.InstallmentPlanTerminalData.Equals(input.InstallmentPlanTerminalData))
                ) && 
                (
                    this.PisMember == input.PisMember ||
                    (this.PisMember != null &&
                    this.PisMember.Equals(input.PisMember))
                ) && 
                (
                    this.SetupContext == input.SetupContext ||
                    (this.SetupContext != null &&
                    this.SetupContext.Equals(input.SetupContext))
                ) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && 
                (
                    this.CartItems == input.CartItems ||
                    this.CartItems != null &&
                    this.CartItems.SequenceEqual(input.CartItems)
                ) && 
                (
                    this.EmailAuditLogs == input.EmailAuditLogs ||
                    this.EmailAuditLogs != null &&
                    this.EmailAuditLogs.SequenceEqual(input.EmailAuditLogs)
                ) && 
                (
                    this.FeesDocuments == input.FeesDocuments ||
                    this.FeesDocuments != null &&
                    this.FeesDocuments.SequenceEqual(input.FeesDocuments)
                ) && 
                (
                    this.FraudDetectionLogs == input.FraudDetectionLogs ||
                    this.FraudDetectionLogs != null &&
                    this.FraudDetectionLogs.SequenceEqual(input.FraudDetectionLogs)
                ) && 
                (
                    this.FundingCollectDocumentDetails == input.FundingCollectDocumentDetails ||
                    this.FundingCollectDocumentDetails != null &&
                    this.FundingCollectDocumentDetails.SequenceEqual(input.FundingCollectDocumentDetails)
                ) && 
                (
                    this.InstallmentPlanAuditLogs == input.InstallmentPlanAuditLogs ||
                    this.InstallmentPlanAuditLogs != null &&
                    this.InstallmentPlanAuditLogs.SequenceEqual(input.InstallmentPlanAuditLogs)
                ) && 
                (
                    this.InstallmentPlanEvents == input.InstallmentPlanEvents ||
                    this.InstallmentPlanEvents != null &&
                    this.InstallmentPlanEvents.SequenceEqual(input.InstallmentPlanEvents)
                ) && 
                (
                    this.InstallmentPlanStatusLogEntries == input.InstallmentPlanStatusLogEntries ||
                    this.InstallmentPlanStatusLogEntries != null &&
                    this.InstallmentPlanStatusLogEntries.SequenceEqual(input.InstallmentPlanStatusLogEntries)
                ) && 
                (
                    this.Installments == input.Installments ||
                    this.Installments != null &&
                    this.Installments.SequenceEqual(input.Installments)
                ) && 
                (
                    this.ReAuthorizations == input.ReAuthorizations ||
                    this.ReAuthorizations != null &&
                    this.ReAuthorizations.SequenceEqual(input.ReAuthorizations)
                ) && 
                (
                    this.RefundLogEntries == input.RefundLogEntries ||
                    this.RefundLogEntries != null &&
                    this.RefundLogEntries.SequenceEqual(input.RefundLogEntries)
                ) && 
                (
                    this.TransferDocumentDetails == input.TransferDocumentDetails ||
                    this.TransferDocumentDetails != null &&
                    this.TransferDocumentDetails.SequenceEqual(input.TransferDocumentDetails)
                ) && 
                (
                    this.ActiveTerminalDataId == input.ActiveTerminalDataId ||
                    (this.ActiveTerminalDataId != null &&
                    this.ActiveTerminalDataId.Equals(input.ActiveTerminalDataId))
                ) && 
                (
                    this.ActiveTerminalData == input.ActiveTerminalData ||
                    (this.ActiveTerminalData != null &&
                    this.ActiveTerminalData.Equals(input.ActiveTerminalData))
                ) && 
                (
                    this.DelayResolution == input.DelayResolution ||
                    (this.DelayResolution != null &&
                    this.DelayResolution.Equals(input.DelayResolution))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                ) && 
                (
                    this.FundingTypesId == input.FundingTypesId ||
                    (this.FundingTypesId != null &&
                    this.FundingTypesId.Equals(input.FundingTypesId))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.PurchaseMethod == input.PurchaseMethod ||
                    (this.PurchaseMethod != null &&
                    this.PurchaseMethod.Equals(input.PurchaseMethod))
                ) && 
                (
                    this.ExtendedParamsSerializedData == input.ExtendedParamsSerializedData ||
                    (this.ExtendedParamsSerializedData != null &&
                    this.ExtendedParamsSerializedData.Equals(input.ExtendedParamsSerializedData))
                ) && 
                (
                    this.ExtendedParams == input.ExtendedParams ||
                    this.ExtendedParams != null &&
                    this.ExtendedParams.SequenceEqual(input.ExtendedParams)
                ) && 
                (
                    this.AutoCapture == input.AutoCapture ||
                    (this.AutoCapture != null &&
                    this.AutoCapture.Equals(input.AutoCapture))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.AmountDetails == input.AmountDetails ||
                    (this.AmountDetails != null &&
                    this.AmountDetails.Equals(input.AmountDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.NumberOfInstallments != null)
                    hashCode = hashCode * 59 + this.NumberOfInstallments.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountBeforeFees != null)
                    hashCode = hashCode * 59 + this.AmountBeforeFees.GetHashCode();
                if (this.Eula != null)
                    hashCode = hashCode * 59 + this.Eula.GetHashCode();
                if (this.InstallmentPlanNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanNumber.GetHashCode();
                if (this.IsFullCaptured != null)
                    hashCode = hashCode * 59 + this.IsFullCaptured.GetHashCode();
                if (this.BeginLockTime != null)
                    hashCode = hashCode * 59 + this.BeginLockTime.GetHashCode();
                if (this.MerchantFinancedDate != null)
                    hashCode = hashCode * 59 + this.MerchantFinancedDate.GetHashCode();
                if (this.MerchantReserveReturnedDate != null)
                    hashCode = hashCode * 59 + this.MerchantReserveReturnedDate.GetHashCode();
                if (this.PlannedFullCapture != null)
                    hashCode = hashCode * 59 + this.PlannedFullCapture.GetHashCode();
                if (this.InstallmentPlanTerminalDataId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanTerminalDataId.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.RefOrderNumber != null)
                    hashCode = hashCode * 59 + this.RefOrderNumber.GetHashCode();
                if (this.ActiveCardId != null)
                    hashCode = hashCode * 59 + this.ActiveCardId.GetHashCode();
                if (this.Base64PngSignature != null)
                    hashCode = hashCode * 59 + this.Base64PngSignature.GetHashCode();
                if (this.IsChargedBack != null)
                    hashCode = hashCode * 59 + this.IsChargedBack.GetHashCode();
                if (this.AreChargesHeld != null)
                    hashCode = hashCode * 59 + this.AreChargesHeld.GetHashCode();
                if (this.AutoRetry != null)
                    hashCode = hashCode * 59 + this.AutoRetry.GetHashCode();
                if (this.PisMemberUniqueId != null)
                    hashCode = hashCode * 59 + this.PisMemberUniqueId.GetHashCode();
                if (this.PisMemberId != null)
                    hashCode = hashCode * 59 + this.PisMemberId.GetHashCode();
                if (this.Subtotal != null)
                    hashCode = hashCode * 59 + this.Subtotal.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Shipping != null)
                    hashCode = hashCode * 59 + this.Shipping.GetHashCode();
                if (this.SetupContextId != null)
                    hashCode = hashCode * 59 + this.SetupContextId.GetHashCode();
                if (this.OriginalAmount != null)
                    hashCode = hashCode * 59 + this.OriginalAmount.GetHashCode();
                if (this.RefundAmount != null)
                    hashCode = hashCode * 59 + this.RefundAmount.GetHashCode();
                if (this.ReservePoolAmount != null)
                    hashCode = hashCode * 59 + this.ReservePoolAmount.GetHashCode();
                if (this.ShopperApprovalDateTime != null)
                    hashCode = hashCode * 59 + this.ShopperApprovalDateTime.GetHashCode();
                if (this.CancellationDateTime != null)
                    hashCode = hashCode * 59 + this.CancellationDateTime.GetHashCode();
                if (this.ActivatedDate != null)
                    hashCode = hashCode * 59 + this.ActivatedDate.GetHashCode();
                if (this.DeActivatedDate != null)
                    hashCode = hashCode * 59 + this.DeActivatedDate.GetHashCode();
                if (this.AmountForFunding != null)
                    hashCode = hashCode * 59 + this.AmountForFunding.GetHashCode();
                if (this.AmountForFundingCurrency != null)
                    hashCode = hashCode * 59 + this.AmountForFundingCurrency.GetHashCode();
                if (this.AmountForFundingExchangeRate != null)
                    hashCode = hashCode * 59 + this.AmountForFundingExchangeRate.GetHashCode();
                if (this.AmountForFundingTransactionCurrency != null)
                    hashCode = hashCode * 59 + this.AmountForFundingTransactionCurrency.GetHashCode();
                if (this.ActiveCard != null)
                    hashCode = hashCode * 59 + this.ActiveCard.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.InstallmentPlanTerminalData != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanTerminalData.GetHashCode();
                if (this.PisMember != null)
                    hashCode = hashCode * 59 + this.PisMember.GetHashCode();
                if (this.SetupContext != null)
                    hashCode = hashCode * 59 + this.SetupContext.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.CartItems != null)
                    hashCode = hashCode * 59 + this.CartItems.GetHashCode();
                if (this.EmailAuditLogs != null)
                    hashCode = hashCode * 59 + this.EmailAuditLogs.GetHashCode();
                if (this.FeesDocuments != null)
                    hashCode = hashCode * 59 + this.FeesDocuments.GetHashCode();
                if (this.FraudDetectionLogs != null)
                    hashCode = hashCode * 59 + this.FraudDetectionLogs.GetHashCode();
                if (this.FundingCollectDocumentDetails != null)
                    hashCode = hashCode * 59 + this.FundingCollectDocumentDetails.GetHashCode();
                if (this.InstallmentPlanAuditLogs != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanAuditLogs.GetHashCode();
                if (this.InstallmentPlanEvents != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEvents.GetHashCode();
                if (this.InstallmentPlanStatusLogEntries != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanStatusLogEntries.GetHashCode();
                if (this.Installments != null)
                    hashCode = hashCode * 59 + this.Installments.GetHashCode();
                if (this.ReAuthorizations != null)
                    hashCode = hashCode * 59 + this.ReAuthorizations.GetHashCode();
                if (this.RefundLogEntries != null)
                    hashCode = hashCode * 59 + this.RefundLogEntries.GetHashCode();
                if (this.TransferDocumentDetails != null)
                    hashCode = hashCode * 59 + this.TransferDocumentDetails.GetHashCode();
                if (this.ActiveTerminalDataId != null)
                    hashCode = hashCode * 59 + this.ActiveTerminalDataId.GetHashCode();
                if (this.ActiveTerminalData != null)
                    hashCode = hashCode * 59 + this.ActiveTerminalData.GetHashCode();
                if (this.DelayResolution != null)
                    hashCode = hashCode * 59 + this.DelayResolution.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                if (this.FundingTypesId != null)
                    hashCode = hashCode * 59 + this.FundingTypesId.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.PurchaseMethod != null)
                    hashCode = hashCode * 59 + this.PurchaseMethod.GetHashCode();
                if (this.ExtendedParamsSerializedData != null)
                    hashCode = hashCode * 59 + this.ExtendedParamsSerializedData.GetHashCode();
                if (this.ExtendedParams != null)
                    hashCode = hashCode * 59 + this.ExtendedParams.GetHashCode();
                if (this.AutoCapture != null)
                    hashCode = hashCode * 59 + this.AutoCapture.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.AmountDetails != null)
                    hashCode = hashCode * 59 + this.AmountDetails.GetHashCode();
                return hashCode;
            }
        }
    }

}
