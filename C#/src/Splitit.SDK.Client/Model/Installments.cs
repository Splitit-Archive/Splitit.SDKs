/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Installments
    /// </summary>
    [DataContract]
    public partial class Installments :  IEquatable<Installments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Installments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Installments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Installments" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="installmentPlanId">installmentPlanId (required).</param>
        /// <param name="installmentNumber">installmentNumber (required).</param>
        /// <param name="processorId">processorId (required).</param>
        /// <param name="originUtcOffset">originUtcOffset (required).</param>
        /// <param name="createdDateUtc">createdDateUtc (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="processDateTime">processDateTime.</param>
        /// <param name="processDateTimeUtc">processDateTimeUtc.</param>
        /// <param name="isRefund">isRefund (required).</param>
        /// <param name="cardStateId">cardStateId.</param>
        /// <param name="originalAmount">originalAmount (required).</param>
        /// <param name="refundAmount">refundAmount (required).</param>
        /// <param name="isFullCapture">isFullCapture (required).</param>
        /// <param name="authorizedAmount">authorizedAmount (required).</param>
        /// <param name="isPreAuthorized">isPreAuthorized (required).</param>
        /// <param name="amountForFunding">amountForFunding (required).</param>
        /// <param name="cardState">cardState.</param>
        /// <param name="installmentPlan">installmentPlan.</param>
        /// <param name="processor">processor.</param>
        /// <param name="feesDocuments">feesDocuments.</param>
        /// <param name="fundingCollectDocumentDetails">fundingCollectDocumentDetails.</param>
        /// <param name="installmentPaymentGatewayTransactionLogs">installmentPaymentGatewayTransactionLogs.</param>
        /// <param name="transferDocumentDetails">transferDocumentDetails.</param>
        /// <param name="merchantAccountType">merchantAccountType (required).</param>
        /// <param name="status">status (required).</param>
        public Installments(long? id = default(long?), long? installmentPlanId = default(long?), long? installmentNumber = default(long?), long? processorId = default(long?), double? originUtcOffset = default(double?), DateTime? createdDateUtc = default(DateTime?), decimal? amount = default(decimal?), DateTime? processDateTime = default(DateTime?), DateTime? processDateTimeUtc = default(DateTime?), bool? isRefund = default(bool?), long? cardStateId = default(long?), decimal? originalAmount = default(decimal?), decimal? refundAmount = default(decimal?), bool? isFullCapture = default(bool?), decimal? authorizedAmount = default(decimal?), bool? isPreAuthorized = default(bool?), decimal? amountForFunding = default(decimal?), CardStateLogs cardState = default(CardStateLogs), InstallmentPlans installmentPlan = default(InstallmentPlans), Processors processor = default(Processors), List<FeesDocuments> feesDocuments = default(List<FeesDocuments>), List<FundingCollectDocumentDetails> fundingCollectDocumentDetails = default(List<FundingCollectDocumentDetails>), List<InstallmentPaymentGatewayTransactionLogs> installmentPaymentGatewayTransactionLogs = default(List<InstallmentPaymentGatewayTransactionLogs>), List<TransferDocumentDetails> transferDocumentDetails = default(List<TransferDocumentDetails>), MerchantAccountType merchantAccountType = default(MerchantAccountType), InstallmentStatus status = default(InstallmentStatus))
        {
            this.Id = id;
            this.InstallmentPlanId = installmentPlanId;
            this.InstallmentNumber = installmentNumber;
            this.ProcessorId = processorId;
            this.OriginUtcOffset = originUtcOffset;
            this.CreatedDateUtc = createdDateUtc;
            this.Amount = amount;
            this.IsRefund = isRefund;
            this.OriginalAmount = originalAmount;
            this.RefundAmount = refundAmount;
            this.IsFullCapture = isFullCapture;
            this.AuthorizedAmount = authorizedAmount;
            this.IsPreAuthorized = isPreAuthorized;
            this.AmountForFunding = amountForFunding;
            this.MerchantAccountType = merchantAccountType;
            this.Status = status;
            this.ProcessDateTime = processDateTime;
            this.ProcessDateTimeUtc = processDateTimeUtc;
            this.CardStateId = cardStateId;
            this.CardState = cardState;
            this.InstallmentPlan = installmentPlan;
            this.Processor = processor;
            this.FeesDocuments = feesDocuments;
            this.FundingCollectDocumentDetails = fundingCollectDocumentDetails;
            this.InstallmentPaymentGatewayTransactionLogs = installmentPaymentGatewayTransactionLogs;
            this.TransferDocumentDetails = transferDocumentDetails;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanId
        /// </summary>
        [DataMember(Name="InstallmentPlanId", EmitDefaultValue=false)]
        public long? InstallmentPlanId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentNumber
        /// </summary>
        [DataMember(Name="InstallmentNumber", EmitDefaultValue=false)]
        public long? InstallmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorId
        /// </summary>
        [DataMember(Name="ProcessorId", EmitDefaultValue=false)]
        public long? ProcessorId { get; set; }

        /// <summary>
        /// Gets or Sets OriginUtcOffset
        /// </summary>
        [DataMember(Name="OriginUtcOffset", EmitDefaultValue=false)]
        public double? OriginUtcOffset { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDateUtc
        /// </summary>
        [DataMember(Name="CreatedDateUtc", EmitDefaultValue=false)]
        public DateTime? CreatedDateUtc { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDateTime
        /// </summary>
        [DataMember(Name="ProcessDateTime", EmitDefaultValue=false)]
        public DateTime? ProcessDateTime { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDateTimeUtc
        /// </summary>
        [DataMember(Name="ProcessDateTimeUtc", EmitDefaultValue=false)]
        public DateTime? ProcessDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets IsRefund
        /// </summary>
        [DataMember(Name="IsRefund", EmitDefaultValue=false)]
        public bool? IsRefund { get; set; }

        /// <summary>
        /// Gets or Sets CardStateId
        /// </summary>
        [DataMember(Name="CardStateId", EmitDefaultValue=false)]
        public long? CardStateId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAmount
        /// </summary>
        [DataMember(Name="OriginalAmount", EmitDefaultValue=false)]
        public decimal? OriginalAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefundAmount
        /// </summary>
        [DataMember(Name="RefundAmount", EmitDefaultValue=false)]
        public decimal? RefundAmount { get; set; }

        /// <summary>
        /// Gets or Sets IsFullCapture
        /// </summary>
        [DataMember(Name="IsFullCapture", EmitDefaultValue=false)]
        public bool? IsFullCapture { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedAmount
        /// </summary>
        [DataMember(Name="AuthorizedAmount", EmitDefaultValue=false)]
        public decimal? AuthorizedAmount { get; set; }

        /// <summary>
        /// Gets or Sets IsPreAuthorized
        /// </summary>
        [DataMember(Name="IsPreAuthorized", EmitDefaultValue=false)]
        public bool? IsPreAuthorized { get; set; }

        /// <summary>
        /// Gets or Sets AmountForFunding
        /// </summary>
        [DataMember(Name="AmountForFunding", EmitDefaultValue=false)]
        public decimal? AmountForFunding { get; set; }

        /// <summary>
        /// Gets or Sets CardState
        /// </summary>
        [DataMember(Name="CardState", EmitDefaultValue=false)]
        public CardStateLogs CardState { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlan
        /// </summary>
        [DataMember(Name="InstallmentPlan", EmitDefaultValue=false)]
        public InstallmentPlans InstallmentPlan { get; set; }

        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="Processor", EmitDefaultValue=false)]
        public Processors Processor { get; set; }

        /// <summary>
        /// Gets or Sets FeesDocuments
        /// </summary>
        [DataMember(Name="FeesDocuments", EmitDefaultValue=false)]
        public List<FeesDocuments> FeesDocuments { get; set; }

        /// <summary>
        /// Gets or Sets FundingCollectDocumentDetails
        /// </summary>
        [DataMember(Name="FundingCollectDocumentDetails", EmitDefaultValue=false)]
        public List<FundingCollectDocumentDetails> FundingCollectDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPaymentGatewayTransactionLogs
        /// </summary>
        [DataMember(Name="InstallmentPaymentGatewayTransactionLogs", EmitDefaultValue=false)]
        public List<InstallmentPaymentGatewayTransactionLogs> InstallmentPaymentGatewayTransactionLogs { get; set; }

        /// <summary>
        /// Gets or Sets TransferDocumentDetails
        /// </summary>
        [DataMember(Name="TransferDocumentDetails", EmitDefaultValue=false)]
        public List<TransferDocumentDetails> TransferDocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAccountType
        /// </summary>
        [DataMember(Name="MerchantAccountType", EmitDefaultValue=false)]
        public MerchantAccountType MerchantAccountType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public InstallmentStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Installments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallmentPlanId: ").Append(InstallmentPlanId).Append("\n");
            sb.Append("  InstallmentNumber: ").Append(InstallmentNumber).Append("\n");
            sb.Append("  ProcessorId: ").Append(ProcessorId).Append("\n");
            sb.Append("  OriginUtcOffset: ").Append(OriginUtcOffset).Append("\n");
            sb.Append("  CreatedDateUtc: ").Append(CreatedDateUtc).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ProcessDateTime: ").Append(ProcessDateTime).Append("\n");
            sb.Append("  ProcessDateTimeUtc: ").Append(ProcessDateTimeUtc).Append("\n");
            sb.Append("  IsRefund: ").Append(IsRefund).Append("\n");
            sb.Append("  CardStateId: ").Append(CardStateId).Append("\n");
            sb.Append("  OriginalAmount: ").Append(OriginalAmount).Append("\n");
            sb.Append("  RefundAmount: ").Append(RefundAmount).Append("\n");
            sb.Append("  IsFullCapture: ").Append(IsFullCapture).Append("\n");
            sb.Append("  AuthorizedAmount: ").Append(AuthorizedAmount).Append("\n");
            sb.Append("  IsPreAuthorized: ").Append(IsPreAuthorized).Append("\n");
            sb.Append("  AmountForFunding: ").Append(AmountForFunding).Append("\n");
            sb.Append("  CardState: ").Append(CardState).Append("\n");
            sb.Append("  InstallmentPlan: ").Append(InstallmentPlan).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("  FeesDocuments: ").Append(FeesDocuments).Append("\n");
            sb.Append("  FundingCollectDocumentDetails: ").Append(FundingCollectDocumentDetails).Append("\n");
            sb.Append("  InstallmentPaymentGatewayTransactionLogs: ").Append(InstallmentPaymentGatewayTransactionLogs).Append("\n");
            sb.Append("  TransferDocumentDetails: ").Append(TransferDocumentDetails).Append("\n");
            sb.Append("  MerchantAccountType: ").Append(MerchantAccountType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Installments);
        }

        /// <summary>
        /// Returns true if Installments instances are equal
        /// </summary>
        /// <param name="input">Instance of Installments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Installments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallmentPlanId == input.InstallmentPlanId ||
                    (this.InstallmentPlanId != null &&
                    this.InstallmentPlanId.Equals(input.InstallmentPlanId))
                ) && 
                (
                    this.InstallmentNumber == input.InstallmentNumber ||
                    (this.InstallmentNumber != null &&
                    this.InstallmentNumber.Equals(input.InstallmentNumber))
                ) && 
                (
                    this.ProcessorId == input.ProcessorId ||
                    (this.ProcessorId != null &&
                    this.ProcessorId.Equals(input.ProcessorId))
                ) && 
                (
                    this.OriginUtcOffset == input.OriginUtcOffset ||
                    (this.OriginUtcOffset != null &&
                    this.OriginUtcOffset.Equals(input.OriginUtcOffset))
                ) && 
                (
                    this.CreatedDateUtc == input.CreatedDateUtc ||
                    (this.CreatedDateUtc != null &&
                    this.CreatedDateUtc.Equals(input.CreatedDateUtc))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ProcessDateTime == input.ProcessDateTime ||
                    (this.ProcessDateTime != null &&
                    this.ProcessDateTime.Equals(input.ProcessDateTime))
                ) && 
                (
                    this.ProcessDateTimeUtc == input.ProcessDateTimeUtc ||
                    (this.ProcessDateTimeUtc != null &&
                    this.ProcessDateTimeUtc.Equals(input.ProcessDateTimeUtc))
                ) && 
                (
                    this.IsRefund == input.IsRefund ||
                    (this.IsRefund != null &&
                    this.IsRefund.Equals(input.IsRefund))
                ) && 
                (
                    this.CardStateId == input.CardStateId ||
                    (this.CardStateId != null &&
                    this.CardStateId.Equals(input.CardStateId))
                ) && 
                (
                    this.OriginalAmount == input.OriginalAmount ||
                    (this.OriginalAmount != null &&
                    this.OriginalAmount.Equals(input.OriginalAmount))
                ) && 
                (
                    this.RefundAmount == input.RefundAmount ||
                    (this.RefundAmount != null &&
                    this.RefundAmount.Equals(input.RefundAmount))
                ) && 
                (
                    this.IsFullCapture == input.IsFullCapture ||
                    (this.IsFullCapture != null &&
                    this.IsFullCapture.Equals(input.IsFullCapture))
                ) && 
                (
                    this.AuthorizedAmount == input.AuthorizedAmount ||
                    (this.AuthorizedAmount != null &&
                    this.AuthorizedAmount.Equals(input.AuthorizedAmount))
                ) && 
                (
                    this.IsPreAuthorized == input.IsPreAuthorized ||
                    (this.IsPreAuthorized != null &&
                    this.IsPreAuthorized.Equals(input.IsPreAuthorized))
                ) && 
                (
                    this.AmountForFunding == input.AmountForFunding ||
                    (this.AmountForFunding != null &&
                    this.AmountForFunding.Equals(input.AmountForFunding))
                ) && 
                (
                    this.CardState == input.CardState ||
                    (this.CardState != null &&
                    this.CardState.Equals(input.CardState))
                ) && 
                (
                    this.InstallmentPlan == input.InstallmentPlan ||
                    (this.InstallmentPlan != null &&
                    this.InstallmentPlan.Equals(input.InstallmentPlan))
                ) && 
                (
                    this.Processor == input.Processor ||
                    (this.Processor != null &&
                    this.Processor.Equals(input.Processor))
                ) && 
                (
                    this.FeesDocuments == input.FeesDocuments ||
                    this.FeesDocuments != null &&
                    this.FeesDocuments.SequenceEqual(input.FeesDocuments)
                ) && 
                (
                    this.FundingCollectDocumentDetails == input.FundingCollectDocumentDetails ||
                    this.FundingCollectDocumentDetails != null &&
                    this.FundingCollectDocumentDetails.SequenceEqual(input.FundingCollectDocumentDetails)
                ) && 
                (
                    this.InstallmentPaymentGatewayTransactionLogs == input.InstallmentPaymentGatewayTransactionLogs ||
                    this.InstallmentPaymentGatewayTransactionLogs != null &&
                    this.InstallmentPaymentGatewayTransactionLogs.SequenceEqual(input.InstallmentPaymentGatewayTransactionLogs)
                ) && 
                (
                    this.TransferDocumentDetails == input.TransferDocumentDetails ||
                    this.TransferDocumentDetails != null &&
                    this.TransferDocumentDetails.SequenceEqual(input.TransferDocumentDetails)
                ) && 
                (
                    this.MerchantAccountType == input.MerchantAccountType ||
                    (this.MerchantAccountType != null &&
                    this.MerchantAccountType.Equals(input.MerchantAccountType))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallmentPlanId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanId.GetHashCode();
                if (this.InstallmentNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentNumber.GetHashCode();
                if (this.ProcessorId != null)
                    hashCode = hashCode * 59 + this.ProcessorId.GetHashCode();
                if (this.OriginUtcOffset != null)
                    hashCode = hashCode * 59 + this.OriginUtcOffset.GetHashCode();
                if (this.CreatedDateUtc != null)
                    hashCode = hashCode * 59 + this.CreatedDateUtc.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ProcessDateTime != null)
                    hashCode = hashCode * 59 + this.ProcessDateTime.GetHashCode();
                if (this.ProcessDateTimeUtc != null)
                    hashCode = hashCode * 59 + this.ProcessDateTimeUtc.GetHashCode();
                if (this.IsRefund != null)
                    hashCode = hashCode * 59 + this.IsRefund.GetHashCode();
                if (this.CardStateId != null)
                    hashCode = hashCode * 59 + this.CardStateId.GetHashCode();
                if (this.OriginalAmount != null)
                    hashCode = hashCode * 59 + this.OriginalAmount.GetHashCode();
                if (this.RefundAmount != null)
                    hashCode = hashCode * 59 + this.RefundAmount.GetHashCode();
                if (this.IsFullCapture != null)
                    hashCode = hashCode * 59 + this.IsFullCapture.GetHashCode();
                if (this.AuthorizedAmount != null)
                    hashCode = hashCode * 59 + this.AuthorizedAmount.GetHashCode();
                if (this.IsPreAuthorized != null)
                    hashCode = hashCode * 59 + this.IsPreAuthorized.GetHashCode();
                if (this.AmountForFunding != null)
                    hashCode = hashCode * 59 + this.AmountForFunding.GetHashCode();
                if (this.CardState != null)
                    hashCode = hashCode * 59 + this.CardState.GetHashCode();
                if (this.InstallmentPlan != null)
                    hashCode = hashCode * 59 + this.InstallmentPlan.GetHashCode();
                if (this.Processor != null)
                    hashCode = hashCode * 59 + this.Processor.GetHashCode();
                if (this.FeesDocuments != null)
                    hashCode = hashCode * 59 + this.FeesDocuments.GetHashCode();
                if (this.FundingCollectDocumentDetails != null)
                    hashCode = hashCode * 59 + this.FundingCollectDocumentDetails.GetHashCode();
                if (this.InstallmentPaymentGatewayTransactionLogs != null)
                    hashCode = hashCode * 59 + this.InstallmentPaymentGatewayTransactionLogs.GetHashCode();
                if (this.TransferDocumentDetails != null)
                    hashCode = hashCode * 59 + this.TransferDocumentDetails.GetHashCode();
                if (this.MerchantAccountType != null)
                    hashCode = hashCode * 59 + this.MerchantAccountType.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }
    }

}
