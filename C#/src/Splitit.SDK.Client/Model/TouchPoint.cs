/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// TouchPoint
    /// </summary>
    [DataContract]
    public partial class TouchPoint :  IEquatable<TouchPoint>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TouchPoint" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="version">version.</param>
        /// <param name="subVersion">subVersion.</param>
        /// <param name="versionedTouchpointId">versionedTouchpointId.</param>
        public TouchPoint(string code = default(string), string version = default(string), string subVersion = default(string), long? versionedTouchpointId = default(long?))
        {
            this.Code = code;
            this.Version = version;
            this.SubVersion = subVersion;
            this.VersionedTouchpointId = versionedTouchpointId;
        }

        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets SubVersion
        /// </summary>
        [DataMember(Name="SubVersion", EmitDefaultValue=false)]
        public string SubVersion { get; set; }

        /// <summary>
        /// Gets or Sets VersionedTouchpointId
        /// </summary>
        [DataMember(Name="VersionedTouchpointId", EmitDefaultValue=false)]
        public long? VersionedTouchpointId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TouchPoint {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  SubVersion: ").Append(SubVersion).Append("\n");
            sb.Append("  VersionedTouchpointId: ").Append(VersionedTouchpointId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TouchPoint);
        }

        /// <summary>
        /// Returns true if TouchPoint instances are equal
        /// </summary>
        /// <param name="input">Instance of TouchPoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TouchPoint input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.SubVersion == input.SubVersion ||
                    (this.SubVersion != null &&
                    this.SubVersion.Equals(input.SubVersion))
                ) && 
                (
                    this.VersionedTouchpointId == input.VersionedTouchpointId ||
                    (this.VersionedTouchpointId != null &&
                    this.VersionedTouchpointId.Equals(input.VersionedTouchpointId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.SubVersion != null)
                    hashCode = hashCode * 59 + this.SubVersion.GetHashCode();
                if (this.VersionedTouchpointId != null)
                    hashCode = hashCode * 59 + this.VersionedTouchpointId.GetHashCode();
                return hashCode;
            }
        }
    }

}
