/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// TerminalGatewayDatas
    /// </summary>
    [DataContract]
    public partial class TerminalGatewayDatas :  IEquatable<TerminalGatewayDatas>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalGatewayDatas" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TerminalGatewayDatas() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TerminalGatewayDatas" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="token">token.</param>
        /// <param name="isActive">isActive (required).</param>
        /// <param name="numberOfAllowedDaysForRefund">numberOfAllowedDaysForRefund (required).</param>
        /// <param name="processorId">processorId.</param>
        /// <param name="terminalId">terminalId.</param>
        /// <param name="isAddressRequires">isAddressRequires (required).</param>
        /// <param name="processor">processor.</param>
        /// <param name="terminal">terminal.</param>
        /// <param name="paymentGatewayTransactionLogs">paymentGatewayTransactionLogs.</param>
        /// <param name="authenticationValues">authenticationValues.</param>
        /// <param name="authenticationValuesAsXml">authenticationValuesAsXml.</param>
        public TerminalGatewayDatas(long? id = default(long?), string token = default(string), bool? isActive = default(bool?), int? numberOfAllowedDaysForRefund = default(int?), long? processorId = default(long?), long? terminalId = default(long?), bool? isAddressRequires = default(bool?), Processors processor = default(Processors), Terminals terminal = default(Terminals), List<PaymentGatewayTransactionLogs> paymentGatewayTransactionLogs = default(List<PaymentGatewayTransactionLogs>), Dictionary<string, string> authenticationValues = default(Dictionary<string, string>), string authenticationValuesAsXml = default(string))
        {
            this.Id = id;
            this.IsActive = isActive;
            this.NumberOfAllowedDaysForRefund = numberOfAllowedDaysForRefund;
            this.IsAddressRequires = isAddressRequires;
            this.Token = token;
            this.ProcessorId = processorId;
            this.TerminalId = terminalId;
            this.Processor = processor;
            this.Terminal = terminal;
            this.PaymentGatewayTransactionLogs = paymentGatewayTransactionLogs;
            this.AuthenticationValues = authenticationValues;
            this.AuthenticationValuesAsXml = authenticationValuesAsXml;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="Token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets NumberOfAllowedDaysForRefund
        /// </summary>
        [DataMember(Name="NumberOfAllowedDaysForRefund", EmitDefaultValue=false)]
        public int? NumberOfAllowedDaysForRefund { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorId
        /// </summary>
        [DataMember(Name="ProcessorId", EmitDefaultValue=false)]
        public long? ProcessorId { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="TerminalId", EmitDefaultValue=false)]
        public long? TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets IsAddressRequires
        /// </summary>
        [DataMember(Name="IsAddressRequires", EmitDefaultValue=false)]
        public bool? IsAddressRequires { get; set; }

        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="Processor", EmitDefaultValue=false)]
        public Processors Processor { get; set; }

        /// <summary>
        /// Gets or Sets Terminal
        /// </summary>
        [DataMember(Name="Terminal", EmitDefaultValue=false)]
        public Terminals Terminal { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGatewayTransactionLogs
        /// </summary>
        [DataMember(Name="PaymentGatewayTransactionLogs", EmitDefaultValue=false)]
        public List<PaymentGatewayTransactionLogs> PaymentGatewayTransactionLogs { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationValues
        /// </summary>
        [DataMember(Name="AuthenticationValues", EmitDefaultValue=false)]
        public Dictionary<string, string> AuthenticationValues { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationValuesAsXml
        /// </summary>
        [DataMember(Name="AuthenticationValuesAsXml", EmitDefaultValue=false)]
        public string AuthenticationValuesAsXml { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TerminalGatewayDatas {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  NumberOfAllowedDaysForRefund: ").Append(NumberOfAllowedDaysForRefund).Append("\n");
            sb.Append("  ProcessorId: ").Append(ProcessorId).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  IsAddressRequires: ").Append(IsAddressRequires).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  PaymentGatewayTransactionLogs: ").Append(PaymentGatewayTransactionLogs).Append("\n");
            sb.Append("  AuthenticationValues: ").Append(AuthenticationValues).Append("\n");
            sb.Append("  AuthenticationValuesAsXml: ").Append(AuthenticationValuesAsXml).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TerminalGatewayDatas);
        }

        /// <summary>
        /// Returns true if TerminalGatewayDatas instances are equal
        /// </summary>
        /// <param name="input">Instance of TerminalGatewayDatas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TerminalGatewayDatas input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.NumberOfAllowedDaysForRefund == input.NumberOfAllowedDaysForRefund ||
                    (this.NumberOfAllowedDaysForRefund != null &&
                    this.NumberOfAllowedDaysForRefund.Equals(input.NumberOfAllowedDaysForRefund))
                ) && 
                (
                    this.ProcessorId == input.ProcessorId ||
                    (this.ProcessorId != null &&
                    this.ProcessorId.Equals(input.ProcessorId))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.IsAddressRequires == input.IsAddressRequires ||
                    (this.IsAddressRequires != null &&
                    this.IsAddressRequires.Equals(input.IsAddressRequires))
                ) && 
                (
                    this.Processor == input.Processor ||
                    (this.Processor != null &&
                    this.Processor.Equals(input.Processor))
                ) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && 
                (
                    this.PaymentGatewayTransactionLogs == input.PaymentGatewayTransactionLogs ||
                    this.PaymentGatewayTransactionLogs != null &&
                    this.PaymentGatewayTransactionLogs.SequenceEqual(input.PaymentGatewayTransactionLogs)
                ) && 
                (
                    this.AuthenticationValues == input.AuthenticationValues ||
                    this.AuthenticationValues != null &&
                    this.AuthenticationValues.SequenceEqual(input.AuthenticationValues)
                ) && 
                (
                    this.AuthenticationValuesAsXml == input.AuthenticationValuesAsXml ||
                    (this.AuthenticationValuesAsXml != null &&
                    this.AuthenticationValuesAsXml.Equals(input.AuthenticationValuesAsXml))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.NumberOfAllowedDaysForRefund != null)
                    hashCode = hashCode * 59 + this.NumberOfAllowedDaysForRefund.GetHashCode();
                if (this.ProcessorId != null)
                    hashCode = hashCode * 59 + this.ProcessorId.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.IsAddressRequires != null)
                    hashCode = hashCode * 59 + this.IsAddressRequires.GetHashCode();
                if (this.Processor != null)
                    hashCode = hashCode * 59 + this.Processor.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.PaymentGatewayTransactionLogs != null)
                    hashCode = hashCode * 59 + this.PaymentGatewayTransactionLogs.GetHashCode();
                if (this.AuthenticationValues != null)
                    hashCode = hashCode * 59 + this.AuthenticationValues.GetHashCode();
                if (this.AuthenticationValuesAsXml != null)
                    hashCode = hashCode * 59 + this.AuthenticationValuesAsXml.GetHashCode();
                return hashCode;
            }
        }
    }

}
