/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ScpProviders
    /// </summary>
    [DataContract]
    public partial class ScpProviders :  IEquatable<ScpProviders>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScpProviders" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScpProviders() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScpProviders" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="implementationCode">implementationCode.</param>
        /// <param name="totalFunds">totalFunds (required).</param>
        /// <param name="maxNonSecurePlansPercent">maxNonSecurePlansPercent (required).</param>
        /// <param name="scpVariableCostAnnualPercent">scpVariableCostAnnualPercent (required).</param>
        /// <param name="scpFixedCost">scpFixedCost (required).</param>
        /// <param name="scpRevenueSharePercent">scpRevenueSharePercent (required).</param>
        /// <param name="totalFundsCurrencyId">totalFundsCurrencyId.</param>
        /// <param name="emailsList">emailsList.</param>
        /// <param name="isOperatedBySplitit">isOperatedBySplitit.</param>
        /// <param name="isFundingBySplitit">isFundingBySplitit (required).</param>
        /// <param name="deductRevenueShareAutomaticallyFromLastInstallment">deductRevenueShareAutomaticallyFromLastInstallment (required).</param>
        /// <param name="fundFirstInstallment">fundFirstInstallment (required).</param>
        /// <param name="totalFundsCurrency">totalFundsCurrency.</param>
        /// <param name="parameterGroup">parameterGroup.</param>
        /// <param name="scpProvidersCurrencies">scpProvidersCurrencies.</param>
        public ScpProviders(long? id = default(long?), string name = default(string), string implementationCode = default(string), decimal? totalFunds = default(decimal?), decimal? maxNonSecurePlansPercent = default(decimal?), decimal? scpVariableCostAnnualPercent = default(decimal?), decimal? scpFixedCost = default(decimal?), decimal? scpRevenueSharePercent = default(decimal?), long? totalFundsCurrencyId = default(long?), string emailsList = default(string), bool? isOperatedBySplitit = default(bool?), bool? isFundingBySplitit = default(bool?), bool? deductRevenueShareAutomaticallyFromLastInstallment = default(bool?), bool? fundFirstInstallment = default(bool?), Currencies totalFundsCurrency = default(Currencies), ParameterGroups parameterGroup = default(ParameterGroups), List<ScpProvidersCurrencies> scpProvidersCurrencies = default(List<ScpProvidersCurrencies>))
        {
            this.Id = id;
            this.TotalFunds = totalFunds;
            this.MaxNonSecurePlansPercent = maxNonSecurePlansPercent;
            this.ScpVariableCostAnnualPercent = scpVariableCostAnnualPercent;
            this.ScpFixedCost = scpFixedCost;
            this.ScpRevenueSharePercent = scpRevenueSharePercent;
            this.IsFundingBySplitit = isFundingBySplitit;
            this.DeductRevenueShareAutomaticallyFromLastInstallment = deductRevenueShareAutomaticallyFromLastInstallment;
            this.FundFirstInstallment = fundFirstInstallment;
            this.Name = name;
            this.ImplementationCode = implementationCode;
            this.TotalFundsCurrencyId = totalFundsCurrencyId;
            this.EmailsList = emailsList;
            this.IsOperatedBySplitit = isOperatedBySplitit;
            this.TotalFundsCurrency = totalFundsCurrency;
            this.ParameterGroup = parameterGroup;
            this.ScpProvidersCurrencies = scpProvidersCurrencies;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ImplementationCode
        /// </summary>
        [DataMember(Name="ImplementationCode", EmitDefaultValue=false)]
        public string ImplementationCode { get; set; }

        /// <summary>
        /// Gets or Sets TotalFunds
        /// </summary>
        [DataMember(Name="TotalFunds", EmitDefaultValue=false)]
        public decimal? TotalFunds { get; set; }

        /// <summary>
        /// Gets or Sets MaxNonSecurePlansPercent
        /// </summary>
        [DataMember(Name="MaxNonSecurePlansPercent", EmitDefaultValue=false)]
        public decimal? MaxNonSecurePlansPercent { get; set; }

        /// <summary>
        /// Gets or Sets ScpVariableCostAnnualPercent
        /// </summary>
        [DataMember(Name="ScpVariableCostAnnualPercent", EmitDefaultValue=false)]
        public decimal? ScpVariableCostAnnualPercent { get; set; }

        /// <summary>
        /// Gets or Sets ScpFixedCost
        /// </summary>
        [DataMember(Name="ScpFixedCost", EmitDefaultValue=false)]
        public decimal? ScpFixedCost { get; set; }

        /// <summary>
        /// Gets or Sets ScpRevenueSharePercent
        /// </summary>
        [DataMember(Name="ScpRevenueSharePercent", EmitDefaultValue=false)]
        public decimal? ScpRevenueSharePercent { get; set; }

        /// <summary>
        /// Gets or Sets TotalFundsCurrencyId
        /// </summary>
        [DataMember(Name="TotalFundsCurrencyId", EmitDefaultValue=false)]
        public long? TotalFundsCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets EmailsList
        /// </summary>
        [DataMember(Name="EmailsList", EmitDefaultValue=false)]
        public string EmailsList { get; set; }

        /// <summary>
        /// Gets or Sets IsOperatedBySplitit
        /// </summary>
        [DataMember(Name="IsOperatedBySplitit", EmitDefaultValue=false)]
        public bool? IsOperatedBySplitit { get; set; }

        /// <summary>
        /// Gets or Sets IsFundingBySplitit
        /// </summary>
        [DataMember(Name="IsFundingBySplitit", EmitDefaultValue=false)]
        public bool? IsFundingBySplitit { get; set; }

        /// <summary>
        /// Gets or Sets DeductRevenueShareAutomaticallyFromLastInstallment
        /// </summary>
        [DataMember(Name="DeductRevenueShareAutomaticallyFromLastInstallment", EmitDefaultValue=false)]
        public bool? DeductRevenueShareAutomaticallyFromLastInstallment { get; set; }

        /// <summary>
        /// Gets or Sets FundFirstInstallment
        /// </summary>
        [DataMember(Name="FundFirstInstallment", EmitDefaultValue=false)]
        public bool? FundFirstInstallment { get; set; }

        /// <summary>
        /// Gets or Sets TotalFundsCurrency
        /// </summary>
        [DataMember(Name="TotalFundsCurrency", EmitDefaultValue=false)]
        public Currencies TotalFundsCurrency { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroup
        /// </summary>
        [DataMember(Name="ParameterGroup", EmitDefaultValue=false)]
        public ParameterGroups ParameterGroup { get; set; }

        /// <summary>
        /// Gets or Sets ScpProvidersCurrencies
        /// </summary>
        [DataMember(Name="ScpProvidersCurrencies", EmitDefaultValue=false)]
        public List<ScpProvidersCurrencies> ScpProvidersCurrencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScpProviders {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ImplementationCode: ").Append(ImplementationCode).Append("\n");
            sb.Append("  TotalFunds: ").Append(TotalFunds).Append("\n");
            sb.Append("  MaxNonSecurePlansPercent: ").Append(MaxNonSecurePlansPercent).Append("\n");
            sb.Append("  ScpVariableCostAnnualPercent: ").Append(ScpVariableCostAnnualPercent).Append("\n");
            sb.Append("  ScpFixedCost: ").Append(ScpFixedCost).Append("\n");
            sb.Append("  ScpRevenueSharePercent: ").Append(ScpRevenueSharePercent).Append("\n");
            sb.Append("  TotalFundsCurrencyId: ").Append(TotalFundsCurrencyId).Append("\n");
            sb.Append("  EmailsList: ").Append(EmailsList).Append("\n");
            sb.Append("  IsOperatedBySplitit: ").Append(IsOperatedBySplitit).Append("\n");
            sb.Append("  IsFundingBySplitit: ").Append(IsFundingBySplitit).Append("\n");
            sb.Append("  DeductRevenueShareAutomaticallyFromLastInstallment: ").Append(DeductRevenueShareAutomaticallyFromLastInstallment).Append("\n");
            sb.Append("  FundFirstInstallment: ").Append(FundFirstInstallment).Append("\n");
            sb.Append("  TotalFundsCurrency: ").Append(TotalFundsCurrency).Append("\n");
            sb.Append("  ParameterGroup: ").Append(ParameterGroup).Append("\n");
            sb.Append("  ScpProvidersCurrencies: ").Append(ScpProvidersCurrencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScpProviders);
        }

        /// <summary>
        /// Returns true if ScpProviders instances are equal
        /// </summary>
        /// <param name="input">Instance of ScpProviders to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScpProviders input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ImplementationCode == input.ImplementationCode ||
                    (this.ImplementationCode != null &&
                    this.ImplementationCode.Equals(input.ImplementationCode))
                ) && 
                (
                    this.TotalFunds == input.TotalFunds ||
                    (this.TotalFunds != null &&
                    this.TotalFunds.Equals(input.TotalFunds))
                ) && 
                (
                    this.MaxNonSecurePlansPercent == input.MaxNonSecurePlansPercent ||
                    (this.MaxNonSecurePlansPercent != null &&
                    this.MaxNonSecurePlansPercent.Equals(input.MaxNonSecurePlansPercent))
                ) && 
                (
                    this.ScpVariableCostAnnualPercent == input.ScpVariableCostAnnualPercent ||
                    (this.ScpVariableCostAnnualPercent != null &&
                    this.ScpVariableCostAnnualPercent.Equals(input.ScpVariableCostAnnualPercent))
                ) && 
                (
                    this.ScpFixedCost == input.ScpFixedCost ||
                    (this.ScpFixedCost != null &&
                    this.ScpFixedCost.Equals(input.ScpFixedCost))
                ) && 
                (
                    this.ScpRevenueSharePercent == input.ScpRevenueSharePercent ||
                    (this.ScpRevenueSharePercent != null &&
                    this.ScpRevenueSharePercent.Equals(input.ScpRevenueSharePercent))
                ) && 
                (
                    this.TotalFundsCurrencyId == input.TotalFundsCurrencyId ||
                    (this.TotalFundsCurrencyId != null &&
                    this.TotalFundsCurrencyId.Equals(input.TotalFundsCurrencyId))
                ) && 
                (
                    this.EmailsList == input.EmailsList ||
                    (this.EmailsList != null &&
                    this.EmailsList.Equals(input.EmailsList))
                ) && 
                (
                    this.IsOperatedBySplitit == input.IsOperatedBySplitit ||
                    (this.IsOperatedBySplitit != null &&
                    this.IsOperatedBySplitit.Equals(input.IsOperatedBySplitit))
                ) && 
                (
                    this.IsFundingBySplitit == input.IsFundingBySplitit ||
                    (this.IsFundingBySplitit != null &&
                    this.IsFundingBySplitit.Equals(input.IsFundingBySplitit))
                ) && 
                (
                    this.DeductRevenueShareAutomaticallyFromLastInstallment == input.DeductRevenueShareAutomaticallyFromLastInstallment ||
                    (this.DeductRevenueShareAutomaticallyFromLastInstallment != null &&
                    this.DeductRevenueShareAutomaticallyFromLastInstallment.Equals(input.DeductRevenueShareAutomaticallyFromLastInstallment))
                ) && 
                (
                    this.FundFirstInstallment == input.FundFirstInstallment ||
                    (this.FundFirstInstallment != null &&
                    this.FundFirstInstallment.Equals(input.FundFirstInstallment))
                ) && 
                (
                    this.TotalFundsCurrency == input.TotalFundsCurrency ||
                    (this.TotalFundsCurrency != null &&
                    this.TotalFundsCurrency.Equals(input.TotalFundsCurrency))
                ) && 
                (
                    this.ParameterGroup == input.ParameterGroup ||
                    (this.ParameterGroup != null &&
                    this.ParameterGroup.Equals(input.ParameterGroup))
                ) && 
                (
                    this.ScpProvidersCurrencies == input.ScpProvidersCurrencies ||
                    this.ScpProvidersCurrencies != null &&
                    this.ScpProvidersCurrencies.SequenceEqual(input.ScpProvidersCurrencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ImplementationCode != null)
                    hashCode = hashCode * 59 + this.ImplementationCode.GetHashCode();
                if (this.TotalFunds != null)
                    hashCode = hashCode * 59 + this.TotalFunds.GetHashCode();
                if (this.MaxNonSecurePlansPercent != null)
                    hashCode = hashCode * 59 + this.MaxNonSecurePlansPercent.GetHashCode();
                if (this.ScpVariableCostAnnualPercent != null)
                    hashCode = hashCode * 59 + this.ScpVariableCostAnnualPercent.GetHashCode();
                if (this.ScpFixedCost != null)
                    hashCode = hashCode * 59 + this.ScpFixedCost.GetHashCode();
                if (this.ScpRevenueSharePercent != null)
                    hashCode = hashCode * 59 + this.ScpRevenueSharePercent.GetHashCode();
                if (this.TotalFundsCurrencyId != null)
                    hashCode = hashCode * 59 + this.TotalFundsCurrencyId.GetHashCode();
                if (this.EmailsList != null)
                    hashCode = hashCode * 59 + this.EmailsList.GetHashCode();
                if (this.IsOperatedBySplitit != null)
                    hashCode = hashCode * 59 + this.IsOperatedBySplitit.GetHashCode();
                if (this.IsFundingBySplitit != null)
                    hashCode = hashCode * 59 + this.IsFundingBySplitit.GetHashCode();
                if (this.DeductRevenueShareAutomaticallyFromLastInstallment != null)
                    hashCode = hashCode * 59 + this.DeductRevenueShareAutomaticallyFromLastInstallment.GetHashCode();
                if (this.FundFirstInstallment != null)
                    hashCode = hashCode * 59 + this.FundFirstInstallment.GetHashCode();
                if (this.TotalFundsCurrency != null)
                    hashCode = hashCode * 59 + this.TotalFundsCurrency.GetHashCode();
                if (this.ParameterGroup != null)
                    hashCode = hashCode * 59 + this.ParameterGroup.GetHashCode();
                if (this.ScpProvidersCurrencies != null)
                    hashCode = hashCode * 59 + this.ScpProvidersCurrencies.GetHashCode();
                return hashCode;
            }
        }
    }

}
