/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// AccountUpdaterPendingCards
    /// </summary>
    [DataContract]
    public partial class AccountUpdaterPendingCards :  IEquatable<AccountUpdaterPendingCards>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdaterPendingCards" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountUpdaterPendingCards() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUpdaterPendingCards" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="cardId">cardId (required).</param>
        /// <param name="exportTime">exportTime.</param>
        /// <param name="exportBatchId">exportBatchId.</param>
        /// <param name="exportRecordId">exportRecordId.</param>
        /// <param name="importTime">importTime.</param>
        /// <param name="card">card.</param>
        /// <param name="accountUpdater">accountUpdater (required).</param>
        public AccountUpdaterPendingCards(long? id = default(long?), long? cardId = default(long?), DateTime? exportTime = default(DateTime?), string exportBatchId = default(string), string exportRecordId = default(string), DateTime? importTime = default(DateTime?), Cards card = default(Cards), AccountUpdaterProvider accountUpdater = default(AccountUpdaterProvider))
        {
            this.Id = id;
            this.CardId = cardId;
            this.AccountUpdater = accountUpdater;
            this.ExportTime = exportTime;
            this.ExportBatchId = exportBatchId;
            this.ExportRecordId = exportRecordId;
            this.ImportTime = importTime;
            this.Card = card;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CardId
        /// </summary>
        [DataMember(Name="CardId", EmitDefaultValue=false)]
        public long? CardId { get; set; }

        /// <summary>
        /// Gets or Sets ExportTime
        /// </summary>
        [DataMember(Name="ExportTime", EmitDefaultValue=false)]
        public DateTime? ExportTime { get; set; }

        /// <summary>
        /// Gets or Sets ExportBatchId
        /// </summary>
        [DataMember(Name="ExportBatchId", EmitDefaultValue=false)]
        public string ExportBatchId { get; set; }

        /// <summary>
        /// Gets or Sets ExportRecordId
        /// </summary>
        [DataMember(Name="ExportRecordId", EmitDefaultValue=false)]
        public string ExportRecordId { get; set; }

        /// <summary>
        /// Gets or Sets ImportTime
        /// </summary>
        [DataMember(Name="ImportTime", EmitDefaultValue=false)]
        public DateTime? ImportTime { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="Card", EmitDefaultValue=false)]
        public Cards Card { get; set; }

        /// <summary>
        /// Gets or Sets AccountUpdater
        /// </summary>
        [DataMember(Name="AccountUpdater", EmitDefaultValue=false)]
        public AccountUpdaterProvider AccountUpdater { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountUpdaterPendingCards {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  ExportTime: ").Append(ExportTime).Append("\n");
            sb.Append("  ExportBatchId: ").Append(ExportBatchId).Append("\n");
            sb.Append("  ExportRecordId: ").Append(ExportRecordId).Append("\n");
            sb.Append("  ImportTime: ").Append(ImportTime).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  AccountUpdater: ").Append(AccountUpdater).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountUpdaterPendingCards);
        }

        /// <summary>
        /// Returns true if AccountUpdaterPendingCards instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountUpdaterPendingCards to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountUpdaterPendingCards input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.ExportTime == input.ExportTime ||
                    (this.ExportTime != null &&
                    this.ExportTime.Equals(input.ExportTime))
                ) && 
                (
                    this.ExportBatchId == input.ExportBatchId ||
                    (this.ExportBatchId != null &&
                    this.ExportBatchId.Equals(input.ExportBatchId))
                ) && 
                (
                    this.ExportRecordId == input.ExportRecordId ||
                    (this.ExportRecordId != null &&
                    this.ExportRecordId.Equals(input.ExportRecordId))
                ) && 
                (
                    this.ImportTime == input.ImportTime ||
                    (this.ImportTime != null &&
                    this.ImportTime.Equals(input.ImportTime))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.AccountUpdater == input.AccountUpdater ||
                    (this.AccountUpdater != null &&
                    this.AccountUpdater.Equals(input.AccountUpdater))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.ExportTime != null)
                    hashCode = hashCode * 59 + this.ExportTime.GetHashCode();
                if (this.ExportBatchId != null)
                    hashCode = hashCode * 59 + this.ExportBatchId.GetHashCode();
                if (this.ExportRecordId != null)
                    hashCode = hashCode * 59 + this.ExportRecordId.GetHashCode();
                if (this.ImportTime != null)
                    hashCode = hashCode * 59 + this.ImportTime.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.AccountUpdater != null)
                    hashCode = hashCode * 59 + this.AccountUpdater.GetHashCode();
                return hashCode;
            }
        }
    }

}
