/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ProcessorAuthenticationParameters
    /// </summary>
    [DataContract]
    public partial class ProcessorAuthenticationParameters :  IEquatable<ProcessorAuthenticationParameters>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessorAuthenticationParameters" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProcessorAuthenticationParameters() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessorAuthenticationParameters" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="key">key.</param>
        /// <param name="order">order (required).</param>
        /// <param name="processorId">processorId.</param>
        /// <param name="processor">processor.</param>
        public ProcessorAuthenticationParameters(long? id = default(long?), string displayName = default(string), string key = default(string), int? order = default(int?), long? processorId = default(long?), Processors processor = default(Processors))
        {
            this.Id = id;
            this.Order = order;
            this.DisplayName = displayName;
            this.Key = key;
            this.ProcessorId = processorId;
            this.Processor = processor;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="Key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="Order", EmitDefaultValue=false)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorId
        /// </summary>
        [DataMember(Name="ProcessorId", EmitDefaultValue=false)]
        public long? ProcessorId { get; set; }

        /// <summary>
        /// Gets or Sets Processor
        /// </summary>
        [DataMember(Name="Processor", EmitDefaultValue=false)]
        public Processors Processor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessorAuthenticationParameters {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  ProcessorId: ").Append(ProcessorId).Append("\n");
            sb.Append("  Processor: ").Append(Processor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProcessorAuthenticationParameters);
        }

        /// <summary>
        /// Returns true if ProcessorAuthenticationParameters instances are equal
        /// </summary>
        /// <param name="input">Instance of ProcessorAuthenticationParameters to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessorAuthenticationParameters input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.ProcessorId == input.ProcessorId ||
                    (this.ProcessorId != null &&
                    this.ProcessorId.Equals(input.ProcessorId))
                ) && 
                (
                    this.Processor == input.Processor ||
                    (this.Processor != null &&
                    this.Processor.Equals(input.Processor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.ProcessorId != null)
                    hashCode = hashCode * 59 + this.ProcessorId.GetHashCode();
                if (this.Processor != null)
                    hashCode = hashCode * 59 + this.Processor.GetHashCode();
                return hashCode;
            }
        }
    }

}
