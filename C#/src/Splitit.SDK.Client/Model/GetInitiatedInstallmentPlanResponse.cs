/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// GetInitiatedInstallmentPlanResponse
    /// </summary>
    [DataContract]
    public partial class GetInitiatedInstallmentPlanResponse :  IEquatable<GetInitiatedInstallmentPlanResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInitiatedInstallmentPlanResponse" /> class.
        /// </summary>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        /// <param name="planData">planData.</param>
        /// <param name="cartData">cartData.</param>
        /// <param name="consumerData">consumerData.</param>
        /// <param name="merchantData">merchantData.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="paymentWizardDataResponse">paymentWizardDataResponse.</param>
        /// <param name="errorIndicator">errorIndicator.</param>
        public GetInitiatedInstallmentPlanResponse(ResponseHeader responseHeader = default(ResponseHeader), string installmentPlanNumber = default(string), PlanData planData = default(PlanData), CartData cartData = default(CartData), ConsumerData consumerData = default(ConsumerData), Merchant merchantData = default(Merchant), AddressData billingAddress = default(AddressData), PaymentWizardDataResponse paymentWizardDataResponse = default(PaymentWizardDataResponse), Error errorIndicator = default(Error))
        {
            this.ResponseHeader = responseHeader;
            this.InstallmentPlanNumber = installmentPlanNumber;
            this.PlanData = planData;
            this.CartData = cartData;
            this.ConsumerData = consumerData;
            this.MerchantData = merchantData;
            this.BillingAddress = billingAddress;
            this.PaymentWizardDataResponse = paymentWizardDataResponse;
            this.ErrorIndicator = errorIndicator;
        }

        
        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name="ResponseHeader", EmitDefaultValue=false)]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name="InstallmentPlanNumber", EmitDefaultValue=false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Gets or Sets PlanData
        /// </summary>
        [DataMember(Name="PlanData", EmitDefaultValue=false)]
        public PlanData PlanData { get; set; }

        /// <summary>
        /// Gets or Sets CartData
        /// </summary>
        [DataMember(Name="CartData", EmitDefaultValue=false)]
        public CartData CartData { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerData
        /// </summary>
        [DataMember(Name="ConsumerData", EmitDefaultValue=false)]
        public ConsumerData ConsumerData { get; set; }

        /// <summary>
        /// Gets or Sets MerchantData
        /// </summary>
        [DataMember(Name="MerchantData", EmitDefaultValue=false)]
        public Merchant MerchantData { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public AddressData BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets PaymentWizardDataResponse
        /// </summary>
        [DataMember(Name="PaymentWizardDataResponse", EmitDefaultValue=false)]
        public PaymentWizardDataResponse PaymentWizardDataResponse { get; set; }

        /// <summary>
        /// Gets or Sets ErrorIndicator
        /// </summary>
        [DataMember(Name="ErrorIndicator", EmitDefaultValue=false)]
        public Error ErrorIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInitiatedInstallmentPlanResponse {\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("  PlanData: ").Append(PlanData).Append("\n");
            sb.Append("  CartData: ").Append(CartData).Append("\n");
            sb.Append("  ConsumerData: ").Append(ConsumerData).Append("\n");
            sb.Append("  MerchantData: ").Append(MerchantData).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  PaymentWizardDataResponse: ").Append(PaymentWizardDataResponse).Append("\n");
            sb.Append("  ErrorIndicator: ").Append(ErrorIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInitiatedInstallmentPlanResponse);
        }

        /// <summary>
        /// Returns true if GetInitiatedInstallmentPlanResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInitiatedInstallmentPlanResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInitiatedInstallmentPlanResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseHeader == input.ResponseHeader ||
                    (this.ResponseHeader != null &&
                    this.ResponseHeader.Equals(input.ResponseHeader))
                ) && 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                ) && 
                (
                    this.PlanData == input.PlanData ||
                    (this.PlanData != null &&
                    this.PlanData.Equals(input.PlanData))
                ) && 
                (
                    this.CartData == input.CartData ||
                    (this.CartData != null &&
                    this.CartData.Equals(input.CartData))
                ) && 
                (
                    this.ConsumerData == input.ConsumerData ||
                    (this.ConsumerData != null &&
                    this.ConsumerData.Equals(input.ConsumerData))
                ) && 
                (
                    this.MerchantData == input.MerchantData ||
                    (this.MerchantData != null &&
                    this.MerchantData.Equals(input.MerchantData))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.PaymentWizardDataResponse == input.PaymentWizardDataResponse ||
                    (this.PaymentWizardDataResponse != null &&
                    this.PaymentWizardDataResponse.Equals(input.PaymentWizardDataResponse))
                ) && 
                (
                    this.ErrorIndicator == input.ErrorIndicator ||
                    (this.ErrorIndicator != null &&
                    this.ErrorIndicator.Equals(input.ErrorIndicator))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseHeader != null)
                    hashCode = hashCode * 59 + this.ResponseHeader.GetHashCode();
                if (this.InstallmentPlanNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanNumber.GetHashCode();
                if (this.PlanData != null)
                    hashCode = hashCode * 59 + this.PlanData.GetHashCode();
                if (this.CartData != null)
                    hashCode = hashCode * 59 + this.CartData.GetHashCode();
                if (this.ConsumerData != null)
                    hashCode = hashCode * 59 + this.ConsumerData.GetHashCode();
                if (this.MerchantData != null)
                    hashCode = hashCode * 59 + this.MerchantData.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.PaymentWizardDataResponse != null)
                    hashCode = hashCode * 59 + this.PaymentWizardDataResponse.GetHashCode();
                if (this.ErrorIndicator != null)
                    hashCode = hashCode * 59 + this.ErrorIndicator.GetHashCode();
                return hashCode;
            }
        }
    }

}
