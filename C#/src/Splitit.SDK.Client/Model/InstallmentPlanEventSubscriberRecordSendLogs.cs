/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// InstallmentPlanEventSubscriberRecordSendLogs
    /// </summary>
    [DataContract]
    public partial class InstallmentPlanEventSubscriberRecordSendLogs :  IEquatable<InstallmentPlanEventSubscriberRecordSendLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanEventSubscriberRecordSendLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlanEventSubscriberRecordSendLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanEventSubscriberRecordSendLogs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="installmentPlanEventSubscriberRecordId">installmentPlanEventSubscriberRecordId (required).</param>
        /// <param name="sendTime">sendTime (required).</param>
        /// <param name="response">response.</param>
        /// <param name="installmentPlanEventSubscriberRecord">installmentPlanEventSubscriberRecord.</param>
        public InstallmentPlanEventSubscriberRecordSendLogs(long? id = default(long?), long? installmentPlanEventSubscriberRecordId = default(long?), DateTime? sendTime = default(DateTime?), string response = default(string), InstallmentPlanEventSubscriberRecords installmentPlanEventSubscriberRecord = default(InstallmentPlanEventSubscriberRecords))
        {
            this.Id = id;
            this.InstallmentPlanEventSubscriberRecordId = installmentPlanEventSubscriberRecordId;
            this.SendTime = sendTime;
            this.Response = response;
            this.InstallmentPlanEventSubscriberRecord = installmentPlanEventSubscriberRecord;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEventSubscriberRecordId
        /// </summary>
        [DataMember(Name="InstallmentPlanEventSubscriberRecordId", EmitDefaultValue=false)]
        public long? InstallmentPlanEventSubscriberRecordId { get; set; }

        /// <summary>
        /// Gets or Sets SendTime
        /// </summary>
        [DataMember(Name="SendTime", EmitDefaultValue=false)]
        public DateTime? SendTime { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [DataMember(Name="Response", EmitDefaultValue=false)]
        public string Response { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEventSubscriberRecord
        /// </summary>
        [DataMember(Name="InstallmentPlanEventSubscriberRecord", EmitDefaultValue=false)]
        public InstallmentPlanEventSubscriberRecords InstallmentPlanEventSubscriberRecord { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentPlanEventSubscriberRecordSendLogs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallmentPlanEventSubscriberRecordId: ").Append(InstallmentPlanEventSubscriberRecordId).Append("\n");
            sb.Append("  SendTime: ").Append(SendTime).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  InstallmentPlanEventSubscriberRecord: ").Append(InstallmentPlanEventSubscriberRecord).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlanEventSubscriberRecordSendLogs);
        }

        /// <summary>
        /// Returns true if InstallmentPlanEventSubscriberRecordSendLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlanEventSubscriberRecordSendLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlanEventSubscriberRecordSendLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallmentPlanEventSubscriberRecordId == input.InstallmentPlanEventSubscriberRecordId ||
                    (this.InstallmentPlanEventSubscriberRecordId != null &&
                    this.InstallmentPlanEventSubscriberRecordId.Equals(input.InstallmentPlanEventSubscriberRecordId))
                ) && 
                (
                    this.SendTime == input.SendTime ||
                    (this.SendTime != null &&
                    this.SendTime.Equals(input.SendTime))
                ) && 
                (
                    this.Response == input.Response ||
                    (this.Response != null &&
                    this.Response.Equals(input.Response))
                ) && 
                (
                    this.InstallmentPlanEventSubscriberRecord == input.InstallmentPlanEventSubscriberRecord ||
                    (this.InstallmentPlanEventSubscriberRecord != null &&
                    this.InstallmentPlanEventSubscriberRecord.Equals(input.InstallmentPlanEventSubscriberRecord))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallmentPlanEventSubscriberRecordId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEventSubscriberRecordId.GetHashCode();
                if (this.SendTime != null)
                    hashCode = hashCode * 59 + this.SendTime.GetHashCode();
                if (this.Response != null)
                    hashCode = hashCode * 59 + this.Response.GetHashCode();
                if (this.InstallmentPlanEventSubscriberRecord != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEventSubscriberRecord.GetHashCode();
                return hashCode;
            }
        }
    }

}
