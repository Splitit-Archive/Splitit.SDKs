/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// BinData
    /// </summary>
    [DataContract]
    public partial class BinData :  IEquatable<BinData>
    {
        /// <summary>
        /// Gets or Sets CardBrand
        /// </summary>
        [DataMember(Name="CardBrand", EmitDefaultValue=false)]
        public CardBrand CardBrand { get; set; }
        /// <summary>
        /// Gets or Sets CardType
        /// </summary>
        [DataMember(Name="CardType", EmitDefaultValue=false)]
        public CardType CardType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BinData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BinData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BinData" /> class.
        /// </summary>
        /// <param name="binNumber">binNumber.</param>
        /// <param name="cardBrand">cardBrand (required).</param>
        /// <param name="issuingCountryIsoNumber">issuingCountryIsoNumber.</param>
        /// <param name="cardType">cardType (required).</param>
        /// <param name="isPrepaid">isPrepaid (required).</param>
        /// <param name="cardClass">cardClass.</param>
        /// <param name="productId">productId.</param>
        /// <param name="issuerBankName">issuerBankName.</param>
        public BinData(string binNumber = default(string), CardBrand cardBrand = default(CardBrand), string issuingCountryIsoNumber = default(string), CardType cardType = default(CardType), bool? isPrepaid = default(bool?), string cardClass = default(string), string productId = default(string), string issuerBankName = default(string))
        {
            this.CardBrand = cardBrand;
            this.CardType = cardType;
            this.IsPrepaid = isPrepaid;
            this.BinNumber = binNumber;
            this.IssuingCountryIsoNumber = issuingCountryIsoNumber;
            this.CardClass = cardClass;
            this.ProductId = productId;
            this.IssuerBankName = issuerBankName;
        }

        
        /// <summary>
        /// Gets or Sets BinNumber
        /// </summary>
        [DataMember(Name="BinNumber", EmitDefaultValue=false)]
        public string BinNumber { get; set; }


        /// <summary>
        /// Gets or Sets IssuingCountryIsoNumber
        /// </summary>
        [DataMember(Name="IssuingCountryIsoNumber", EmitDefaultValue=false)]
        public string IssuingCountryIsoNumber { get; set; }


        /// <summary>
        /// Gets or Sets IsPrepaid
        /// </summary>
        [DataMember(Name="IsPrepaid", EmitDefaultValue=false)]
        public bool? IsPrepaid { get; set; }

        /// <summary>
        /// Gets or Sets CardClass
        /// </summary>
        [DataMember(Name="CardClass", EmitDefaultValue=false)]
        public string CardClass { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="ProductId", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets IssuerBankName
        /// </summary>
        [DataMember(Name="IssuerBankName", EmitDefaultValue=false)]
        public string IssuerBankName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BinData {\n");
            sb.Append("  BinNumber: ").Append(BinNumber).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("  IssuingCountryIsoNumber: ").Append(IssuingCountryIsoNumber).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  IsPrepaid: ").Append(IsPrepaid).Append("\n");
            sb.Append("  CardClass: ").Append(CardClass).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  IssuerBankName: ").Append(IssuerBankName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BinData);
        }

        /// <summary>
        /// Returns true if BinData instances are equal
        /// </summary>
        /// <param name="input">Instance of BinData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BinData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BinNumber == input.BinNumber ||
                    (this.BinNumber != null &&
                    this.BinNumber.Equals(input.BinNumber))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                ) && 
                (
                    this.IssuingCountryIsoNumber == input.IssuingCountryIsoNumber ||
                    (this.IssuingCountryIsoNumber != null &&
                    this.IssuingCountryIsoNumber.Equals(input.IssuingCountryIsoNumber))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.IsPrepaid == input.IsPrepaid ||
                    (this.IsPrepaid != null &&
                    this.IsPrepaid.Equals(input.IsPrepaid))
                ) && 
                (
                    this.CardClass == input.CardClass ||
                    (this.CardClass != null &&
                    this.CardClass.Equals(input.CardClass))
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.IssuerBankName == input.IssuerBankName ||
                    (this.IssuerBankName != null &&
                    this.IssuerBankName.Equals(input.IssuerBankName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BinNumber != null)
                    hashCode = hashCode * 59 + this.BinNumber.GetHashCode();
                if (this.CardBrand != null)
                    hashCode = hashCode * 59 + this.CardBrand.GetHashCode();
                if (this.IssuingCountryIsoNumber != null)
                    hashCode = hashCode * 59 + this.IssuingCountryIsoNumber.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.IsPrepaid != null)
                    hashCode = hashCode * 59 + this.IsPrepaid.GetHashCode();
                if (this.CardClass != null)
                    hashCode = hashCode * 59 + this.CardClass.GetHashCode();
                if (this.ProductId != null)
                    hashCode = hashCode * 59 + this.ProductId.GetHashCode();
                if (this.IssuerBankName != null)
                    hashCode = hashCode * 59 + this.IssuerBankName.GetHashCode();
                return hashCode;
            }
        }
    }

}
