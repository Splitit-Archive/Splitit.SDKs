/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// GetInitiatedUpdatePaymentDataResponse
    /// </summary>
    [DataContract]
    public partial class GetInitiatedUpdatePaymentDataResponse :  IEquatable<GetInitiatedUpdatePaymentDataResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInitiatedUpdatePaymentDataResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetInitiatedUpdatePaymentDataResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetInitiatedUpdatePaymentDataResponse" /> class.
        /// </summary>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="cardData">cardData.</param>
        /// <param name="merchant">merchant.</param>
        /// <param name="redirectUrls">redirectUrls.</param>
        /// <param name="outstandingAmount">outstandingAmount.</param>
        /// <param name="termsAndConditions">termsAndConditions.</param>
        /// <param name="processorName">processorName.</param>
        /// <param name="is3DSRequired">is3DSRequired (required).</param>
        /// <param name="lastError">lastError.</param>
        /// <param name="logo">logo.</param>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        public GetInitiatedUpdatePaymentDataResponse(ResponseHeader responseHeader = default(ResponseHeader), CardData cardData = default(CardData), MerchantRef merchant = default(MerchantRef), RedirectUrls redirectUrls = default(RedirectUrls), MoneyWithCurrencyCode outstandingAmount = default(MoneyWithCurrencyCode), TermsAndConditions termsAndConditions = default(TermsAndConditions), string processorName = default(string), bool? is3DSRequired = default(bool?), Error lastError = default(Error), string logo = default(string), string installmentPlanNumber = default(string))
        {
            this.Is3DSRequired = is3DSRequired;
            this.ResponseHeader = responseHeader;
            this.CardData = cardData;
            this.Merchant = merchant;
            this.RedirectUrls = redirectUrls;
            this.OutstandingAmount = outstandingAmount;
            this.TermsAndConditions = termsAndConditions;
            this.ProcessorName = processorName;
            this.LastError = lastError;
            this.Logo = logo;
            this.InstallmentPlanNumber = installmentPlanNumber;
        }

        
        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name="ResponseHeader", EmitDefaultValue=false)]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets CardData
        /// </summary>
        [DataMember(Name="CardData", EmitDefaultValue=false)]
        public CardData CardData { get; set; }

        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name="Merchant", EmitDefaultValue=false)]
        public MerchantRef Merchant { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUrls
        /// </summary>
        [DataMember(Name="RedirectUrls", EmitDefaultValue=false)]
        public RedirectUrls RedirectUrls { get; set; }

        /// <summary>
        /// Gets or Sets OutstandingAmount
        /// </summary>
        [DataMember(Name="OutstandingAmount", EmitDefaultValue=false)]
        public MoneyWithCurrencyCode OutstandingAmount { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditions
        /// </summary>
        [DataMember(Name="TermsAndConditions", EmitDefaultValue=false)]
        public TermsAndConditions TermsAndConditions { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorName
        /// </summary>
        [DataMember(Name="ProcessorName", EmitDefaultValue=false)]
        public string ProcessorName { get; set; }

        /// <summary>
        /// Gets or Sets Is3DSRequired
        /// </summary>
        [DataMember(Name="Is3DSRequired", EmitDefaultValue=false)]
        public bool? Is3DSRequired { get; set; }

        /// <summary>
        /// Gets or Sets LastError
        /// </summary>
        [DataMember(Name="LastError", EmitDefaultValue=false)]
        public Error LastError { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="Logo", EmitDefaultValue=false)]
        public string Logo { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name="InstallmentPlanNumber", EmitDefaultValue=false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInitiatedUpdatePaymentDataResponse {\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  CardData: ").Append(CardData).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  RedirectUrls: ").Append(RedirectUrls).Append("\n");
            sb.Append("  OutstandingAmount: ").Append(OutstandingAmount).Append("\n");
            sb.Append("  TermsAndConditions: ").Append(TermsAndConditions).Append("\n");
            sb.Append("  ProcessorName: ").Append(ProcessorName).Append("\n");
            sb.Append("  Is3DSRequired: ").Append(Is3DSRequired).Append("\n");
            sb.Append("  LastError: ").Append(LastError).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetInitiatedUpdatePaymentDataResponse);
        }

        /// <summary>
        /// Returns true if GetInitiatedUpdatePaymentDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetInitiatedUpdatePaymentDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInitiatedUpdatePaymentDataResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseHeader == input.ResponseHeader ||
                    (this.ResponseHeader != null &&
                    this.ResponseHeader.Equals(input.ResponseHeader))
                ) && 
                (
                    this.CardData == input.CardData ||
                    (this.CardData != null &&
                    this.CardData.Equals(input.CardData))
                ) && 
                (
                    this.Merchant == input.Merchant ||
                    (this.Merchant != null &&
                    this.Merchant.Equals(input.Merchant))
                ) && 
                (
                    this.RedirectUrls == input.RedirectUrls ||
                    (this.RedirectUrls != null &&
                    this.RedirectUrls.Equals(input.RedirectUrls))
                ) && 
                (
                    this.OutstandingAmount == input.OutstandingAmount ||
                    (this.OutstandingAmount != null &&
                    this.OutstandingAmount.Equals(input.OutstandingAmount))
                ) && 
                (
                    this.TermsAndConditions == input.TermsAndConditions ||
                    (this.TermsAndConditions != null &&
                    this.TermsAndConditions.Equals(input.TermsAndConditions))
                ) && 
                (
                    this.ProcessorName == input.ProcessorName ||
                    (this.ProcessorName != null &&
                    this.ProcessorName.Equals(input.ProcessorName))
                ) && 
                (
                    this.Is3DSRequired == input.Is3DSRequired ||
                    (this.Is3DSRequired != null &&
                    this.Is3DSRequired.Equals(input.Is3DSRequired))
                ) && 
                (
                    this.LastError == input.LastError ||
                    (this.LastError != null &&
                    this.LastError.Equals(input.LastError))
                ) && 
                (
                    this.Logo == input.Logo ||
                    (this.Logo != null &&
                    this.Logo.Equals(input.Logo))
                ) && 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseHeader != null)
                    hashCode = hashCode * 59 + this.ResponseHeader.GetHashCode();
                if (this.CardData != null)
                    hashCode = hashCode * 59 + this.CardData.GetHashCode();
                if (this.Merchant != null)
                    hashCode = hashCode * 59 + this.Merchant.GetHashCode();
                if (this.RedirectUrls != null)
                    hashCode = hashCode * 59 + this.RedirectUrls.GetHashCode();
                if (this.OutstandingAmount != null)
                    hashCode = hashCode * 59 + this.OutstandingAmount.GetHashCode();
                if (this.TermsAndConditions != null)
                    hashCode = hashCode * 59 + this.TermsAndConditions.GetHashCode();
                if (this.ProcessorName != null)
                    hashCode = hashCode * 59 + this.ProcessorName.GetHashCode();
                if (this.Is3DSRequired != null)
                    hashCode = hashCode * 59 + this.Is3DSRequired.GetHashCode();
                if (this.LastError != null)
                    hashCode = hashCode * 59 + this.LastError.GetHashCode();
                if (this.Logo != null)
                    hashCode = hashCode * 59 + this.Logo.GetHashCode();
                if (this.InstallmentPlanNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanNumber.GetHashCode();
                return hashCode;
            }
        }
    }

}
