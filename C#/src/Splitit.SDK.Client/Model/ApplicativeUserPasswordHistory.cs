/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ApplicativeUserPasswordHistory
    /// </summary>
    [DataContract]
    public partial class ApplicativeUserPasswordHistory :  IEquatable<ApplicativeUserPasswordHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicativeUserPasswordHistory" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicativeUserPasswordHistory() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicativeUserPasswordHistory" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="password">password.</param>
        /// <param name="passwordHash">passwordHash.</param>
        /// <param name="passwordExpDate">passwordExpDate (required).</param>
        public ApplicativeUserPasswordHistory(long? id = default(long?), string password = default(string), string passwordHash = default(string), DateTime? passwordExpDate = default(DateTime?))
        {
            this.Id = id;
            this.PasswordExpDate = passwordExpDate;
            this.Password = password;
            this.PasswordHash = passwordHash;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="Password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets PasswordHash
        /// </summary>
        [DataMember(Name="PasswordHash", EmitDefaultValue=false)]
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets or Sets PasswordExpDate
        /// </summary>
        [DataMember(Name="PasswordExpDate", EmitDefaultValue=false)]
        public DateTime? PasswordExpDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicativeUserPasswordHistory {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  PasswordHash: ").Append(PasswordHash).Append("\n");
            sb.Append("  PasswordExpDate: ").Append(PasswordExpDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicativeUserPasswordHistory);
        }

        /// <summary>
        /// Returns true if ApplicativeUserPasswordHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicativeUserPasswordHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicativeUserPasswordHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.PasswordHash == input.PasswordHash ||
                    (this.PasswordHash != null &&
                    this.PasswordHash.Equals(input.PasswordHash))
                ) && 
                (
                    this.PasswordExpDate == input.PasswordExpDate ||
                    (this.PasswordExpDate != null &&
                    this.PasswordExpDate.Equals(input.PasswordExpDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.PasswordHash != null)
                    hashCode = hashCode * 59 + this.PasswordHash.GetHashCode();
                if (this.PasswordExpDate != null)
                    hashCode = hashCode * 59 + this.PasswordExpDate.GetHashCode();
                return hashCode;
            }
        }
    }

}
