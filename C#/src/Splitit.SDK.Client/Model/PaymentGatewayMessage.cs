/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// PaymentGatewayMessage
    /// </summary>
    [DataContract]
    public partial class PaymentGatewayMessage :  IEquatable<PaymentGatewayMessage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGatewayMessage" /> class.
        /// </summary>
        /// <param name="messageCode">messageCode.</param>
        /// <param name="messageText">messageText.</param>
        public PaymentGatewayMessage(string messageCode = default(string), string messageText = default(string))
        {
            this.MessageCode = messageCode;
            this.MessageText = messageText;
        }

        
        /// <summary>
        /// Gets or Sets MessageCode
        /// </summary>
        [DataMember(Name="MessageCode", EmitDefaultValue=false)]
        public string MessageCode { get; set; }

        /// <summary>
        /// Gets or Sets MessageText
        /// </summary>
        [DataMember(Name="MessageText", EmitDefaultValue=false)]
        public string MessageText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentGatewayMessage {\n");
            sb.Append("  MessageCode: ").Append(MessageCode).Append("\n");
            sb.Append("  MessageText: ").Append(MessageText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentGatewayMessage);
        }

        /// <summary>
        /// Returns true if PaymentGatewayMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentGatewayMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentGatewayMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MessageCode == input.MessageCode ||
                    (this.MessageCode != null &&
                    this.MessageCode.Equals(input.MessageCode))
                ) && 
                (
                    this.MessageText == input.MessageText ||
                    (this.MessageText != null &&
                    this.MessageText.Equals(input.MessageText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MessageCode != null)
                    hashCode = hashCode * 59 + this.MessageCode.GetHashCode();
                if (this.MessageText != null)
                    hashCode = hashCode * 59 + this.MessageText.GetHashCode();
                return hashCode;
            }
        }
    }

}
