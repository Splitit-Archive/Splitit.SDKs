/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// GetResourcesResponse
    /// </summary>
    [DataContract]
    public partial class GetResourcesResponse :  IEquatable<GetResourcesResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetResourcesResponse" /> class.
        /// </summary>
        /// <param name="logos">logos.</param>
        /// <param name="touchPointColors">touchPointColors.</param>
        /// <param name="resourcesGroupedByCategories">resourcesGroupedByCategories.</param>
        /// <param name="responseHeader">responseHeader.</param>
        public GetResourcesResponse(Dictionary<string, string> logos = default(Dictionary<string, string>), Dictionary<string, string> touchPointColors = default(Dictionary<string, string>), Dictionary<string, Dictionary<string, string>> resourcesGroupedByCategories = default(Dictionary<string, Dictionary<string, string>>), ResponseHeader responseHeader = default(ResponseHeader))
        {
            this.Logos = logos;
            this.TouchPointColors = touchPointColors;
            this.ResourcesGroupedByCategories = resourcesGroupedByCategories;
            this.ResponseHeader = responseHeader;
        }

        
        /// <summary>
        /// Gets or Sets Logos
        /// </summary>
        [DataMember(Name="Logos", EmitDefaultValue=false)]
        public Dictionary<string, string> Logos { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointColors
        /// </summary>
        [DataMember(Name="TouchPointColors", EmitDefaultValue=false)]
        public Dictionary<string, string> TouchPointColors { get; set; }

        /// <summary>
        /// Gets or Sets ResourcesGroupedByCategories
        /// </summary>
        [DataMember(Name="ResourcesGroupedByCategories", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, string>> ResourcesGroupedByCategories { get; set; }

        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name="ResponseHeader", EmitDefaultValue=false)]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetResourcesResponse {\n");
            sb.Append("  Logos: ").Append(Logos).Append("\n");
            sb.Append("  TouchPointColors: ").Append(TouchPointColors).Append("\n");
            sb.Append("  ResourcesGroupedByCategories: ").Append(ResourcesGroupedByCategories).Append("\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetResourcesResponse);
        }

        /// <summary>
        /// Returns true if GetResourcesResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetResourcesResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetResourcesResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Logos == input.Logos ||
                    this.Logos != null &&
                    this.Logos.SequenceEqual(input.Logos)
                ) && 
                (
                    this.TouchPointColors == input.TouchPointColors ||
                    this.TouchPointColors != null &&
                    this.TouchPointColors.SequenceEqual(input.TouchPointColors)
                ) && 
                (
                    this.ResourcesGroupedByCategories == input.ResourcesGroupedByCategories ||
                    this.ResourcesGroupedByCategories != null &&
                    this.ResourcesGroupedByCategories.SequenceEqual(input.ResourcesGroupedByCategories)
                ) && 
                (
                    this.ResponseHeader == input.ResponseHeader ||
                    (this.ResponseHeader != null &&
                    this.ResponseHeader.Equals(input.ResponseHeader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Logos != null)
                    hashCode = hashCode * 59 + this.Logos.GetHashCode();
                if (this.TouchPointColors != null)
                    hashCode = hashCode * 59 + this.TouchPointColors.GetHashCode();
                if (this.ResourcesGroupedByCategories != null)
                    hashCode = hashCode * 59 + this.ResourcesGroupedByCategories.GetHashCode();
                if (this.ResponseHeader != null)
                    hashCode = hashCode * 59 + this.ResponseHeader.GetHashCode();
                return hashCode;
            }
        }
    }

}
