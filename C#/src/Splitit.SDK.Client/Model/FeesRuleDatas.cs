/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FeesRuleDatas
    /// </summary>
    [DataContract]
    public partial class FeesRuleDatas :  IEquatable<FeesRuleDatas>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesRuleDatas" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeesRuleDatas() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeesRuleDatas" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="accountingCurrencyId">accountingCurrencyId (required).</param>
        /// <param name="accountingCurrency">accountingCurrency.</param>
        /// <param name="businessUnitId">businessUnitId (required).</param>
        /// <param name="businessUnit">businessUnit.</param>
        /// <param name="posSetupPercentage">posSetupPercentage (required).</param>
        /// <param name="refundFee">refundFee (required).</param>
        /// <param name="cancellationFee">cancellationFee (required).</param>
        /// <param name="chbFee">chbFee (required).</param>
        /// <param name="monthlySubscriptionAmount">monthlySubscriptionAmount (required).</param>
        /// <param name="fraudCheck">fraudCheck (required).</param>
        /// <param name="fixedNonFundedSecure">fixedNonFundedSecure.</param>
        /// <param name="variableNonFundedSecure">variableNonFundedSecure.</param>
        /// <param name="fixedNonFundedNonSecure">fixedNonFundedNonSecure.</param>
        /// <param name="variableNonFundedNonSecure">variableNonFundedNonSecure.</param>
        /// <param name="fixedFundedSecure">fixedFundedSecure.</param>
        /// <param name="fixedFundedNonSecure">fixedFundedNonSecure.</param>
        /// <param name="variableFundedSecure">variableFundedSecure.</param>
        /// <param name="variableFundedNonSecure">variableFundedNonSecure.</param>
        /// <param name="variableFundedNonSecureId">variableFundedNonSecureId.</param>
        /// <param name="variableFundedSecureId">variableFundedSecureId.</param>
        /// <param name="variableNonFundedNonSecureId">variableNonFundedNonSecureId.</param>
        /// <param name="variableNonFundedSecureId">variableNonFundedSecureId.</param>
        /// <param name="fixedFundedNonSecureId">fixedFundedNonSecureId.</param>
        /// <param name="fixedFundedSecureId">fixedFundedSecureId.</param>
        /// <param name="fixedNonFundedNonSecureId">fixedNonFundedNonSecureId.</param>
        /// <param name="fixedNonFundedSecureId">fixedNonFundedSecureId.</param>
        /// <param name="installmentPlanTerminalDatas">installmentPlanTerminalDatas.</param>
        public FeesRuleDatas(long? id = default(long?), long? accountingCurrencyId = default(long?), Currencies accountingCurrency = default(Currencies), long? businessUnitId = default(long?), BusinessUnits businessUnit = default(BusinessUnits), decimal? posSetupPercentage = default(decimal?), decimal? refundFee = default(decimal?), decimal? cancellationFee = default(decimal?), decimal? chbFee = default(decimal?), decimal? monthlySubscriptionAmount = default(decimal?), decimal? fraudCheck = default(decimal?), FeeRateCollections fixedNonFundedSecure = default(FeeRateCollections), FeeRateCollections variableNonFundedSecure = default(FeeRateCollections), FeeRateCollections fixedNonFundedNonSecure = default(FeeRateCollections), FeeRateCollections variableNonFundedNonSecure = default(FeeRateCollections), FeeRateCollections fixedFundedSecure = default(FeeRateCollections), FeeRateCollections fixedFundedNonSecure = default(FeeRateCollections), FeeRateCollections variableFundedSecure = default(FeeRateCollections), FeeRateCollections variableFundedNonSecure = default(FeeRateCollections), long? variableFundedNonSecureId = default(long?), long? variableFundedSecureId = default(long?), long? variableNonFundedNonSecureId = default(long?), long? variableNonFundedSecureId = default(long?), long? fixedFundedNonSecureId = default(long?), long? fixedFundedSecureId = default(long?), long? fixedNonFundedNonSecureId = default(long?), long? fixedNonFundedSecureId = default(long?), List<InstallmentPlanTerminalDatas> installmentPlanTerminalDatas = default(List<InstallmentPlanTerminalDatas>))
        {
            this.Id = id;
            this.AccountingCurrencyId = accountingCurrencyId;
            this.BusinessUnitId = businessUnitId;
            this.PosSetupPercentage = posSetupPercentage;
            this.RefundFee = refundFee;
            this.CancellationFee = cancellationFee;
            this.ChbFee = chbFee;
            this.MonthlySubscriptionAmount = monthlySubscriptionAmount;
            this.FraudCheck = fraudCheck;
            this.AccountingCurrency = accountingCurrency;
            this.BusinessUnit = businessUnit;
            this.FixedNonFundedSecure = fixedNonFundedSecure;
            this.VariableNonFundedSecure = variableNonFundedSecure;
            this.FixedNonFundedNonSecure = fixedNonFundedNonSecure;
            this.VariableNonFundedNonSecure = variableNonFundedNonSecure;
            this.FixedFundedSecure = fixedFundedSecure;
            this.FixedFundedNonSecure = fixedFundedNonSecure;
            this.VariableFundedSecure = variableFundedSecure;
            this.VariableFundedNonSecure = variableFundedNonSecure;
            this.VariableFundedNonSecureId = variableFundedNonSecureId;
            this.VariableFundedSecureId = variableFundedSecureId;
            this.VariableNonFundedNonSecureId = variableNonFundedNonSecureId;
            this.VariableNonFundedSecureId = variableNonFundedSecureId;
            this.FixedFundedNonSecureId = fixedFundedNonSecureId;
            this.FixedFundedSecureId = fixedFundedSecureId;
            this.FixedNonFundedNonSecureId = fixedNonFundedNonSecureId;
            this.FixedNonFundedSecureId = fixedNonFundedSecureId;
            this.InstallmentPlanTerminalDatas = installmentPlanTerminalDatas;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountingCurrencyId
        /// </summary>
        [DataMember(Name="AccountingCurrencyId", EmitDefaultValue=false)]
        public long? AccountingCurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets AccountingCurrency
        /// </summary>
        [DataMember(Name="AccountingCurrency", EmitDefaultValue=false)]
        public Currencies AccountingCurrency { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="BusinessUnitId", EmitDefaultValue=false)]
        public long? BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="BusinessUnit", EmitDefaultValue=false)]
        public BusinessUnits BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets PosSetupPercentage
        /// </summary>
        [DataMember(Name="PosSetupPercentage", EmitDefaultValue=false)]
        public decimal? PosSetupPercentage { get; set; }

        /// <summary>
        /// Gets or Sets RefundFee
        /// </summary>
        [DataMember(Name="RefundFee", EmitDefaultValue=false)]
        public decimal? RefundFee { get; set; }

        /// <summary>
        /// Gets or Sets CancellationFee
        /// </summary>
        [DataMember(Name="CancellationFee", EmitDefaultValue=false)]
        public decimal? CancellationFee { get; set; }

        /// <summary>
        /// Gets or Sets ChbFee
        /// </summary>
        [DataMember(Name="ChbFee", EmitDefaultValue=false)]
        public decimal? ChbFee { get; set; }

        /// <summary>
        /// Gets or Sets MonthlySubscriptionAmount
        /// </summary>
        [DataMember(Name="MonthlySubscriptionAmount", EmitDefaultValue=false)]
        public decimal? MonthlySubscriptionAmount { get; set; }

        /// <summary>
        /// Gets or Sets FraudCheck
        /// </summary>
        [DataMember(Name="FraudCheck", EmitDefaultValue=false)]
        public decimal? FraudCheck { get; set; }

        /// <summary>
        /// Gets or Sets FixedNonFundedSecure
        /// </summary>
        [DataMember(Name="FixedNonFundedSecure", EmitDefaultValue=false)]
        public FeeRateCollections FixedNonFundedSecure { get; set; }

        /// <summary>
        /// Gets or Sets VariableNonFundedSecure
        /// </summary>
        [DataMember(Name="VariableNonFundedSecure", EmitDefaultValue=false)]
        public FeeRateCollections VariableNonFundedSecure { get; set; }

        /// <summary>
        /// Gets or Sets FixedNonFundedNonSecure
        /// </summary>
        [DataMember(Name="FixedNonFundedNonSecure", EmitDefaultValue=false)]
        public FeeRateCollections FixedNonFundedNonSecure { get; set; }

        /// <summary>
        /// Gets or Sets VariableNonFundedNonSecure
        /// </summary>
        [DataMember(Name="VariableNonFundedNonSecure", EmitDefaultValue=false)]
        public FeeRateCollections VariableNonFundedNonSecure { get; set; }

        /// <summary>
        /// Gets or Sets FixedFundedSecure
        /// </summary>
        [DataMember(Name="FixedFundedSecure", EmitDefaultValue=false)]
        public FeeRateCollections FixedFundedSecure { get; set; }

        /// <summary>
        /// Gets or Sets FixedFundedNonSecure
        /// </summary>
        [DataMember(Name="FixedFundedNonSecure", EmitDefaultValue=false)]
        public FeeRateCollections FixedFundedNonSecure { get; set; }

        /// <summary>
        /// Gets or Sets VariableFundedSecure
        /// </summary>
        [DataMember(Name="VariableFundedSecure", EmitDefaultValue=false)]
        public FeeRateCollections VariableFundedSecure { get; set; }

        /// <summary>
        /// Gets or Sets VariableFundedNonSecure
        /// </summary>
        [DataMember(Name="VariableFundedNonSecure", EmitDefaultValue=false)]
        public FeeRateCollections VariableFundedNonSecure { get; set; }

        /// <summary>
        /// Gets or Sets VariableFundedNonSecureId
        /// </summary>
        [DataMember(Name="VariableFundedNonSecureId", EmitDefaultValue=false)]
        public long? VariableFundedNonSecureId { get; set; }

        /// <summary>
        /// Gets or Sets VariableFundedSecureId
        /// </summary>
        [DataMember(Name="VariableFundedSecureId", EmitDefaultValue=false)]
        public long? VariableFundedSecureId { get; set; }

        /// <summary>
        /// Gets or Sets VariableNonFundedNonSecureId
        /// </summary>
        [DataMember(Name="VariableNonFundedNonSecureId", EmitDefaultValue=false)]
        public long? VariableNonFundedNonSecureId { get; set; }

        /// <summary>
        /// Gets or Sets VariableNonFundedSecureId
        /// </summary>
        [DataMember(Name="VariableNonFundedSecureId", EmitDefaultValue=false)]
        public long? VariableNonFundedSecureId { get; set; }

        /// <summary>
        /// Gets or Sets FixedFundedNonSecureId
        /// </summary>
        [DataMember(Name="FixedFundedNonSecureId", EmitDefaultValue=false)]
        public long? FixedFundedNonSecureId { get; set; }

        /// <summary>
        /// Gets or Sets FixedFundedSecureId
        /// </summary>
        [DataMember(Name="FixedFundedSecureId", EmitDefaultValue=false)]
        public long? FixedFundedSecureId { get; set; }

        /// <summary>
        /// Gets or Sets FixedNonFundedNonSecureId
        /// </summary>
        [DataMember(Name="FixedNonFundedNonSecureId", EmitDefaultValue=false)]
        public long? FixedNonFundedNonSecureId { get; set; }

        /// <summary>
        /// Gets or Sets FixedNonFundedSecureId
        /// </summary>
        [DataMember(Name="FixedNonFundedSecureId", EmitDefaultValue=false)]
        public long? FixedNonFundedSecureId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanTerminalDatas
        /// </summary>
        [DataMember(Name="InstallmentPlanTerminalDatas", EmitDefaultValue=false)]
        public List<InstallmentPlanTerminalDatas> InstallmentPlanTerminalDatas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeesRuleDatas {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountingCurrencyId: ").Append(AccountingCurrencyId).Append("\n");
            sb.Append("  AccountingCurrency: ").Append(AccountingCurrency).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  PosSetupPercentage: ").Append(PosSetupPercentage).Append("\n");
            sb.Append("  RefundFee: ").Append(RefundFee).Append("\n");
            sb.Append("  CancellationFee: ").Append(CancellationFee).Append("\n");
            sb.Append("  ChbFee: ").Append(ChbFee).Append("\n");
            sb.Append("  MonthlySubscriptionAmount: ").Append(MonthlySubscriptionAmount).Append("\n");
            sb.Append("  FraudCheck: ").Append(FraudCheck).Append("\n");
            sb.Append("  FixedNonFundedSecure: ").Append(FixedNonFundedSecure).Append("\n");
            sb.Append("  VariableNonFundedSecure: ").Append(VariableNonFundedSecure).Append("\n");
            sb.Append("  FixedNonFundedNonSecure: ").Append(FixedNonFundedNonSecure).Append("\n");
            sb.Append("  VariableNonFundedNonSecure: ").Append(VariableNonFundedNonSecure).Append("\n");
            sb.Append("  FixedFundedSecure: ").Append(FixedFundedSecure).Append("\n");
            sb.Append("  FixedFundedNonSecure: ").Append(FixedFundedNonSecure).Append("\n");
            sb.Append("  VariableFundedSecure: ").Append(VariableFundedSecure).Append("\n");
            sb.Append("  VariableFundedNonSecure: ").Append(VariableFundedNonSecure).Append("\n");
            sb.Append("  VariableFundedNonSecureId: ").Append(VariableFundedNonSecureId).Append("\n");
            sb.Append("  VariableFundedSecureId: ").Append(VariableFundedSecureId).Append("\n");
            sb.Append("  VariableNonFundedNonSecureId: ").Append(VariableNonFundedNonSecureId).Append("\n");
            sb.Append("  VariableNonFundedSecureId: ").Append(VariableNonFundedSecureId).Append("\n");
            sb.Append("  FixedFundedNonSecureId: ").Append(FixedFundedNonSecureId).Append("\n");
            sb.Append("  FixedFundedSecureId: ").Append(FixedFundedSecureId).Append("\n");
            sb.Append("  FixedNonFundedNonSecureId: ").Append(FixedNonFundedNonSecureId).Append("\n");
            sb.Append("  FixedNonFundedSecureId: ").Append(FixedNonFundedSecureId).Append("\n");
            sb.Append("  InstallmentPlanTerminalDatas: ").Append(InstallmentPlanTerminalDatas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeesRuleDatas);
        }

        /// <summary>
        /// Returns true if FeesRuleDatas instances are equal
        /// </summary>
        /// <param name="input">Instance of FeesRuleDatas to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeesRuleDatas input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountingCurrencyId == input.AccountingCurrencyId ||
                    (this.AccountingCurrencyId != null &&
                    this.AccountingCurrencyId.Equals(input.AccountingCurrencyId))
                ) && 
                (
                    this.AccountingCurrency == input.AccountingCurrency ||
                    (this.AccountingCurrency != null &&
                    this.AccountingCurrency.Equals(input.AccountingCurrency))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.PosSetupPercentage == input.PosSetupPercentage ||
                    (this.PosSetupPercentage != null &&
                    this.PosSetupPercentage.Equals(input.PosSetupPercentage))
                ) && 
                (
                    this.RefundFee == input.RefundFee ||
                    (this.RefundFee != null &&
                    this.RefundFee.Equals(input.RefundFee))
                ) && 
                (
                    this.CancellationFee == input.CancellationFee ||
                    (this.CancellationFee != null &&
                    this.CancellationFee.Equals(input.CancellationFee))
                ) && 
                (
                    this.ChbFee == input.ChbFee ||
                    (this.ChbFee != null &&
                    this.ChbFee.Equals(input.ChbFee))
                ) && 
                (
                    this.MonthlySubscriptionAmount == input.MonthlySubscriptionAmount ||
                    (this.MonthlySubscriptionAmount != null &&
                    this.MonthlySubscriptionAmount.Equals(input.MonthlySubscriptionAmount))
                ) && 
                (
                    this.FraudCheck == input.FraudCheck ||
                    (this.FraudCheck != null &&
                    this.FraudCheck.Equals(input.FraudCheck))
                ) && 
                (
                    this.FixedNonFundedSecure == input.FixedNonFundedSecure ||
                    (this.FixedNonFundedSecure != null &&
                    this.FixedNonFundedSecure.Equals(input.FixedNonFundedSecure))
                ) && 
                (
                    this.VariableNonFundedSecure == input.VariableNonFundedSecure ||
                    (this.VariableNonFundedSecure != null &&
                    this.VariableNonFundedSecure.Equals(input.VariableNonFundedSecure))
                ) && 
                (
                    this.FixedNonFundedNonSecure == input.FixedNonFundedNonSecure ||
                    (this.FixedNonFundedNonSecure != null &&
                    this.FixedNonFundedNonSecure.Equals(input.FixedNonFundedNonSecure))
                ) && 
                (
                    this.VariableNonFundedNonSecure == input.VariableNonFundedNonSecure ||
                    (this.VariableNonFundedNonSecure != null &&
                    this.VariableNonFundedNonSecure.Equals(input.VariableNonFundedNonSecure))
                ) && 
                (
                    this.FixedFundedSecure == input.FixedFundedSecure ||
                    (this.FixedFundedSecure != null &&
                    this.FixedFundedSecure.Equals(input.FixedFundedSecure))
                ) && 
                (
                    this.FixedFundedNonSecure == input.FixedFundedNonSecure ||
                    (this.FixedFundedNonSecure != null &&
                    this.FixedFundedNonSecure.Equals(input.FixedFundedNonSecure))
                ) && 
                (
                    this.VariableFundedSecure == input.VariableFundedSecure ||
                    (this.VariableFundedSecure != null &&
                    this.VariableFundedSecure.Equals(input.VariableFundedSecure))
                ) && 
                (
                    this.VariableFundedNonSecure == input.VariableFundedNonSecure ||
                    (this.VariableFundedNonSecure != null &&
                    this.VariableFundedNonSecure.Equals(input.VariableFundedNonSecure))
                ) && 
                (
                    this.VariableFundedNonSecureId == input.VariableFundedNonSecureId ||
                    (this.VariableFundedNonSecureId != null &&
                    this.VariableFundedNonSecureId.Equals(input.VariableFundedNonSecureId))
                ) && 
                (
                    this.VariableFundedSecureId == input.VariableFundedSecureId ||
                    (this.VariableFundedSecureId != null &&
                    this.VariableFundedSecureId.Equals(input.VariableFundedSecureId))
                ) && 
                (
                    this.VariableNonFundedNonSecureId == input.VariableNonFundedNonSecureId ||
                    (this.VariableNonFundedNonSecureId != null &&
                    this.VariableNonFundedNonSecureId.Equals(input.VariableNonFundedNonSecureId))
                ) && 
                (
                    this.VariableNonFundedSecureId == input.VariableNonFundedSecureId ||
                    (this.VariableNonFundedSecureId != null &&
                    this.VariableNonFundedSecureId.Equals(input.VariableNonFundedSecureId))
                ) && 
                (
                    this.FixedFundedNonSecureId == input.FixedFundedNonSecureId ||
                    (this.FixedFundedNonSecureId != null &&
                    this.FixedFundedNonSecureId.Equals(input.FixedFundedNonSecureId))
                ) && 
                (
                    this.FixedFundedSecureId == input.FixedFundedSecureId ||
                    (this.FixedFundedSecureId != null &&
                    this.FixedFundedSecureId.Equals(input.FixedFundedSecureId))
                ) && 
                (
                    this.FixedNonFundedNonSecureId == input.FixedNonFundedNonSecureId ||
                    (this.FixedNonFundedNonSecureId != null &&
                    this.FixedNonFundedNonSecureId.Equals(input.FixedNonFundedNonSecureId))
                ) && 
                (
                    this.FixedNonFundedSecureId == input.FixedNonFundedSecureId ||
                    (this.FixedNonFundedSecureId != null &&
                    this.FixedNonFundedSecureId.Equals(input.FixedNonFundedSecureId))
                ) && 
                (
                    this.InstallmentPlanTerminalDatas == input.InstallmentPlanTerminalDatas ||
                    this.InstallmentPlanTerminalDatas != null &&
                    this.InstallmentPlanTerminalDatas.SequenceEqual(input.InstallmentPlanTerminalDatas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountingCurrencyId != null)
                    hashCode = hashCode * 59 + this.AccountingCurrencyId.GetHashCode();
                if (this.AccountingCurrency != null)
                    hashCode = hashCode * 59 + this.AccountingCurrency.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.PosSetupPercentage != null)
                    hashCode = hashCode * 59 + this.PosSetupPercentage.GetHashCode();
                if (this.RefundFee != null)
                    hashCode = hashCode * 59 + this.RefundFee.GetHashCode();
                if (this.CancellationFee != null)
                    hashCode = hashCode * 59 + this.CancellationFee.GetHashCode();
                if (this.ChbFee != null)
                    hashCode = hashCode * 59 + this.ChbFee.GetHashCode();
                if (this.MonthlySubscriptionAmount != null)
                    hashCode = hashCode * 59 + this.MonthlySubscriptionAmount.GetHashCode();
                if (this.FraudCheck != null)
                    hashCode = hashCode * 59 + this.FraudCheck.GetHashCode();
                if (this.FixedNonFundedSecure != null)
                    hashCode = hashCode * 59 + this.FixedNonFundedSecure.GetHashCode();
                if (this.VariableNonFundedSecure != null)
                    hashCode = hashCode * 59 + this.VariableNonFundedSecure.GetHashCode();
                if (this.FixedNonFundedNonSecure != null)
                    hashCode = hashCode * 59 + this.FixedNonFundedNonSecure.GetHashCode();
                if (this.VariableNonFundedNonSecure != null)
                    hashCode = hashCode * 59 + this.VariableNonFundedNonSecure.GetHashCode();
                if (this.FixedFundedSecure != null)
                    hashCode = hashCode * 59 + this.FixedFundedSecure.GetHashCode();
                if (this.FixedFundedNonSecure != null)
                    hashCode = hashCode * 59 + this.FixedFundedNonSecure.GetHashCode();
                if (this.VariableFundedSecure != null)
                    hashCode = hashCode * 59 + this.VariableFundedSecure.GetHashCode();
                if (this.VariableFundedNonSecure != null)
                    hashCode = hashCode * 59 + this.VariableFundedNonSecure.GetHashCode();
                if (this.VariableFundedNonSecureId != null)
                    hashCode = hashCode * 59 + this.VariableFundedNonSecureId.GetHashCode();
                if (this.VariableFundedSecureId != null)
                    hashCode = hashCode * 59 + this.VariableFundedSecureId.GetHashCode();
                if (this.VariableNonFundedNonSecureId != null)
                    hashCode = hashCode * 59 + this.VariableNonFundedNonSecureId.GetHashCode();
                if (this.VariableNonFundedSecureId != null)
                    hashCode = hashCode * 59 + this.VariableNonFundedSecureId.GetHashCode();
                if (this.FixedFundedNonSecureId != null)
                    hashCode = hashCode * 59 + this.FixedFundedNonSecureId.GetHashCode();
                if (this.FixedFundedSecureId != null)
                    hashCode = hashCode * 59 + this.FixedFundedSecureId.GetHashCode();
                if (this.FixedNonFundedNonSecureId != null)
                    hashCode = hashCode * 59 + this.FixedNonFundedNonSecureId.GetHashCode();
                if (this.FixedNonFundedSecureId != null)
                    hashCode = hashCode * 59 + this.FixedNonFundedSecureId.GetHashCode();
                if (this.InstallmentPlanTerminalDatas != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanTerminalDatas.GetHashCode();
                return hashCode;
            }
        }
    }

}
