/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// PaymentFormTPABTestingDefinition
    /// </summary>
    [DataContract]
    public partial class PaymentFormTPABTestingDefinition :  IEquatable<PaymentFormTPABTestingDefinition>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentFormTPABTestingDefinition" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentFormTPABTestingDefinition() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentFormTPABTestingDefinition" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="isActive">isActive (required).</param>
        /// <param name="abTestName">abTestName.</param>
        /// <param name="pFVersionAId">pFVersionAId.</param>
        /// <param name="pFVersionBId">pFVersionBId.</param>
        /// <param name="abTestDescription">abTestDescription.</param>
        /// <param name="pFVersionAPercentage">pFVersionAPercentage (required).</param>
        /// <param name="pFVersionBPercentage">pFVersionBPercentage (required).</param>
        /// <param name="pFVersionA">pFVersionA.</param>
        /// <param name="pFVersionB">pFVersionB.</param>
        public PaymentFormTPABTestingDefinition(long? id = default(long?), bool? isActive = default(bool?), string abTestName = default(string), long? pFVersionAId = default(long?), long? pFVersionBId = default(long?), string abTestDescription = default(string), int? pFVersionAPercentage = default(int?), int? pFVersionBPercentage = default(int?), VersionedTouchPoints pFVersionA = default(VersionedTouchPoints), VersionedTouchPoints pFVersionB = default(VersionedTouchPoints))
        {
            this.Id = id;
            this.IsActive = isActive;
            this.PFVersionAPercentage = pFVersionAPercentage;
            this.PFVersionBPercentage = pFVersionBPercentage;
            this.AbTestName = abTestName;
            this.PFVersionAId = pFVersionAId;
            this.PFVersionBId = pFVersionBId;
            this.AbTestDescription = abTestDescription;
            this.PFVersionA = pFVersionA;
            this.PFVersionB = pFVersionB;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="IsActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }

        /// <summary>
        /// Gets or Sets AbTestName
        /// </summary>
        [DataMember(Name="AbTestName", EmitDefaultValue=false)]
        public string AbTestName { get; set; }

        /// <summary>
        /// Gets or Sets PFVersionAId
        /// </summary>
        [DataMember(Name="PFVersionAId", EmitDefaultValue=false)]
        public long? PFVersionAId { get; set; }

        /// <summary>
        /// Gets or Sets PFVersionBId
        /// </summary>
        [DataMember(Name="PFVersionBId", EmitDefaultValue=false)]
        public long? PFVersionBId { get; set; }

        /// <summary>
        /// Gets or Sets AbTestDescription
        /// </summary>
        [DataMember(Name="AbTestDescription", EmitDefaultValue=false)]
        public string AbTestDescription { get; set; }

        /// <summary>
        /// Gets or Sets PFVersionAPercentage
        /// </summary>
        [DataMember(Name="PFVersionAPercentage", EmitDefaultValue=false)]
        public int? PFVersionAPercentage { get; set; }

        /// <summary>
        /// Gets or Sets PFVersionBPercentage
        /// </summary>
        [DataMember(Name="PFVersionBPercentage", EmitDefaultValue=false)]
        public int? PFVersionBPercentage { get; set; }

        /// <summary>
        /// Gets or Sets PFVersionA
        /// </summary>
        [DataMember(Name="PFVersionA", EmitDefaultValue=false)]
        public VersionedTouchPoints PFVersionA { get; set; }

        /// <summary>
        /// Gets or Sets PFVersionB
        /// </summary>
        [DataMember(Name="PFVersionB", EmitDefaultValue=false)]
        public VersionedTouchPoints PFVersionB { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentFormTPABTestingDefinition {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  AbTestName: ").Append(AbTestName).Append("\n");
            sb.Append("  PFVersionAId: ").Append(PFVersionAId).Append("\n");
            sb.Append("  PFVersionBId: ").Append(PFVersionBId).Append("\n");
            sb.Append("  AbTestDescription: ").Append(AbTestDescription).Append("\n");
            sb.Append("  PFVersionAPercentage: ").Append(PFVersionAPercentage).Append("\n");
            sb.Append("  PFVersionBPercentage: ").Append(PFVersionBPercentage).Append("\n");
            sb.Append("  PFVersionA: ").Append(PFVersionA).Append("\n");
            sb.Append("  PFVersionB: ").Append(PFVersionB).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentFormTPABTestingDefinition);
        }

        /// <summary>
        /// Returns true if PaymentFormTPABTestingDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentFormTPABTestingDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentFormTPABTestingDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.AbTestName == input.AbTestName ||
                    (this.AbTestName != null &&
                    this.AbTestName.Equals(input.AbTestName))
                ) && 
                (
                    this.PFVersionAId == input.PFVersionAId ||
                    (this.PFVersionAId != null &&
                    this.PFVersionAId.Equals(input.PFVersionAId))
                ) && 
                (
                    this.PFVersionBId == input.PFVersionBId ||
                    (this.PFVersionBId != null &&
                    this.PFVersionBId.Equals(input.PFVersionBId))
                ) && 
                (
                    this.AbTestDescription == input.AbTestDescription ||
                    (this.AbTestDescription != null &&
                    this.AbTestDescription.Equals(input.AbTestDescription))
                ) && 
                (
                    this.PFVersionAPercentage == input.PFVersionAPercentage ||
                    (this.PFVersionAPercentage != null &&
                    this.PFVersionAPercentage.Equals(input.PFVersionAPercentage))
                ) && 
                (
                    this.PFVersionBPercentage == input.PFVersionBPercentage ||
                    (this.PFVersionBPercentage != null &&
                    this.PFVersionBPercentage.Equals(input.PFVersionBPercentage))
                ) && 
                (
                    this.PFVersionA == input.PFVersionA ||
                    (this.PFVersionA != null &&
                    this.PFVersionA.Equals(input.PFVersionA))
                ) && 
                (
                    this.PFVersionB == input.PFVersionB ||
                    (this.PFVersionB != null &&
                    this.PFVersionB.Equals(input.PFVersionB))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.AbTestName != null)
                    hashCode = hashCode * 59 + this.AbTestName.GetHashCode();
                if (this.PFVersionAId != null)
                    hashCode = hashCode * 59 + this.PFVersionAId.GetHashCode();
                if (this.PFVersionBId != null)
                    hashCode = hashCode * 59 + this.PFVersionBId.GetHashCode();
                if (this.AbTestDescription != null)
                    hashCode = hashCode * 59 + this.AbTestDescription.GetHashCode();
                if (this.PFVersionAPercentage != null)
                    hashCode = hashCode * 59 + this.PFVersionAPercentage.GetHashCode();
                if (this.PFVersionBPercentage != null)
                    hashCode = hashCode * 59 + this.PFVersionBPercentage.GetHashCode();
                if (this.PFVersionA != null)
                    hashCode = hashCode * 59 + this.PFVersionA.GetHashCode();
                if (this.PFVersionB != null)
                    hashCode = hashCode * 59 + this.PFVersionB.GetHashCode();
                return hashCode;
            }
        }
    }

}
