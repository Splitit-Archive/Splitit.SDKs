/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// PaymentGatewayTransactionLogs
    /// </summary>
    [DataContract]
    public partial class PaymentGatewayTransactionLogs :  IEquatable<PaymentGatewayTransactionLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGatewayTransactionLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentGatewayTransactionLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentGatewayTransactionLogs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="avsMessageMessageCode">avsMessageMessageCode.</param>
        /// <param name="avsMessageMessageText">avsMessageMessageText.</param>
        /// <param name="cvvMessageMessageCode">cvvMessageMessageCode.</param>
        /// <param name="cvvMessageMessageText">cvvMessageMessageText.</param>
        /// <param name="expiryDateMessageMessageCode">expiryDateMessageMessageCode.</param>
        /// <param name="expiryDateMessageMessageText">expiryDateMessageMessageText.</param>
        /// <param name="resultMessageMessageCode">resultMessageMessageCode.</param>
        /// <param name="resultMessageMessageText">resultMessageMessageText.</param>
        /// <param name="result">result (required).</param>
        /// <param name="transactionId">transactionId.</param>
        /// <param name="completeResponseXml">completeResponseXml.</param>
        /// <param name="additionalData">additionalData.</param>
        /// <param name="requestedCurrencyCode">requestedCurrencyCode.</param>
        /// <param name="terminalGatewayDataId">terminalGatewayDataId (required).</param>
        /// <param name="referencePaymentGatewayTransactionLogId">referencePaymentGatewayTransactionLogId.</param>
        /// <param name="processedAmountAmount">processedAmountAmount (required).</param>
        /// <param name="requestedAmountAmount">requestedAmountAmount (required).</param>
        /// <param name="installmentPlanId">installmentPlanId.</param>
        /// <param name="isChargeback">isChargeback (required).</param>
        /// <param name="isAsync">isAsync.</param>
        /// <param name="transferId">transferId.</param>
        /// <param name="referencePaymentGatewayTransactionLog">referencePaymentGatewayTransactionLog.</param>
        /// <param name="terminalGatewayData">terminalGatewayData.</param>
        /// <param name="fraudDetectionLogs">fraudDetectionLogs.</param>
        /// <param name="installmentPaymentGatewayTransactionLogs">installmentPaymentGatewayTransactionLogs.</param>
        /// <param name="inverseReferencePaymentGatewayTransactionLog">inverseReferencePaymentGatewayTransactionLog.</param>
        /// <param name="paymentGatewayTransactionAsyncLogs">paymentGatewayTransactionAsyncLogs.</param>
        /// <param name="reAuthorizationPaymentGatewayTransactionLogs">reAuthorizationPaymentGatewayTransactionLogs.</param>
        /// <param name="publicId">publicId.</param>
        /// <param name="traceId">traceId.</param>
        /// <param name="type">type (required).</param>
        /// <param name="avsMessage">avsMessage.</param>
        /// <param name="cvvMessage">cvvMessage.</param>
        /// <param name="expiryDateMessage">expiryDateMessage.</param>
        /// <param name="resultMessage">resultMessage.</param>
        /// <param name="processedAmount">processedAmount.</param>
        /// <param name="requestedAmount">requestedAmount.</param>
        public PaymentGatewayTransactionLogs(long? id = default(long?), string avsMessageMessageCode = default(string), string avsMessageMessageText = default(string), string cvvMessageMessageCode = default(string), string cvvMessageMessageText = default(string), string expiryDateMessageMessageCode = default(string), string expiryDateMessageMessageText = default(string), string resultMessageMessageCode = default(string), string resultMessageMessageText = default(string), bool? result = default(bool?), string transactionId = default(string), string completeResponseXml = default(string), string additionalData = default(string), string requestedCurrencyCode = default(string), long? terminalGatewayDataId = default(long?), long? referencePaymentGatewayTransactionLogId = default(long?), decimal? processedAmountAmount = default(decimal?), decimal? requestedAmountAmount = default(decimal?), long? installmentPlanId = default(long?), bool? isChargeback = default(bool?), bool? isAsync = default(bool?), string transferId = default(string), PaymentGatewayTransactionLogs referencePaymentGatewayTransactionLog = default(PaymentGatewayTransactionLogs), TerminalGatewayDatas terminalGatewayData = default(TerminalGatewayDatas), List<FraudDetectionLogs> fraudDetectionLogs = default(List<FraudDetectionLogs>), List<InstallmentPaymentGatewayTransactionLogs> installmentPaymentGatewayTransactionLogs = default(List<InstallmentPaymentGatewayTransactionLogs>), List<PaymentGatewayTransactionLogs> inverseReferencePaymentGatewayTransactionLog = default(List<PaymentGatewayTransactionLogs>), List<PaymentGatewayTransactionAsyncLogs> paymentGatewayTransactionAsyncLogs = default(List<PaymentGatewayTransactionAsyncLogs>), List<ReAuthorizationPaymentGatewayTransactionLogs> reAuthorizationPaymentGatewayTransactionLogs = default(List<ReAuthorizationPaymentGatewayTransactionLogs>), string publicId = default(string), string traceId = default(string), OperationType type = default(OperationType), PaymentGatewayMessage avsMessage = default(PaymentGatewayMessage), PaymentGatewayMessage cvvMessage = default(PaymentGatewayMessage), PaymentGatewayMessage expiryDateMessage = default(PaymentGatewayMessage), PaymentGatewayMessage resultMessage = default(PaymentGatewayMessage), Money2 processedAmount = default(Money2), Money2 requestedAmount = default(Money2))
        {
            this.Id = id;
            this.Result = result;
            this.TerminalGatewayDataId = terminalGatewayDataId;
            this.ProcessedAmountAmount = processedAmountAmount;
            this.RequestedAmountAmount = requestedAmountAmount;
            this.IsChargeback = isChargeback;
            this.Type = type;
            this.AvsMessageMessageCode = avsMessageMessageCode;
            this.AvsMessageMessageText = avsMessageMessageText;
            this.CvvMessageMessageCode = cvvMessageMessageCode;
            this.CvvMessageMessageText = cvvMessageMessageText;
            this.ExpiryDateMessageMessageCode = expiryDateMessageMessageCode;
            this.ExpiryDateMessageMessageText = expiryDateMessageMessageText;
            this.ResultMessageMessageCode = resultMessageMessageCode;
            this.ResultMessageMessageText = resultMessageMessageText;
            this.TransactionId = transactionId;
            this.CompleteResponseXml = completeResponseXml;
            this.AdditionalData = additionalData;
            this.RequestedCurrencyCode = requestedCurrencyCode;
            this.ReferencePaymentGatewayTransactionLogId = referencePaymentGatewayTransactionLogId;
            this.InstallmentPlanId = installmentPlanId;
            this.IsAsync = isAsync;
            this.TransferId = transferId;
            this.ReferencePaymentGatewayTransactionLog = referencePaymentGatewayTransactionLog;
            this.TerminalGatewayData = terminalGatewayData;
            this.FraudDetectionLogs = fraudDetectionLogs;
            this.InstallmentPaymentGatewayTransactionLogs = installmentPaymentGatewayTransactionLogs;
            this.InverseReferencePaymentGatewayTransactionLog = inverseReferencePaymentGatewayTransactionLog;
            this.PaymentGatewayTransactionAsyncLogs = paymentGatewayTransactionAsyncLogs;
            this.ReAuthorizationPaymentGatewayTransactionLogs = reAuthorizationPaymentGatewayTransactionLogs;
            this.PublicId = publicId;
            this.TraceId = traceId;
            this.AvsMessage = avsMessage;
            this.CvvMessage = cvvMessage;
            this.ExpiryDateMessage = expiryDateMessage;
            this.ResultMessage = resultMessage;
            this.ProcessedAmount = processedAmount;
            this.RequestedAmount = requestedAmount;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets AvsMessageMessageCode
        /// </summary>
        [DataMember(Name="AvsMessageMessageCode", EmitDefaultValue=false)]
        public string AvsMessageMessageCode { get; set; }

        /// <summary>
        /// Gets or Sets AvsMessageMessageText
        /// </summary>
        [DataMember(Name="AvsMessageMessageText", EmitDefaultValue=false)]
        public string AvsMessageMessageText { get; set; }

        /// <summary>
        /// Gets or Sets CvvMessageMessageCode
        /// </summary>
        [DataMember(Name="CvvMessageMessageCode", EmitDefaultValue=false)]
        public string CvvMessageMessageCode { get; set; }

        /// <summary>
        /// Gets or Sets CvvMessageMessageText
        /// </summary>
        [DataMember(Name="CvvMessageMessageText", EmitDefaultValue=false)]
        public string CvvMessageMessageText { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDateMessageMessageCode
        /// </summary>
        [DataMember(Name="ExpiryDateMessageMessageCode", EmitDefaultValue=false)]
        public string ExpiryDateMessageMessageCode { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDateMessageMessageText
        /// </summary>
        [DataMember(Name="ExpiryDateMessageMessageText", EmitDefaultValue=false)]
        public string ExpiryDateMessageMessageText { get; set; }

        /// <summary>
        /// Gets or Sets ResultMessageMessageCode
        /// </summary>
        [DataMember(Name="ResultMessageMessageCode", EmitDefaultValue=false)]
        public string ResultMessageMessageCode { get; set; }

        /// <summary>
        /// Gets or Sets ResultMessageMessageText
        /// </summary>
        [DataMember(Name="ResultMessageMessageText", EmitDefaultValue=false)]
        public string ResultMessageMessageText { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public bool? Result { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [DataMember(Name="TransactionId", EmitDefaultValue=false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets CompleteResponseXml
        /// </summary>
        [DataMember(Name="CompleteResponseXml", EmitDefaultValue=false)]
        public string CompleteResponseXml { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalData
        /// </summary>
        [DataMember(Name="AdditionalData", EmitDefaultValue=false)]
        public string AdditionalData { get; set; }

        /// <summary>
        /// Gets or Sets RequestedCurrencyCode
        /// </summary>
        [DataMember(Name="RequestedCurrencyCode", EmitDefaultValue=false)]
        public string RequestedCurrencyCode { get; set; }

        /// <summary>
        /// Gets or Sets TerminalGatewayDataId
        /// </summary>
        [DataMember(Name="TerminalGatewayDataId", EmitDefaultValue=false)]
        public long? TerminalGatewayDataId { get; set; }

        /// <summary>
        /// Gets or Sets ReferencePaymentGatewayTransactionLogId
        /// </summary>
        [DataMember(Name="ReferencePaymentGatewayTransactionLogId", EmitDefaultValue=false)]
        public long? ReferencePaymentGatewayTransactionLogId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedAmountAmount
        /// </summary>
        [DataMember(Name="ProcessedAmountAmount", EmitDefaultValue=false)]
        public decimal? ProcessedAmountAmount { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmountAmount
        /// </summary>
        [DataMember(Name="RequestedAmountAmount", EmitDefaultValue=false)]
        public decimal? RequestedAmountAmount { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanId
        /// </summary>
        [DataMember(Name="InstallmentPlanId", EmitDefaultValue=false)]
        public long? InstallmentPlanId { get; set; }

        /// <summary>
        /// Gets or Sets IsChargeback
        /// </summary>
        [DataMember(Name="IsChargeback", EmitDefaultValue=false)]
        public bool? IsChargeback { get; set; }

        /// <summary>
        /// Gets or Sets IsAsync
        /// </summary>
        [DataMember(Name="IsAsync", EmitDefaultValue=false)]
        public bool? IsAsync { get; set; }

        /// <summary>
        /// Gets or Sets TransferId
        /// </summary>
        [DataMember(Name="TransferId", EmitDefaultValue=false)]
        public string TransferId { get; set; }

        /// <summary>
        /// Gets or Sets ReferencePaymentGatewayTransactionLog
        /// </summary>
        [DataMember(Name="ReferencePaymentGatewayTransactionLog", EmitDefaultValue=false)]
        public PaymentGatewayTransactionLogs ReferencePaymentGatewayTransactionLog { get; set; }

        /// <summary>
        /// Gets or Sets TerminalGatewayData
        /// </summary>
        [DataMember(Name="TerminalGatewayData", EmitDefaultValue=false)]
        public TerminalGatewayDatas TerminalGatewayData { get; set; }

        /// <summary>
        /// Gets or Sets FraudDetectionLogs
        /// </summary>
        [DataMember(Name="FraudDetectionLogs", EmitDefaultValue=false)]
        public List<FraudDetectionLogs> FraudDetectionLogs { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPaymentGatewayTransactionLogs
        /// </summary>
        [DataMember(Name="InstallmentPaymentGatewayTransactionLogs", EmitDefaultValue=false)]
        public List<InstallmentPaymentGatewayTransactionLogs> InstallmentPaymentGatewayTransactionLogs { get; set; }

        /// <summary>
        /// Gets or Sets InverseReferencePaymentGatewayTransactionLog
        /// </summary>
        [DataMember(Name="InverseReferencePaymentGatewayTransactionLog", EmitDefaultValue=false)]
        public List<PaymentGatewayTransactionLogs> InverseReferencePaymentGatewayTransactionLog { get; set; }

        /// <summary>
        /// Gets or Sets PaymentGatewayTransactionAsyncLogs
        /// </summary>
        [DataMember(Name="PaymentGatewayTransactionAsyncLogs", EmitDefaultValue=false)]
        public List<PaymentGatewayTransactionAsyncLogs> PaymentGatewayTransactionAsyncLogs { get; set; }

        /// <summary>
        /// Gets or Sets ReAuthorizationPaymentGatewayTransactionLogs
        /// </summary>
        [DataMember(Name="ReAuthorizationPaymentGatewayTransactionLogs", EmitDefaultValue=false)]
        public List<ReAuthorizationPaymentGatewayTransactionLogs> ReAuthorizationPaymentGatewayTransactionLogs { get; set; }

        /// <summary>
        /// Gets or Sets PublicId
        /// </summary>
        [DataMember(Name="PublicId", EmitDefaultValue=false)]
        public string PublicId { get; set; }

        /// <summary>
        /// Gets or Sets TraceId
        /// </summary>
        [DataMember(Name="TraceId", EmitDefaultValue=false)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public OperationType Type { get; set; }

        /// <summary>
        /// Gets or Sets AvsMessage
        /// </summary>
        [DataMember(Name="AvsMessage", EmitDefaultValue=false)]
        public PaymentGatewayMessage AvsMessage { get; set; }

        /// <summary>
        /// Gets or Sets CvvMessage
        /// </summary>
        [DataMember(Name="CvvMessage", EmitDefaultValue=false)]
        public PaymentGatewayMessage CvvMessage { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDateMessage
        /// </summary>
        [DataMember(Name="ExpiryDateMessage", EmitDefaultValue=false)]
        public PaymentGatewayMessage ExpiryDateMessage { get; set; }

        /// <summary>
        /// Gets or Sets ResultMessage
        /// </summary>
        [DataMember(Name="ResultMessage", EmitDefaultValue=false)]
        public PaymentGatewayMessage ResultMessage { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedAmount
        /// </summary>
        [DataMember(Name="ProcessedAmount", EmitDefaultValue=false)]
        public Money2 ProcessedAmount { get; set; }

        /// <summary>
        /// Gets or Sets RequestedAmount
        /// </summary>
        [DataMember(Name="RequestedAmount", EmitDefaultValue=false)]
        public Money2 RequestedAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentGatewayTransactionLogs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AvsMessageMessageCode: ").Append(AvsMessageMessageCode).Append("\n");
            sb.Append("  AvsMessageMessageText: ").Append(AvsMessageMessageText).Append("\n");
            sb.Append("  CvvMessageMessageCode: ").Append(CvvMessageMessageCode).Append("\n");
            sb.Append("  CvvMessageMessageText: ").Append(CvvMessageMessageText).Append("\n");
            sb.Append("  ExpiryDateMessageMessageCode: ").Append(ExpiryDateMessageMessageCode).Append("\n");
            sb.Append("  ExpiryDateMessageMessageText: ").Append(ExpiryDateMessageMessageText).Append("\n");
            sb.Append("  ResultMessageMessageCode: ").Append(ResultMessageMessageCode).Append("\n");
            sb.Append("  ResultMessageMessageText: ").Append(ResultMessageMessageText).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  CompleteResponseXml: ").Append(CompleteResponseXml).Append("\n");
            sb.Append("  AdditionalData: ").Append(AdditionalData).Append("\n");
            sb.Append("  RequestedCurrencyCode: ").Append(RequestedCurrencyCode).Append("\n");
            sb.Append("  TerminalGatewayDataId: ").Append(TerminalGatewayDataId).Append("\n");
            sb.Append("  ReferencePaymentGatewayTransactionLogId: ").Append(ReferencePaymentGatewayTransactionLogId).Append("\n");
            sb.Append("  ProcessedAmountAmount: ").Append(ProcessedAmountAmount).Append("\n");
            sb.Append("  RequestedAmountAmount: ").Append(RequestedAmountAmount).Append("\n");
            sb.Append("  InstallmentPlanId: ").Append(InstallmentPlanId).Append("\n");
            sb.Append("  IsChargeback: ").Append(IsChargeback).Append("\n");
            sb.Append("  IsAsync: ").Append(IsAsync).Append("\n");
            sb.Append("  TransferId: ").Append(TransferId).Append("\n");
            sb.Append("  ReferencePaymentGatewayTransactionLog: ").Append(ReferencePaymentGatewayTransactionLog).Append("\n");
            sb.Append("  TerminalGatewayData: ").Append(TerminalGatewayData).Append("\n");
            sb.Append("  FraudDetectionLogs: ").Append(FraudDetectionLogs).Append("\n");
            sb.Append("  InstallmentPaymentGatewayTransactionLogs: ").Append(InstallmentPaymentGatewayTransactionLogs).Append("\n");
            sb.Append("  InverseReferencePaymentGatewayTransactionLog: ").Append(InverseReferencePaymentGatewayTransactionLog).Append("\n");
            sb.Append("  PaymentGatewayTransactionAsyncLogs: ").Append(PaymentGatewayTransactionAsyncLogs).Append("\n");
            sb.Append("  ReAuthorizationPaymentGatewayTransactionLogs: ").Append(ReAuthorizationPaymentGatewayTransactionLogs).Append("\n");
            sb.Append("  PublicId: ").Append(PublicId).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AvsMessage: ").Append(AvsMessage).Append("\n");
            sb.Append("  CvvMessage: ").Append(CvvMessage).Append("\n");
            sb.Append("  ExpiryDateMessage: ").Append(ExpiryDateMessage).Append("\n");
            sb.Append("  ResultMessage: ").Append(ResultMessage).Append("\n");
            sb.Append("  ProcessedAmount: ").Append(ProcessedAmount).Append("\n");
            sb.Append("  RequestedAmount: ").Append(RequestedAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentGatewayTransactionLogs);
        }

        /// <summary>
        /// Returns true if PaymentGatewayTransactionLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentGatewayTransactionLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentGatewayTransactionLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AvsMessageMessageCode == input.AvsMessageMessageCode ||
                    (this.AvsMessageMessageCode != null &&
                    this.AvsMessageMessageCode.Equals(input.AvsMessageMessageCode))
                ) && 
                (
                    this.AvsMessageMessageText == input.AvsMessageMessageText ||
                    (this.AvsMessageMessageText != null &&
                    this.AvsMessageMessageText.Equals(input.AvsMessageMessageText))
                ) && 
                (
                    this.CvvMessageMessageCode == input.CvvMessageMessageCode ||
                    (this.CvvMessageMessageCode != null &&
                    this.CvvMessageMessageCode.Equals(input.CvvMessageMessageCode))
                ) && 
                (
                    this.CvvMessageMessageText == input.CvvMessageMessageText ||
                    (this.CvvMessageMessageText != null &&
                    this.CvvMessageMessageText.Equals(input.CvvMessageMessageText))
                ) && 
                (
                    this.ExpiryDateMessageMessageCode == input.ExpiryDateMessageMessageCode ||
                    (this.ExpiryDateMessageMessageCode != null &&
                    this.ExpiryDateMessageMessageCode.Equals(input.ExpiryDateMessageMessageCode))
                ) && 
                (
                    this.ExpiryDateMessageMessageText == input.ExpiryDateMessageMessageText ||
                    (this.ExpiryDateMessageMessageText != null &&
                    this.ExpiryDateMessageMessageText.Equals(input.ExpiryDateMessageMessageText))
                ) && 
                (
                    this.ResultMessageMessageCode == input.ResultMessageMessageCode ||
                    (this.ResultMessageMessageCode != null &&
                    this.ResultMessageMessageCode.Equals(input.ResultMessageMessageCode))
                ) && 
                (
                    this.ResultMessageMessageText == input.ResultMessageMessageText ||
                    (this.ResultMessageMessageText != null &&
                    this.ResultMessageMessageText.Equals(input.ResultMessageMessageText))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                ) && 
                (
                    this.CompleteResponseXml == input.CompleteResponseXml ||
                    (this.CompleteResponseXml != null &&
                    this.CompleteResponseXml.Equals(input.CompleteResponseXml))
                ) && 
                (
                    this.AdditionalData == input.AdditionalData ||
                    (this.AdditionalData != null &&
                    this.AdditionalData.Equals(input.AdditionalData))
                ) && 
                (
                    this.RequestedCurrencyCode == input.RequestedCurrencyCode ||
                    (this.RequestedCurrencyCode != null &&
                    this.RequestedCurrencyCode.Equals(input.RequestedCurrencyCode))
                ) && 
                (
                    this.TerminalGatewayDataId == input.TerminalGatewayDataId ||
                    (this.TerminalGatewayDataId != null &&
                    this.TerminalGatewayDataId.Equals(input.TerminalGatewayDataId))
                ) && 
                (
                    this.ReferencePaymentGatewayTransactionLogId == input.ReferencePaymentGatewayTransactionLogId ||
                    (this.ReferencePaymentGatewayTransactionLogId != null &&
                    this.ReferencePaymentGatewayTransactionLogId.Equals(input.ReferencePaymentGatewayTransactionLogId))
                ) && 
                (
                    this.ProcessedAmountAmount == input.ProcessedAmountAmount ||
                    (this.ProcessedAmountAmount != null &&
                    this.ProcessedAmountAmount.Equals(input.ProcessedAmountAmount))
                ) && 
                (
                    this.RequestedAmountAmount == input.RequestedAmountAmount ||
                    (this.RequestedAmountAmount != null &&
                    this.RequestedAmountAmount.Equals(input.RequestedAmountAmount))
                ) && 
                (
                    this.InstallmentPlanId == input.InstallmentPlanId ||
                    (this.InstallmentPlanId != null &&
                    this.InstallmentPlanId.Equals(input.InstallmentPlanId))
                ) && 
                (
                    this.IsChargeback == input.IsChargeback ||
                    (this.IsChargeback != null &&
                    this.IsChargeback.Equals(input.IsChargeback))
                ) && 
                (
                    this.IsAsync == input.IsAsync ||
                    (this.IsAsync != null &&
                    this.IsAsync.Equals(input.IsAsync))
                ) && 
                (
                    this.TransferId == input.TransferId ||
                    (this.TransferId != null &&
                    this.TransferId.Equals(input.TransferId))
                ) && 
                (
                    this.ReferencePaymentGatewayTransactionLog == input.ReferencePaymentGatewayTransactionLog ||
                    (this.ReferencePaymentGatewayTransactionLog != null &&
                    this.ReferencePaymentGatewayTransactionLog.Equals(input.ReferencePaymentGatewayTransactionLog))
                ) && 
                (
                    this.TerminalGatewayData == input.TerminalGatewayData ||
                    (this.TerminalGatewayData != null &&
                    this.TerminalGatewayData.Equals(input.TerminalGatewayData))
                ) && 
                (
                    this.FraudDetectionLogs == input.FraudDetectionLogs ||
                    this.FraudDetectionLogs != null &&
                    this.FraudDetectionLogs.SequenceEqual(input.FraudDetectionLogs)
                ) && 
                (
                    this.InstallmentPaymentGatewayTransactionLogs == input.InstallmentPaymentGatewayTransactionLogs ||
                    this.InstallmentPaymentGatewayTransactionLogs != null &&
                    this.InstallmentPaymentGatewayTransactionLogs.SequenceEqual(input.InstallmentPaymentGatewayTransactionLogs)
                ) && 
                (
                    this.InverseReferencePaymentGatewayTransactionLog == input.InverseReferencePaymentGatewayTransactionLog ||
                    this.InverseReferencePaymentGatewayTransactionLog != null &&
                    this.InverseReferencePaymentGatewayTransactionLog.SequenceEqual(input.InverseReferencePaymentGatewayTransactionLog)
                ) && 
                (
                    this.PaymentGatewayTransactionAsyncLogs == input.PaymentGatewayTransactionAsyncLogs ||
                    this.PaymentGatewayTransactionAsyncLogs != null &&
                    this.PaymentGatewayTransactionAsyncLogs.SequenceEqual(input.PaymentGatewayTransactionAsyncLogs)
                ) && 
                (
                    this.ReAuthorizationPaymentGatewayTransactionLogs == input.ReAuthorizationPaymentGatewayTransactionLogs ||
                    this.ReAuthorizationPaymentGatewayTransactionLogs != null &&
                    this.ReAuthorizationPaymentGatewayTransactionLogs.SequenceEqual(input.ReAuthorizationPaymentGatewayTransactionLogs)
                ) && 
                (
                    this.PublicId == input.PublicId ||
                    (this.PublicId != null &&
                    this.PublicId.Equals(input.PublicId))
                ) && 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.AvsMessage == input.AvsMessage ||
                    (this.AvsMessage != null &&
                    this.AvsMessage.Equals(input.AvsMessage))
                ) && 
                (
                    this.CvvMessage == input.CvvMessage ||
                    (this.CvvMessage != null &&
                    this.CvvMessage.Equals(input.CvvMessage))
                ) && 
                (
                    this.ExpiryDateMessage == input.ExpiryDateMessage ||
                    (this.ExpiryDateMessage != null &&
                    this.ExpiryDateMessage.Equals(input.ExpiryDateMessage))
                ) && 
                (
                    this.ResultMessage == input.ResultMessage ||
                    (this.ResultMessage != null &&
                    this.ResultMessage.Equals(input.ResultMessage))
                ) && 
                (
                    this.ProcessedAmount == input.ProcessedAmount ||
                    (this.ProcessedAmount != null &&
                    this.ProcessedAmount.Equals(input.ProcessedAmount))
                ) && 
                (
                    this.RequestedAmount == input.RequestedAmount ||
                    (this.RequestedAmount != null &&
                    this.RequestedAmount.Equals(input.RequestedAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AvsMessageMessageCode != null)
                    hashCode = hashCode * 59 + this.AvsMessageMessageCode.GetHashCode();
                if (this.AvsMessageMessageText != null)
                    hashCode = hashCode * 59 + this.AvsMessageMessageText.GetHashCode();
                if (this.CvvMessageMessageCode != null)
                    hashCode = hashCode * 59 + this.CvvMessageMessageCode.GetHashCode();
                if (this.CvvMessageMessageText != null)
                    hashCode = hashCode * 59 + this.CvvMessageMessageText.GetHashCode();
                if (this.ExpiryDateMessageMessageCode != null)
                    hashCode = hashCode * 59 + this.ExpiryDateMessageMessageCode.GetHashCode();
                if (this.ExpiryDateMessageMessageText != null)
                    hashCode = hashCode * 59 + this.ExpiryDateMessageMessageText.GetHashCode();
                if (this.ResultMessageMessageCode != null)
                    hashCode = hashCode * 59 + this.ResultMessageMessageCode.GetHashCode();
                if (this.ResultMessageMessageText != null)
                    hashCode = hashCode * 59 + this.ResultMessageMessageText.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                if (this.CompleteResponseXml != null)
                    hashCode = hashCode * 59 + this.CompleteResponseXml.GetHashCode();
                if (this.AdditionalData != null)
                    hashCode = hashCode * 59 + this.AdditionalData.GetHashCode();
                if (this.RequestedCurrencyCode != null)
                    hashCode = hashCode * 59 + this.RequestedCurrencyCode.GetHashCode();
                if (this.TerminalGatewayDataId != null)
                    hashCode = hashCode * 59 + this.TerminalGatewayDataId.GetHashCode();
                if (this.ReferencePaymentGatewayTransactionLogId != null)
                    hashCode = hashCode * 59 + this.ReferencePaymentGatewayTransactionLogId.GetHashCode();
                if (this.ProcessedAmountAmount != null)
                    hashCode = hashCode * 59 + this.ProcessedAmountAmount.GetHashCode();
                if (this.RequestedAmountAmount != null)
                    hashCode = hashCode * 59 + this.RequestedAmountAmount.GetHashCode();
                if (this.InstallmentPlanId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanId.GetHashCode();
                if (this.IsChargeback != null)
                    hashCode = hashCode * 59 + this.IsChargeback.GetHashCode();
                if (this.IsAsync != null)
                    hashCode = hashCode * 59 + this.IsAsync.GetHashCode();
                if (this.TransferId != null)
                    hashCode = hashCode * 59 + this.TransferId.GetHashCode();
                if (this.ReferencePaymentGatewayTransactionLog != null)
                    hashCode = hashCode * 59 + this.ReferencePaymentGatewayTransactionLog.GetHashCode();
                if (this.TerminalGatewayData != null)
                    hashCode = hashCode * 59 + this.TerminalGatewayData.GetHashCode();
                if (this.FraudDetectionLogs != null)
                    hashCode = hashCode * 59 + this.FraudDetectionLogs.GetHashCode();
                if (this.InstallmentPaymentGatewayTransactionLogs != null)
                    hashCode = hashCode * 59 + this.InstallmentPaymentGatewayTransactionLogs.GetHashCode();
                if (this.InverseReferencePaymentGatewayTransactionLog != null)
                    hashCode = hashCode * 59 + this.InverseReferencePaymentGatewayTransactionLog.GetHashCode();
                if (this.PaymentGatewayTransactionAsyncLogs != null)
                    hashCode = hashCode * 59 + this.PaymentGatewayTransactionAsyncLogs.GetHashCode();
                if (this.ReAuthorizationPaymentGatewayTransactionLogs != null)
                    hashCode = hashCode * 59 + this.ReAuthorizationPaymentGatewayTransactionLogs.GetHashCode();
                if (this.PublicId != null)
                    hashCode = hashCode * 59 + this.PublicId.GetHashCode();
                if (this.TraceId != null)
                    hashCode = hashCode * 59 + this.TraceId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.AvsMessage != null)
                    hashCode = hashCode * 59 + this.AvsMessage.GetHashCode();
                if (this.CvvMessage != null)
                    hashCode = hashCode * 59 + this.CvvMessage.GetHashCode();
                if (this.ExpiryDateMessage != null)
                    hashCode = hashCode * 59 + this.ExpiryDateMessage.GetHashCode();
                if (this.ResultMessage != null)
                    hashCode = hashCode * 59 + this.ResultMessage.GetHashCode();
                if (this.ProcessedAmount != null)
                    hashCode = hashCode * 59 + this.ProcessedAmount.GetHashCode();
                if (this.RequestedAmount != null)
                    hashCode = hashCode * 59 + this.RequestedAmount.GetHashCode();
                return hashCode;
            }
        }
    }

}
