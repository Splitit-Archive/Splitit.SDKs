/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// CollectDocuments
    /// </summary>
    [DataContract]
    public partial class CollectDocuments :  IEquatable<CollectDocuments>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectDocuments" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CollectDocuments() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectDocuments" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="amount">amount (required).</param>
        /// <param name="currencyId">currencyId (required).</param>
        /// <param name="businessUnitId">businessUnitId (required).</param>
        /// <param name="approvalDate">approvalDate.</param>
        /// <param name="discriminator">discriminator.</param>
        /// <param name="lenderId">lenderId.</param>
        /// <param name="excludeFromEmails">excludeFromEmails.</param>
        /// <param name="businessUnit">businessUnit.</param>
        /// <param name="currency">currency.</param>
        /// <param name="lender">lender.</param>
        /// <param name="fundingCollectDocumentDetails">fundingCollectDocumentDetails.</param>
        public CollectDocuments(long? id = default(long?), decimal? amount = default(decimal?), long? currencyId = default(long?), long? businessUnitId = default(long?), DateTime? approvalDate = default(DateTime?), string discriminator = default(string), long? lenderId = default(long?), bool? excludeFromEmails = default(bool?), BusinessUnits businessUnit = default(BusinessUnits), Currencies currency = default(Currencies), ScpProviders lender = default(ScpProviders), List<FundingCollectDocumentDetails> fundingCollectDocumentDetails = default(List<FundingCollectDocumentDetails>))
        {
            this.Id = id;
            this.Amount = amount;
            this.CurrencyId = currencyId;
            this.BusinessUnitId = businessUnitId;
            this.ApprovalDate = approvalDate;
            this.Discriminator = discriminator;
            this.LenderId = lenderId;
            this.ExcludeFromEmails = excludeFromEmails;
            this.BusinessUnit = businessUnit;
            this.Currency = currency;
            this.Lender = lender;
            this.FundingCollectDocumentDetails = fundingCollectDocumentDetails;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyId
        /// </summary>
        [DataMember(Name="CurrencyId", EmitDefaultValue=false)]
        public long? CurrencyId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="BusinessUnitId", EmitDefaultValue=false)]
        public long? BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets ApprovalDate
        /// </summary>
        [DataMember(Name="ApprovalDate", EmitDefaultValue=false)]
        public DateTime? ApprovalDate { get; set; }

        /// <summary>
        /// Gets or Sets Discriminator
        /// </summary>
        [DataMember(Name="Discriminator", EmitDefaultValue=false)]
        public string Discriminator { get; set; }

        /// <summary>
        /// Gets or Sets LenderId
        /// </summary>
        [DataMember(Name="LenderId", EmitDefaultValue=false)]
        public long? LenderId { get; set; }

        /// <summary>
        /// Gets or Sets ExcludeFromEmails
        /// </summary>
        [DataMember(Name="ExcludeFromEmails", EmitDefaultValue=false)]
        public bool? ExcludeFromEmails { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="BusinessUnit", EmitDefaultValue=false)]
        public BusinessUnits BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="Currency", EmitDefaultValue=false)]
        public Currencies Currency { get; set; }

        /// <summary>
        /// Gets or Sets Lender
        /// </summary>
        [DataMember(Name="Lender", EmitDefaultValue=false)]
        public ScpProviders Lender { get; set; }

        /// <summary>
        /// Gets or Sets FundingCollectDocumentDetails
        /// </summary>
        [DataMember(Name="FundingCollectDocumentDetails", EmitDefaultValue=false)]
        public List<FundingCollectDocumentDetails> FundingCollectDocumentDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectDocuments {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  CurrencyId: ").Append(CurrencyId).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  ApprovalDate: ").Append(ApprovalDate).Append("\n");
            sb.Append("  Discriminator: ").Append(Discriminator).Append("\n");
            sb.Append("  LenderId: ").Append(LenderId).Append("\n");
            sb.Append("  ExcludeFromEmails: ").Append(ExcludeFromEmails).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Lender: ").Append(Lender).Append("\n");
            sb.Append("  FundingCollectDocumentDetails: ").Append(FundingCollectDocumentDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectDocuments);
        }

        /// <summary>
        /// Returns true if CollectDocuments instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectDocuments to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectDocuments input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.CurrencyId == input.CurrencyId ||
                    (this.CurrencyId != null &&
                    this.CurrencyId.Equals(input.CurrencyId))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.ApprovalDate == input.ApprovalDate ||
                    (this.ApprovalDate != null &&
                    this.ApprovalDate.Equals(input.ApprovalDate))
                ) && 
                (
                    this.Discriminator == input.Discriminator ||
                    (this.Discriminator != null &&
                    this.Discriminator.Equals(input.Discriminator))
                ) && 
                (
                    this.LenderId == input.LenderId ||
                    (this.LenderId != null &&
                    this.LenderId.Equals(input.LenderId))
                ) && 
                (
                    this.ExcludeFromEmails == input.ExcludeFromEmails ||
                    (this.ExcludeFromEmails != null &&
                    this.ExcludeFromEmails.Equals(input.ExcludeFromEmails))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Lender == input.Lender ||
                    (this.Lender != null &&
                    this.Lender.Equals(input.Lender))
                ) && 
                (
                    this.FundingCollectDocumentDetails == input.FundingCollectDocumentDetails ||
                    this.FundingCollectDocumentDetails != null &&
                    this.FundingCollectDocumentDetails.SequenceEqual(input.FundingCollectDocumentDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.CurrencyId != null)
                    hashCode = hashCode * 59 + this.CurrencyId.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.ApprovalDate != null)
                    hashCode = hashCode * 59 + this.ApprovalDate.GetHashCode();
                if (this.Discriminator != null)
                    hashCode = hashCode * 59 + this.Discriminator.GetHashCode();
                if (this.LenderId != null)
                    hashCode = hashCode * 59 + this.LenderId.GetHashCode();
                if (this.ExcludeFromEmails != null)
                    hashCode = hashCode * 59 + this.ExcludeFromEmails.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Lender != null)
                    hashCode = hashCode * 59 + this.Lender.GetHashCode();
                if (this.FundingCollectDocumentDetails != null)
                    hashCode = hashCode * 59 + this.FundingCollectDocumentDetails.GetHashCode();
                return hashCode;
            }
        }
    }

}
