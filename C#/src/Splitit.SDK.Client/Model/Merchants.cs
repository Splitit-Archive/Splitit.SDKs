/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Merchants
    /// </summary>
    [DataContract]
    public partial class Merchants :  IEquatable<Merchants>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchants" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Merchants() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Merchants" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="address">address.</param>
        /// <param name="email">email.</param>
        /// <param name="merchantAdminWebsite">merchantAdminWebsite (required).</param>
        /// <param name="webApi">webApi (required).</param>
        /// <param name="embeddedClients">embeddedClients (required).</param>
        /// <param name="crmId">crmId.</param>
        /// <param name="sFParentAccountExternalId">sFParentAccountExternalId.</param>
        /// <param name="sFLeadId">sFLeadId.</param>
        /// <param name="sFParentAccountName">sFParentAccountName.</param>
        /// <param name="merchantVertical">merchantVertical.</param>
        /// <param name="sFAccountId">sFAccountId.</param>
        /// <param name="declaredAnnualVolumeUSD">declaredAnnualVolumeUSD.</param>
        /// <param name="declaredAOVUSD">declaredAOVUSD.</param>
        /// <param name="logoImage">logoImage.</param>
        /// <param name="logoFileExtension">logoFileExtension.</param>
        /// <param name="code">code.</param>
        /// <param name="supportEmail">supportEmail.</param>
        /// <param name="supportPhone">supportPhone.</param>
        /// <param name="parameterGroupId">parameterGroupId.</param>
        /// <param name="businessUnitId">businessUnitId (required).</param>
        /// <param name="logoUrl">logoUrl.</param>
        /// <param name="merchantLegalName">merchantLegalName.</param>
        /// <param name="splititMerchantId">splititMerchantId.</param>
        /// <param name="websiteUrl">websiteUrl.</param>
        /// <param name="billingAddressAddressLine">billingAddressAddressLine.</param>
        /// <param name="billingAddressAddressLine2">billingAddressAddressLine2.</param>
        /// <param name="billingAddressCity">billingAddressCity.</param>
        /// <param name="orgGroup">orgGroup.</param>
        /// <param name="billingAddressCountryId">billingAddressCountryId.</param>
        /// <param name="billingAddressStateId">billingAddressStateId.</param>
        /// <param name="billingAddressZip">billingAddressZip.</param>
        /// <param name="billingAddressLegacyFullAddressLine">billingAddressLegacyFullAddressLine.</param>
        /// <param name="vatTaxId">vatTaxId.</param>
        /// <param name="salesAccossiateId">salesAccossiateId.</param>
        /// <param name="registeredCountryOfBusinessCountryId">registeredCountryOfBusinessCountryId.</param>
        /// <param name="registeredCountryOfBusinessStateId">registeredCountryOfBusinessStateId.</param>
        /// <param name="merchantCountryCountryId">merchantCountryCountryId.</param>
        /// <param name="merchantCountryStateId">merchantCountryStateId.</param>
        /// <param name="bankDetailsBankAccountName">bankDetailsBankAccountName.</param>
        /// <param name="bankDetailsBankRoutingNumber">bankDetailsBankRoutingNumber.</param>
        /// <param name="bankDetailsBankAccountNumber">bankDetailsBankAccountNumber.</param>
        /// <param name="reportsFolderName">reportsFolderName.</param>
        /// <param name="onBoardingMethod">onBoardingMethod (required).</param>
        /// <param name="businessUnit">businessUnit.</param>
        /// <param name="parameterGroup">parameterGroup.</param>
        /// <param name="salesAccossiate">salesAccossiate.</param>
        /// <param name="apiUsers">apiUsers.</param>
        /// <param name="agents">agents.</param>
        /// <param name="installmentPlanEventsSubscriptionDatas">installmentPlanEventsSubscriptionDatas.</param>
        /// <param name="terminals">terminals.</param>
        /// <param name="touchPointColorValues">touchPointColorValues.</param>
        /// <param name="isTest">isTest (required).</param>
        /// <param name="markedForDeletion">markedForDeletion (required).</param>
        /// <param name="registeredCountryOfBusiness">registeredCountryOfBusiness.</param>
        /// <param name="merchantCountry">merchantCountry.</param>
        /// <param name="status">status (required).</param>
        /// <param name="vertical">vertical (required).</param>
        /// <param name="bankDetails">bankDetails.</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="country">country.</param>
        /// <param name="state">state.</param>
        /// <param name="splititSigningEntity">splititSigningEntity (required).</param>
        /// <param name="splititCurrentEntity">splititCurrentEntity (required).</param>
        public Merchants(long? id = default(long?), string name = default(string), string address = default(string), string email = default(string), bool? merchantAdminWebsite = default(bool?), bool? webApi = default(bool?), bool? embeddedClients = default(bool?), string crmId = default(string), string sFParentAccountExternalId = default(string), string sFLeadId = default(string), string sFParentAccountName = default(string), string merchantVertical = default(string), string sFAccountId = default(string), decimal? declaredAnnualVolumeUSD = default(decimal?), decimal? declaredAOVUSD = default(decimal?), byte[] logoImage = default(byte[]), string logoFileExtension = default(string), string code = default(string), string supportEmail = default(string), string supportPhone = default(string), long? parameterGroupId = default(long?), long? businessUnitId = default(long?), string logoUrl = default(string), string merchantLegalName = default(string), string splititMerchantId = default(string), string websiteUrl = default(string), string billingAddressAddressLine = default(string), string billingAddressAddressLine2 = default(string), string billingAddressCity = default(string), string orgGroup = default(string), long? billingAddressCountryId = default(long?), long? billingAddressStateId = default(long?), string billingAddressZip = default(string), string billingAddressLegacyFullAddressLine = default(string), string vatTaxId = default(string), long? salesAccossiateId = default(long?), long? registeredCountryOfBusinessCountryId = default(long?), long? registeredCountryOfBusinessStateId = default(long?), long? merchantCountryCountryId = default(long?), long? merchantCountryStateId = default(long?), string bankDetailsBankAccountName = default(string), string bankDetailsBankRoutingNumber = default(string), string bankDetailsBankAccountNumber = default(string), string reportsFolderName = default(string), OnBoardingMethod onBoardingMethod = default(OnBoardingMethod), BusinessUnits businessUnit = default(BusinessUnits), ParameterGroups parameterGroup = default(ParameterGroups), SalesAssociates salesAccossiate = default(SalesAssociates), ApiUsers apiUsers = default(ApiUsers), List<Agents> agents = default(List<Agents>), List<InstallmentPlanEventsSubscriptionDatas> installmentPlanEventsSubscriptionDatas = default(List<InstallmentPlanEventsSubscriptionDatas>), List<Terminals> terminals = default(List<Terminals>), List<TouchPointColorValues> touchPointColorValues = default(List<TouchPointColorValues>), bool? isTest = default(bool?), bool? markedForDeletion = default(bool?), CountryState registeredCountryOfBusiness = default(CountryState), CountryState merchantCountry = default(CountryState), MerchantStatus status = default(MerchantStatus), Object vertical = default(Object), BankDetails bankDetails = default(BankDetails), AddressData2 billingAddress = default(AddressData2), Countries country = default(Countries), CountrySubdivisions state = default(CountrySubdivisions), SplititEntity splititSigningEntity = default(SplititEntity), SplititEntity splititCurrentEntity = default(SplititEntity))
        {
            this.Id = id;
            this.MerchantAdminWebsite = merchantAdminWebsite;
            this.WebApi = webApi;
            this.EmbeddedClients = embeddedClients;
            this.BusinessUnitId = businessUnitId;
            this.OnBoardingMethod = onBoardingMethod;
            this.IsTest = isTest;
            this.MarkedForDeletion = markedForDeletion;
            this.Status = status;
            this.Vertical = vertical;
            this.SplititSigningEntity = splititSigningEntity;
            this.SplititCurrentEntity = splititCurrentEntity;
            this.Name = name;
            this.Address = address;
            this.Email = email;
            this.CrmId = crmId;
            this.SFParentAccountExternalId = sFParentAccountExternalId;
            this.SFLeadId = sFLeadId;
            this.SFParentAccountName = sFParentAccountName;
            this.MerchantVertical = merchantVertical;
            this.SFAccountId = sFAccountId;
            this.DeclaredAnnualVolumeUSD = declaredAnnualVolumeUSD;
            this.DeclaredAOVUSD = declaredAOVUSD;
            this.LogoImage = logoImage;
            this.LogoFileExtension = logoFileExtension;
            this.Code = code;
            this.SupportEmail = supportEmail;
            this.SupportPhone = supportPhone;
            this.ParameterGroupId = parameterGroupId;
            this.LogoUrl = logoUrl;
            this.MerchantLegalName = merchantLegalName;
            this.SplititMerchantId = splititMerchantId;
            this.WebsiteUrl = websiteUrl;
            this.BillingAddressAddressLine = billingAddressAddressLine;
            this.BillingAddressAddressLine2 = billingAddressAddressLine2;
            this.BillingAddressCity = billingAddressCity;
            this.OrgGroup = orgGroup;
            this.BillingAddressCountryId = billingAddressCountryId;
            this.BillingAddressStateId = billingAddressStateId;
            this.BillingAddressZip = billingAddressZip;
            this.BillingAddressLegacyFullAddressLine = billingAddressLegacyFullAddressLine;
            this.VatTaxId = vatTaxId;
            this.SalesAccossiateId = salesAccossiateId;
            this.RegisteredCountryOfBusinessCountryId = registeredCountryOfBusinessCountryId;
            this.RegisteredCountryOfBusinessStateId = registeredCountryOfBusinessStateId;
            this.MerchantCountryCountryId = merchantCountryCountryId;
            this.MerchantCountryStateId = merchantCountryStateId;
            this.BankDetailsBankAccountName = bankDetailsBankAccountName;
            this.BankDetailsBankRoutingNumber = bankDetailsBankRoutingNumber;
            this.BankDetailsBankAccountNumber = bankDetailsBankAccountNumber;
            this.ReportsFolderName = reportsFolderName;
            this.BusinessUnit = businessUnit;
            this.ParameterGroup = parameterGroup;
            this.SalesAccossiate = salesAccossiate;
            this.ApiUsers = apiUsers;
            this.Agents = agents;
            this.InstallmentPlanEventsSubscriptionDatas = installmentPlanEventsSubscriptionDatas;
            this.Terminals = terminals;
            this.TouchPointColorValues = touchPointColorValues;
            this.RegisteredCountryOfBusiness = registeredCountryOfBusiness;
            this.MerchantCountry = merchantCountry;
            this.BankDetails = bankDetails;
            this.BillingAddress = billingAddress;
            this.Country = country;
            this.State = state;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAdminWebsite
        /// </summary>
        [DataMember(Name="MerchantAdminWebsite", EmitDefaultValue=false)]
        public bool? MerchantAdminWebsite { get; set; }

        /// <summary>
        /// Gets or Sets WebApi
        /// </summary>
        [DataMember(Name="WebApi", EmitDefaultValue=false)]
        public bool? WebApi { get; set; }

        /// <summary>
        /// Gets or Sets EmbeddedClients
        /// </summary>
        [DataMember(Name="EmbeddedClients", EmitDefaultValue=false)]
        public bool? EmbeddedClients { get; set; }

        /// <summary>
        /// Gets or Sets CrmId
        /// </summary>
        [DataMember(Name="CrmId", EmitDefaultValue=false)]
        public string CrmId { get; set; }

        /// <summary>
        /// Gets or Sets SFParentAccountExternalId
        /// </summary>
        [DataMember(Name="SFParentAccountExternalId", EmitDefaultValue=false)]
        public string SFParentAccountExternalId { get; set; }

        /// <summary>
        /// Gets or Sets SFLeadId
        /// </summary>
        [DataMember(Name="SFLeadId", EmitDefaultValue=false)]
        public string SFLeadId { get; set; }

        /// <summary>
        /// Gets or Sets SFParentAccountName
        /// </summary>
        [DataMember(Name="SFParentAccountName", EmitDefaultValue=false)]
        public string SFParentAccountName { get; set; }

        /// <summary>
        /// Gets or Sets MerchantVertical
        /// </summary>
        [DataMember(Name="MerchantVertical", EmitDefaultValue=false)]
        public string MerchantVertical { get; set; }

        /// <summary>
        /// Gets or Sets SFAccountId
        /// </summary>
        [DataMember(Name="SFAccountId", EmitDefaultValue=false)]
        public string SFAccountId { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAnnualVolumeUSD
        /// </summary>
        [DataMember(Name="DeclaredAnnualVolumeUSD", EmitDefaultValue=false)]
        public decimal? DeclaredAnnualVolumeUSD { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredAOVUSD
        /// </summary>
        [DataMember(Name="DeclaredAOVUSD", EmitDefaultValue=false)]
        public decimal? DeclaredAOVUSD { get; set; }

        /// <summary>
        /// Gets or Sets LogoImage
        /// </summary>
        [DataMember(Name="LogoImage", EmitDefaultValue=false)]
        public byte[] LogoImage { get; set; }

        /// <summary>
        /// Gets or Sets LogoFileExtension
        /// </summary>
        [DataMember(Name="LogoFileExtension", EmitDefaultValue=false)]
        public string LogoFileExtension { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets SupportEmail
        /// </summary>
        [DataMember(Name="SupportEmail", EmitDefaultValue=false)]
        public string SupportEmail { get; set; }

        /// <summary>
        /// Gets or Sets SupportPhone
        /// </summary>
        [DataMember(Name="SupportPhone", EmitDefaultValue=false)]
        public string SupportPhone { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroupId
        /// </summary>
        [DataMember(Name="ParameterGroupId", EmitDefaultValue=false)]
        public long? ParameterGroupId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnitId
        /// </summary>
        [DataMember(Name="BusinessUnitId", EmitDefaultValue=false)]
        public long? BusinessUnitId { get; set; }

        /// <summary>
        /// Gets or Sets LogoUrl
        /// </summary>
        [DataMember(Name="LogoUrl", EmitDefaultValue=false)]
        public string LogoUrl { get; set; }

        /// <summary>
        /// Gets or Sets MerchantLegalName
        /// </summary>
        [DataMember(Name="MerchantLegalName", EmitDefaultValue=false)]
        public string MerchantLegalName { get; set; }

        /// <summary>
        /// Gets or Sets SplititMerchantId
        /// </summary>
        [DataMember(Name="SplititMerchantId", EmitDefaultValue=false)]
        public string SplititMerchantId { get; set; }

        /// <summary>
        /// Gets or Sets WebsiteUrl
        /// </summary>
        [DataMember(Name="WebsiteUrl", EmitDefaultValue=false)]
        public string WebsiteUrl { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressAddressLine
        /// </summary>
        [DataMember(Name="BillingAddressAddressLine", EmitDefaultValue=false)]
        public string BillingAddressAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressAddressLine2
        /// </summary>
        [DataMember(Name="BillingAddressAddressLine2", EmitDefaultValue=false)]
        public string BillingAddressAddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressCity
        /// </summary>
        [DataMember(Name="BillingAddressCity", EmitDefaultValue=false)]
        public string BillingAddressCity { get; set; }

        /// <summary>
        /// Gets or Sets OrgGroup
        /// </summary>
        [DataMember(Name="OrgGroup", EmitDefaultValue=false)]
        public string OrgGroup { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressCountryId
        /// </summary>
        [DataMember(Name="BillingAddressCountryId", EmitDefaultValue=false)]
        public long? BillingAddressCountryId { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressStateId
        /// </summary>
        [DataMember(Name="BillingAddressStateId", EmitDefaultValue=false)]
        public long? BillingAddressStateId { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressZip
        /// </summary>
        [DataMember(Name="BillingAddressZip", EmitDefaultValue=false)]
        public string BillingAddressZip { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressLegacyFullAddressLine
        /// </summary>
        [DataMember(Name="BillingAddressLegacyFullAddressLine", EmitDefaultValue=false)]
        public string BillingAddressLegacyFullAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets VatTaxId
        /// </summary>
        [DataMember(Name="VatTaxId", EmitDefaultValue=false)]
        public string VatTaxId { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccossiateId
        /// </summary>
        [DataMember(Name="SalesAccossiateId", EmitDefaultValue=false)]
        public long? SalesAccossiateId { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredCountryOfBusinessCountryId
        /// </summary>
        [DataMember(Name="RegisteredCountryOfBusinessCountryId", EmitDefaultValue=false)]
        public long? RegisteredCountryOfBusinessCountryId { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredCountryOfBusinessStateId
        /// </summary>
        [DataMember(Name="RegisteredCountryOfBusinessStateId", EmitDefaultValue=false)]
        public long? RegisteredCountryOfBusinessStateId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCountryCountryId
        /// </summary>
        [DataMember(Name="MerchantCountryCountryId", EmitDefaultValue=false)]
        public long? MerchantCountryCountryId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCountryStateId
        /// </summary>
        [DataMember(Name="MerchantCountryStateId", EmitDefaultValue=false)]
        public long? MerchantCountryStateId { get; set; }

        /// <summary>
        /// Gets or Sets BankDetailsBankAccountName
        /// </summary>
        [DataMember(Name="BankDetailsBankAccountName", EmitDefaultValue=false)]
        public string BankDetailsBankAccountName { get; set; }

        /// <summary>
        /// Gets or Sets BankDetailsBankRoutingNumber
        /// </summary>
        [DataMember(Name="BankDetailsBankRoutingNumber", EmitDefaultValue=false)]
        public string BankDetailsBankRoutingNumber { get; set; }

        /// <summary>
        /// Gets or Sets BankDetailsBankAccountNumber
        /// </summary>
        [DataMember(Name="BankDetailsBankAccountNumber", EmitDefaultValue=false)]
        public string BankDetailsBankAccountNumber { get; set; }

        /// <summary>
        /// Gets or Sets ReportsFolderName
        /// </summary>
        [DataMember(Name="ReportsFolderName", EmitDefaultValue=false)]
        public string ReportsFolderName { get; set; }

        /// <summary>
        /// Gets or Sets OnBoardingMethod
        /// </summary>
        [DataMember(Name="OnBoardingMethod", EmitDefaultValue=false)]
        public OnBoardingMethod OnBoardingMethod { get; set; }

        /// <summary>
        /// Gets or Sets BusinessUnit
        /// </summary>
        [DataMember(Name="BusinessUnit", EmitDefaultValue=false)]
        public BusinessUnits BusinessUnit { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroup
        /// </summary>
        [DataMember(Name="ParameterGroup", EmitDefaultValue=false)]
        public ParameterGroups ParameterGroup { get; set; }

        /// <summary>
        /// Gets or Sets SalesAccossiate
        /// </summary>
        [DataMember(Name="SalesAccossiate", EmitDefaultValue=false)]
        public SalesAssociates SalesAccossiate { get; set; }

        /// <summary>
        /// Gets or Sets ApiUsers
        /// </summary>
        [DataMember(Name="ApiUsers", EmitDefaultValue=false)]
        public ApiUsers ApiUsers { get; set; }

        /// <summary>
        /// Gets or Sets Agents
        /// </summary>
        [DataMember(Name="Agents", EmitDefaultValue=false)]
        public List<Agents> Agents { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEventsSubscriptionDatas
        /// </summary>
        [DataMember(Name="InstallmentPlanEventsSubscriptionDatas", EmitDefaultValue=false)]
        public List<InstallmentPlanEventsSubscriptionDatas> InstallmentPlanEventsSubscriptionDatas { get; set; }

        /// <summary>
        /// Gets or Sets Terminals
        /// </summary>
        [DataMember(Name="Terminals", EmitDefaultValue=false)]
        public List<Terminals> Terminals { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointColorValues
        /// </summary>
        [DataMember(Name="TouchPointColorValues", EmitDefaultValue=false)]
        public List<TouchPointColorValues> TouchPointColorValues { get; set; }

        /// <summary>
        /// Gets or Sets IsTest
        /// </summary>
        [DataMember(Name="IsTest", EmitDefaultValue=false)]
        public bool? IsTest { get; set; }

        /// <summary>
        /// Gets or Sets MarkedForDeletion
        /// </summary>
        [DataMember(Name="MarkedForDeletion", EmitDefaultValue=false)]
        public bool? MarkedForDeletion { get; set; }

        /// <summary>
        /// Gets or Sets RegisteredCountryOfBusiness
        /// </summary>
        [DataMember(Name="RegisteredCountryOfBusiness", EmitDefaultValue=false)]
        public CountryState RegisteredCountryOfBusiness { get; set; }

        /// <summary>
        /// Gets or Sets MerchantCountry
        /// </summary>
        [DataMember(Name="MerchantCountry", EmitDefaultValue=false)]
        public CountryState MerchantCountry { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public MerchantStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Vertical
        /// </summary>
        [DataMember(Name="Vertical", EmitDefaultValue=false)]
        public Object Vertical { get; set; }

        /// <summary>
        /// Gets or Sets BankDetails
        /// </summary>
        [DataMember(Name="BankDetails", EmitDefaultValue=false)]
        public BankDetails BankDetails { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public AddressData2 BillingAddress { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public Countries Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public CountrySubdivisions State { get; set; }

        /// <summary>
        /// Gets or Sets SplititSigningEntity
        /// </summary>
        [DataMember(Name="SplititSigningEntity", EmitDefaultValue=false)]
        public SplititEntity SplititSigningEntity { get; set; }

        /// <summary>
        /// Gets or Sets SplititCurrentEntity
        /// </summary>
        [DataMember(Name="SplititCurrentEntity", EmitDefaultValue=false)]
        public SplititEntity SplititCurrentEntity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Merchants {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  MerchantAdminWebsite: ").Append(MerchantAdminWebsite).Append("\n");
            sb.Append("  WebApi: ").Append(WebApi).Append("\n");
            sb.Append("  EmbeddedClients: ").Append(EmbeddedClients).Append("\n");
            sb.Append("  CrmId: ").Append(CrmId).Append("\n");
            sb.Append("  SFParentAccountExternalId: ").Append(SFParentAccountExternalId).Append("\n");
            sb.Append("  SFLeadId: ").Append(SFLeadId).Append("\n");
            sb.Append("  SFParentAccountName: ").Append(SFParentAccountName).Append("\n");
            sb.Append("  MerchantVertical: ").Append(MerchantVertical).Append("\n");
            sb.Append("  SFAccountId: ").Append(SFAccountId).Append("\n");
            sb.Append("  DeclaredAnnualVolumeUSD: ").Append(DeclaredAnnualVolumeUSD).Append("\n");
            sb.Append("  DeclaredAOVUSD: ").Append(DeclaredAOVUSD).Append("\n");
            sb.Append("  LogoImage: ").Append(LogoImage).Append("\n");
            sb.Append("  LogoFileExtension: ").Append(LogoFileExtension).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  SupportEmail: ").Append(SupportEmail).Append("\n");
            sb.Append("  SupportPhone: ").Append(SupportPhone).Append("\n");
            sb.Append("  ParameterGroupId: ").Append(ParameterGroupId).Append("\n");
            sb.Append("  BusinessUnitId: ").Append(BusinessUnitId).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  MerchantLegalName: ").Append(MerchantLegalName).Append("\n");
            sb.Append("  SplititMerchantId: ").Append(SplititMerchantId).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  BillingAddressAddressLine: ").Append(BillingAddressAddressLine).Append("\n");
            sb.Append("  BillingAddressAddressLine2: ").Append(BillingAddressAddressLine2).Append("\n");
            sb.Append("  BillingAddressCity: ").Append(BillingAddressCity).Append("\n");
            sb.Append("  OrgGroup: ").Append(OrgGroup).Append("\n");
            sb.Append("  BillingAddressCountryId: ").Append(BillingAddressCountryId).Append("\n");
            sb.Append("  BillingAddressStateId: ").Append(BillingAddressStateId).Append("\n");
            sb.Append("  BillingAddressZip: ").Append(BillingAddressZip).Append("\n");
            sb.Append("  BillingAddressLegacyFullAddressLine: ").Append(BillingAddressLegacyFullAddressLine).Append("\n");
            sb.Append("  VatTaxId: ").Append(VatTaxId).Append("\n");
            sb.Append("  SalesAccossiateId: ").Append(SalesAccossiateId).Append("\n");
            sb.Append("  RegisteredCountryOfBusinessCountryId: ").Append(RegisteredCountryOfBusinessCountryId).Append("\n");
            sb.Append("  RegisteredCountryOfBusinessStateId: ").Append(RegisteredCountryOfBusinessStateId).Append("\n");
            sb.Append("  MerchantCountryCountryId: ").Append(MerchantCountryCountryId).Append("\n");
            sb.Append("  MerchantCountryStateId: ").Append(MerchantCountryStateId).Append("\n");
            sb.Append("  BankDetailsBankAccountName: ").Append(BankDetailsBankAccountName).Append("\n");
            sb.Append("  BankDetailsBankRoutingNumber: ").Append(BankDetailsBankRoutingNumber).Append("\n");
            sb.Append("  BankDetailsBankAccountNumber: ").Append(BankDetailsBankAccountNumber).Append("\n");
            sb.Append("  ReportsFolderName: ").Append(ReportsFolderName).Append("\n");
            sb.Append("  OnBoardingMethod: ").Append(OnBoardingMethod).Append("\n");
            sb.Append("  BusinessUnit: ").Append(BusinessUnit).Append("\n");
            sb.Append("  ParameterGroup: ").Append(ParameterGroup).Append("\n");
            sb.Append("  SalesAccossiate: ").Append(SalesAccossiate).Append("\n");
            sb.Append("  ApiUsers: ").Append(ApiUsers).Append("\n");
            sb.Append("  Agents: ").Append(Agents).Append("\n");
            sb.Append("  InstallmentPlanEventsSubscriptionDatas: ").Append(InstallmentPlanEventsSubscriptionDatas).Append("\n");
            sb.Append("  Terminals: ").Append(Terminals).Append("\n");
            sb.Append("  TouchPointColorValues: ").Append(TouchPointColorValues).Append("\n");
            sb.Append("  IsTest: ").Append(IsTest).Append("\n");
            sb.Append("  MarkedForDeletion: ").Append(MarkedForDeletion).Append("\n");
            sb.Append("  RegisteredCountryOfBusiness: ").Append(RegisteredCountryOfBusiness).Append("\n");
            sb.Append("  MerchantCountry: ").Append(MerchantCountry).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Vertical: ").Append(Vertical).Append("\n");
            sb.Append("  BankDetails: ").Append(BankDetails).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  SplititSigningEntity: ").Append(SplititSigningEntity).Append("\n");
            sb.Append("  SplititCurrentEntity: ").Append(SplititCurrentEntity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Merchants);
        }

        /// <summary>
        /// Returns true if Merchants instances are equal
        /// </summary>
        /// <param name="input">Instance of Merchants to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Merchants input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.MerchantAdminWebsite == input.MerchantAdminWebsite ||
                    (this.MerchantAdminWebsite != null &&
                    this.MerchantAdminWebsite.Equals(input.MerchantAdminWebsite))
                ) && 
                (
                    this.WebApi == input.WebApi ||
                    (this.WebApi != null &&
                    this.WebApi.Equals(input.WebApi))
                ) && 
                (
                    this.EmbeddedClients == input.EmbeddedClients ||
                    (this.EmbeddedClients != null &&
                    this.EmbeddedClients.Equals(input.EmbeddedClients))
                ) && 
                (
                    this.CrmId == input.CrmId ||
                    (this.CrmId != null &&
                    this.CrmId.Equals(input.CrmId))
                ) && 
                (
                    this.SFParentAccountExternalId == input.SFParentAccountExternalId ||
                    (this.SFParentAccountExternalId != null &&
                    this.SFParentAccountExternalId.Equals(input.SFParentAccountExternalId))
                ) && 
                (
                    this.SFLeadId == input.SFLeadId ||
                    (this.SFLeadId != null &&
                    this.SFLeadId.Equals(input.SFLeadId))
                ) && 
                (
                    this.SFParentAccountName == input.SFParentAccountName ||
                    (this.SFParentAccountName != null &&
                    this.SFParentAccountName.Equals(input.SFParentAccountName))
                ) && 
                (
                    this.MerchantVertical == input.MerchantVertical ||
                    (this.MerchantVertical != null &&
                    this.MerchantVertical.Equals(input.MerchantVertical))
                ) && 
                (
                    this.SFAccountId == input.SFAccountId ||
                    (this.SFAccountId != null &&
                    this.SFAccountId.Equals(input.SFAccountId))
                ) && 
                (
                    this.DeclaredAnnualVolumeUSD == input.DeclaredAnnualVolumeUSD ||
                    (this.DeclaredAnnualVolumeUSD != null &&
                    this.DeclaredAnnualVolumeUSD.Equals(input.DeclaredAnnualVolumeUSD))
                ) && 
                (
                    this.DeclaredAOVUSD == input.DeclaredAOVUSD ||
                    (this.DeclaredAOVUSD != null &&
                    this.DeclaredAOVUSD.Equals(input.DeclaredAOVUSD))
                ) && 
                (
                    this.LogoImage == input.LogoImage ||
                    (this.LogoImage != null &&
                    this.LogoImage.Equals(input.LogoImage))
                ) && 
                (
                    this.LogoFileExtension == input.LogoFileExtension ||
                    (this.LogoFileExtension != null &&
                    this.LogoFileExtension.Equals(input.LogoFileExtension))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.SupportEmail == input.SupportEmail ||
                    (this.SupportEmail != null &&
                    this.SupportEmail.Equals(input.SupportEmail))
                ) && 
                (
                    this.SupportPhone == input.SupportPhone ||
                    (this.SupportPhone != null &&
                    this.SupportPhone.Equals(input.SupportPhone))
                ) && 
                (
                    this.ParameterGroupId == input.ParameterGroupId ||
                    (this.ParameterGroupId != null &&
                    this.ParameterGroupId.Equals(input.ParameterGroupId))
                ) && 
                (
                    this.BusinessUnitId == input.BusinessUnitId ||
                    (this.BusinessUnitId != null &&
                    this.BusinessUnitId.Equals(input.BusinessUnitId))
                ) && 
                (
                    this.LogoUrl == input.LogoUrl ||
                    (this.LogoUrl != null &&
                    this.LogoUrl.Equals(input.LogoUrl))
                ) && 
                (
                    this.MerchantLegalName == input.MerchantLegalName ||
                    (this.MerchantLegalName != null &&
                    this.MerchantLegalName.Equals(input.MerchantLegalName))
                ) && 
                (
                    this.SplititMerchantId == input.SplititMerchantId ||
                    (this.SplititMerchantId != null &&
                    this.SplititMerchantId.Equals(input.SplititMerchantId))
                ) && 
                (
                    this.WebsiteUrl == input.WebsiteUrl ||
                    (this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(input.WebsiteUrl))
                ) && 
                (
                    this.BillingAddressAddressLine == input.BillingAddressAddressLine ||
                    (this.BillingAddressAddressLine != null &&
                    this.BillingAddressAddressLine.Equals(input.BillingAddressAddressLine))
                ) && 
                (
                    this.BillingAddressAddressLine2 == input.BillingAddressAddressLine2 ||
                    (this.BillingAddressAddressLine2 != null &&
                    this.BillingAddressAddressLine2.Equals(input.BillingAddressAddressLine2))
                ) && 
                (
                    this.BillingAddressCity == input.BillingAddressCity ||
                    (this.BillingAddressCity != null &&
                    this.BillingAddressCity.Equals(input.BillingAddressCity))
                ) && 
                (
                    this.OrgGroup == input.OrgGroup ||
                    (this.OrgGroup != null &&
                    this.OrgGroup.Equals(input.OrgGroup))
                ) && 
                (
                    this.BillingAddressCountryId == input.BillingAddressCountryId ||
                    (this.BillingAddressCountryId != null &&
                    this.BillingAddressCountryId.Equals(input.BillingAddressCountryId))
                ) && 
                (
                    this.BillingAddressStateId == input.BillingAddressStateId ||
                    (this.BillingAddressStateId != null &&
                    this.BillingAddressStateId.Equals(input.BillingAddressStateId))
                ) && 
                (
                    this.BillingAddressZip == input.BillingAddressZip ||
                    (this.BillingAddressZip != null &&
                    this.BillingAddressZip.Equals(input.BillingAddressZip))
                ) && 
                (
                    this.BillingAddressLegacyFullAddressLine == input.BillingAddressLegacyFullAddressLine ||
                    (this.BillingAddressLegacyFullAddressLine != null &&
                    this.BillingAddressLegacyFullAddressLine.Equals(input.BillingAddressLegacyFullAddressLine))
                ) && 
                (
                    this.VatTaxId == input.VatTaxId ||
                    (this.VatTaxId != null &&
                    this.VatTaxId.Equals(input.VatTaxId))
                ) && 
                (
                    this.SalesAccossiateId == input.SalesAccossiateId ||
                    (this.SalesAccossiateId != null &&
                    this.SalesAccossiateId.Equals(input.SalesAccossiateId))
                ) && 
                (
                    this.RegisteredCountryOfBusinessCountryId == input.RegisteredCountryOfBusinessCountryId ||
                    (this.RegisteredCountryOfBusinessCountryId != null &&
                    this.RegisteredCountryOfBusinessCountryId.Equals(input.RegisteredCountryOfBusinessCountryId))
                ) && 
                (
                    this.RegisteredCountryOfBusinessStateId == input.RegisteredCountryOfBusinessStateId ||
                    (this.RegisteredCountryOfBusinessStateId != null &&
                    this.RegisteredCountryOfBusinessStateId.Equals(input.RegisteredCountryOfBusinessStateId))
                ) && 
                (
                    this.MerchantCountryCountryId == input.MerchantCountryCountryId ||
                    (this.MerchantCountryCountryId != null &&
                    this.MerchantCountryCountryId.Equals(input.MerchantCountryCountryId))
                ) && 
                (
                    this.MerchantCountryStateId == input.MerchantCountryStateId ||
                    (this.MerchantCountryStateId != null &&
                    this.MerchantCountryStateId.Equals(input.MerchantCountryStateId))
                ) && 
                (
                    this.BankDetailsBankAccountName == input.BankDetailsBankAccountName ||
                    (this.BankDetailsBankAccountName != null &&
                    this.BankDetailsBankAccountName.Equals(input.BankDetailsBankAccountName))
                ) && 
                (
                    this.BankDetailsBankRoutingNumber == input.BankDetailsBankRoutingNumber ||
                    (this.BankDetailsBankRoutingNumber != null &&
                    this.BankDetailsBankRoutingNumber.Equals(input.BankDetailsBankRoutingNumber))
                ) && 
                (
                    this.BankDetailsBankAccountNumber == input.BankDetailsBankAccountNumber ||
                    (this.BankDetailsBankAccountNumber != null &&
                    this.BankDetailsBankAccountNumber.Equals(input.BankDetailsBankAccountNumber))
                ) && 
                (
                    this.ReportsFolderName == input.ReportsFolderName ||
                    (this.ReportsFolderName != null &&
                    this.ReportsFolderName.Equals(input.ReportsFolderName))
                ) && 
                (
                    this.OnBoardingMethod == input.OnBoardingMethod ||
                    (this.OnBoardingMethod != null &&
                    this.OnBoardingMethod.Equals(input.OnBoardingMethod))
                ) && 
                (
                    this.BusinessUnit == input.BusinessUnit ||
                    (this.BusinessUnit != null &&
                    this.BusinessUnit.Equals(input.BusinessUnit))
                ) && 
                (
                    this.ParameterGroup == input.ParameterGroup ||
                    (this.ParameterGroup != null &&
                    this.ParameterGroup.Equals(input.ParameterGroup))
                ) && 
                (
                    this.SalesAccossiate == input.SalesAccossiate ||
                    (this.SalesAccossiate != null &&
                    this.SalesAccossiate.Equals(input.SalesAccossiate))
                ) && 
                (
                    this.ApiUsers == input.ApiUsers ||
                    (this.ApiUsers != null &&
                    this.ApiUsers.Equals(input.ApiUsers))
                ) && 
                (
                    this.Agents == input.Agents ||
                    this.Agents != null &&
                    this.Agents.SequenceEqual(input.Agents)
                ) && 
                (
                    this.InstallmentPlanEventsSubscriptionDatas == input.InstallmentPlanEventsSubscriptionDatas ||
                    this.InstallmentPlanEventsSubscriptionDatas != null &&
                    this.InstallmentPlanEventsSubscriptionDatas.SequenceEqual(input.InstallmentPlanEventsSubscriptionDatas)
                ) && 
                (
                    this.Terminals == input.Terminals ||
                    this.Terminals != null &&
                    this.Terminals.SequenceEqual(input.Terminals)
                ) && 
                (
                    this.TouchPointColorValues == input.TouchPointColorValues ||
                    this.TouchPointColorValues != null &&
                    this.TouchPointColorValues.SequenceEqual(input.TouchPointColorValues)
                ) && 
                (
                    this.IsTest == input.IsTest ||
                    (this.IsTest != null &&
                    this.IsTest.Equals(input.IsTest))
                ) && 
                (
                    this.MarkedForDeletion == input.MarkedForDeletion ||
                    (this.MarkedForDeletion != null &&
                    this.MarkedForDeletion.Equals(input.MarkedForDeletion))
                ) && 
                (
                    this.RegisteredCountryOfBusiness == input.RegisteredCountryOfBusiness ||
                    (this.RegisteredCountryOfBusiness != null &&
                    this.RegisteredCountryOfBusiness.Equals(input.RegisteredCountryOfBusiness))
                ) && 
                (
                    this.MerchantCountry == input.MerchantCountry ||
                    (this.MerchantCountry != null &&
                    this.MerchantCountry.Equals(input.MerchantCountry))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Vertical == input.Vertical ||
                    (this.Vertical != null &&
                    this.Vertical.Equals(input.Vertical))
                ) && 
                (
                    this.BankDetails == input.BankDetails ||
                    (this.BankDetails != null &&
                    this.BankDetails.Equals(input.BankDetails))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.SplititSigningEntity == input.SplititSigningEntity ||
                    (this.SplititSigningEntity != null &&
                    this.SplititSigningEntity.Equals(input.SplititSigningEntity))
                ) && 
                (
                    this.SplititCurrentEntity == input.SplititCurrentEntity ||
                    (this.SplititCurrentEntity != null &&
                    this.SplititCurrentEntity.Equals(input.SplititCurrentEntity))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.MerchantAdminWebsite != null)
                    hashCode = hashCode * 59 + this.MerchantAdminWebsite.GetHashCode();
                if (this.WebApi != null)
                    hashCode = hashCode * 59 + this.WebApi.GetHashCode();
                if (this.EmbeddedClients != null)
                    hashCode = hashCode * 59 + this.EmbeddedClients.GetHashCode();
                if (this.CrmId != null)
                    hashCode = hashCode * 59 + this.CrmId.GetHashCode();
                if (this.SFParentAccountExternalId != null)
                    hashCode = hashCode * 59 + this.SFParentAccountExternalId.GetHashCode();
                if (this.SFLeadId != null)
                    hashCode = hashCode * 59 + this.SFLeadId.GetHashCode();
                if (this.SFParentAccountName != null)
                    hashCode = hashCode * 59 + this.SFParentAccountName.GetHashCode();
                if (this.MerchantVertical != null)
                    hashCode = hashCode * 59 + this.MerchantVertical.GetHashCode();
                if (this.SFAccountId != null)
                    hashCode = hashCode * 59 + this.SFAccountId.GetHashCode();
                if (this.DeclaredAnnualVolumeUSD != null)
                    hashCode = hashCode * 59 + this.DeclaredAnnualVolumeUSD.GetHashCode();
                if (this.DeclaredAOVUSD != null)
                    hashCode = hashCode * 59 + this.DeclaredAOVUSD.GetHashCode();
                if (this.LogoImage != null)
                    hashCode = hashCode * 59 + this.LogoImage.GetHashCode();
                if (this.LogoFileExtension != null)
                    hashCode = hashCode * 59 + this.LogoFileExtension.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.SupportEmail != null)
                    hashCode = hashCode * 59 + this.SupportEmail.GetHashCode();
                if (this.SupportPhone != null)
                    hashCode = hashCode * 59 + this.SupportPhone.GetHashCode();
                if (this.ParameterGroupId != null)
                    hashCode = hashCode * 59 + this.ParameterGroupId.GetHashCode();
                if (this.BusinessUnitId != null)
                    hashCode = hashCode * 59 + this.BusinessUnitId.GetHashCode();
                if (this.LogoUrl != null)
                    hashCode = hashCode * 59 + this.LogoUrl.GetHashCode();
                if (this.MerchantLegalName != null)
                    hashCode = hashCode * 59 + this.MerchantLegalName.GetHashCode();
                if (this.SplititMerchantId != null)
                    hashCode = hashCode * 59 + this.SplititMerchantId.GetHashCode();
                if (this.WebsiteUrl != null)
                    hashCode = hashCode * 59 + this.WebsiteUrl.GetHashCode();
                if (this.BillingAddressAddressLine != null)
                    hashCode = hashCode * 59 + this.BillingAddressAddressLine.GetHashCode();
                if (this.BillingAddressAddressLine2 != null)
                    hashCode = hashCode * 59 + this.BillingAddressAddressLine2.GetHashCode();
                if (this.BillingAddressCity != null)
                    hashCode = hashCode * 59 + this.BillingAddressCity.GetHashCode();
                if (this.OrgGroup != null)
                    hashCode = hashCode * 59 + this.OrgGroup.GetHashCode();
                if (this.BillingAddressCountryId != null)
                    hashCode = hashCode * 59 + this.BillingAddressCountryId.GetHashCode();
                if (this.BillingAddressStateId != null)
                    hashCode = hashCode * 59 + this.BillingAddressStateId.GetHashCode();
                if (this.BillingAddressZip != null)
                    hashCode = hashCode * 59 + this.BillingAddressZip.GetHashCode();
                if (this.BillingAddressLegacyFullAddressLine != null)
                    hashCode = hashCode * 59 + this.BillingAddressLegacyFullAddressLine.GetHashCode();
                if (this.VatTaxId != null)
                    hashCode = hashCode * 59 + this.VatTaxId.GetHashCode();
                if (this.SalesAccossiateId != null)
                    hashCode = hashCode * 59 + this.SalesAccossiateId.GetHashCode();
                if (this.RegisteredCountryOfBusinessCountryId != null)
                    hashCode = hashCode * 59 + this.RegisteredCountryOfBusinessCountryId.GetHashCode();
                if (this.RegisteredCountryOfBusinessStateId != null)
                    hashCode = hashCode * 59 + this.RegisteredCountryOfBusinessStateId.GetHashCode();
                if (this.MerchantCountryCountryId != null)
                    hashCode = hashCode * 59 + this.MerchantCountryCountryId.GetHashCode();
                if (this.MerchantCountryStateId != null)
                    hashCode = hashCode * 59 + this.MerchantCountryStateId.GetHashCode();
                if (this.BankDetailsBankAccountName != null)
                    hashCode = hashCode * 59 + this.BankDetailsBankAccountName.GetHashCode();
                if (this.BankDetailsBankRoutingNumber != null)
                    hashCode = hashCode * 59 + this.BankDetailsBankRoutingNumber.GetHashCode();
                if (this.BankDetailsBankAccountNumber != null)
                    hashCode = hashCode * 59 + this.BankDetailsBankAccountNumber.GetHashCode();
                if (this.ReportsFolderName != null)
                    hashCode = hashCode * 59 + this.ReportsFolderName.GetHashCode();
                if (this.OnBoardingMethod != null)
                    hashCode = hashCode * 59 + this.OnBoardingMethod.GetHashCode();
                if (this.BusinessUnit != null)
                    hashCode = hashCode * 59 + this.BusinessUnit.GetHashCode();
                if (this.ParameterGroup != null)
                    hashCode = hashCode * 59 + this.ParameterGroup.GetHashCode();
                if (this.SalesAccossiate != null)
                    hashCode = hashCode * 59 + this.SalesAccossiate.GetHashCode();
                if (this.ApiUsers != null)
                    hashCode = hashCode * 59 + this.ApiUsers.GetHashCode();
                if (this.Agents != null)
                    hashCode = hashCode * 59 + this.Agents.GetHashCode();
                if (this.InstallmentPlanEventsSubscriptionDatas != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEventsSubscriptionDatas.GetHashCode();
                if (this.Terminals != null)
                    hashCode = hashCode * 59 + this.Terminals.GetHashCode();
                if (this.TouchPointColorValues != null)
                    hashCode = hashCode * 59 + this.TouchPointColorValues.GetHashCode();
                if (this.IsTest != null)
                    hashCode = hashCode * 59 + this.IsTest.GetHashCode();
                if (this.MarkedForDeletion != null)
                    hashCode = hashCode * 59 + this.MarkedForDeletion.GetHashCode();
                if (this.RegisteredCountryOfBusiness != null)
                    hashCode = hashCode * 59 + this.RegisteredCountryOfBusiness.GetHashCode();
                if (this.MerchantCountry != null)
                    hashCode = hashCode * 59 + this.MerchantCountry.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Vertical != null)
                    hashCode = hashCode * 59 + this.Vertical.GetHashCode();
                if (this.BankDetails != null)
                    hashCode = hashCode * 59 + this.BankDetails.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.SplititSigningEntity != null)
                    hashCode = hashCode * 59 + this.SplititSigningEntity.GetHashCode();
                if (this.SplititCurrentEntity != null)
                    hashCode = hashCode * 59 + this.SplititCurrentEntity.GetHashCode();
                return hashCode;
            }
        }
    }

}
