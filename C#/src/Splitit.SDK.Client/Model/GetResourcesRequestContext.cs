/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// GetResourcesRequestContext
    /// </summary>
    [DataContract]
    public partial class GetResourcesRequestContext :  IEquatable<GetResourcesRequestContext>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetResourcesRequestContext" /> class.
        /// </summary>
        /// <param name="merchantCode">merchantCode.</param>
        /// <param name="cultureName">cultureName.</param>
        /// <param name="touchPointCode">touchPointCode.</param>
        public GetResourcesRequestContext(string merchantCode = default(string), string cultureName = default(string), string touchPointCode = default(string))
        {
            this.MerchantCode = merchantCode;
            this.CultureName = cultureName;
            this.TouchPointCode = touchPointCode;
        }

        
        /// <summary>
        /// Gets or Sets MerchantCode
        /// </summary>
        [DataMember(Name="MerchantCode", EmitDefaultValue=false)]
        public string MerchantCode { get; set; }

        /// <summary>
        /// Gets or Sets CultureName
        /// </summary>
        [DataMember(Name="CultureName", EmitDefaultValue=false)]
        public string CultureName { get; set; }

        /// <summary>
        /// Gets or Sets TouchPointCode
        /// </summary>
        [DataMember(Name="TouchPointCode", EmitDefaultValue=false)]
        public string TouchPointCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetResourcesRequestContext {\n");
            sb.Append("  MerchantCode: ").Append(MerchantCode).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  TouchPointCode: ").Append(TouchPointCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetResourcesRequestContext);
        }

        /// <summary>
        /// Returns true if GetResourcesRequestContext instances are equal
        /// </summary>
        /// <param name="input">Instance of GetResourcesRequestContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetResourcesRequestContext input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantCode == input.MerchantCode ||
                    (this.MerchantCode != null &&
                    this.MerchantCode.Equals(input.MerchantCode))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.TouchPointCode == input.TouchPointCode ||
                    (this.TouchPointCode != null &&
                    this.TouchPointCode.Equals(input.TouchPointCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantCode != null)
                    hashCode = hashCode * 59 + this.MerchantCode.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.TouchPointCode != null)
                    hashCode = hashCode * 59 + this.TouchPointCode.GetHashCode();
                return hashCode;
            }
        }
    }

}
