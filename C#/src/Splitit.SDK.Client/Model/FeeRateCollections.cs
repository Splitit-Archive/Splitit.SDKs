/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FeeRateCollections
    /// </summary>
    [DataContract]
    public partial class FeeRateCollections :  IEquatable<FeeRateCollections>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeRateCollections" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FeeRateCollections() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeRateCollections" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="rangeType">rangeType (required).</param>
        /// <param name="feeRates">feeRates.</param>
        public FeeRateCollections(long? id = default(long?), RangeType rangeType = default(RangeType), List<FeeRates> feeRates = default(List<FeeRates>))
        {
            this.Id = id;
            this.RangeType = rangeType;
            this.FeeRates = feeRates;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets RangeType
        /// </summary>
        [DataMember(Name="RangeType", EmitDefaultValue=false)]
        public RangeType RangeType { get; set; }

        /// <summary>
        /// Gets or Sets FeeRates
        /// </summary>
        [DataMember(Name="FeeRates", EmitDefaultValue=false)]
        public List<FeeRates> FeeRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeRateCollections {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  RangeType: ").Append(RangeType).Append("\n");
            sb.Append("  FeeRates: ").Append(FeeRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeRateCollections);
        }

        /// <summary>
        /// Returns true if FeeRateCollections instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeRateCollections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeRateCollections input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.RangeType == input.RangeType ||
                    (this.RangeType != null &&
                    this.RangeType.Equals(input.RangeType))
                ) && 
                (
                    this.FeeRates == input.FeeRates ||
                    this.FeeRates != null &&
                    this.FeeRates.SequenceEqual(input.FeeRates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.RangeType != null)
                    hashCode = hashCode * 59 + this.RangeType.GetHashCode();
                if (this.FeeRates != null)
                    hashCode = hashCode * 59 + this.FeeRates.GetHashCode();
                return hashCode;
            }
        }
    }

}
