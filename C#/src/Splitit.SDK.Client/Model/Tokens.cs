/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Tokens
    /// </summary>
    [DataContract]
    public partial class Tokens :  IEquatable<Tokens>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Tokens" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Tokens() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Tokens" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="token">token.</param>
        /// <param name="validTill">validTill.</param>
        /// <param name="lastUsage">lastUsage.</param>
        /// <param name="parameterGroupId">parameterGroupId.</param>
        /// <param name="type">type.</param>
        /// <param name="parameterGroup">parameterGroup.</param>
        /// <param name="userId">userId (required).</param>
        /// <param name="userType">userType (required).</param>
        /// <param name="installmentPlanId">installmentPlanId.</param>
        /// <param name="installmentPlan">installmentPlan.</param>
        public Tokens(long? id = default(long?), string token = default(string), DateTime? validTill = default(DateTime?), DateTime? lastUsage = default(DateTime?), long? parameterGroupId = default(long?), string type = default(string), ParameterGroups parameterGroup = default(ParameterGroups), long? userId = default(long?), UserType userType = default(UserType), long? installmentPlanId = default(long?), InstallmentPlans installmentPlan = default(InstallmentPlans))
        {
            this.Id = id;
            this.UserId = userId;
            this.UserType = userType;
            this.Token = token;
            this.ValidTill = validTill;
            this.LastUsage = lastUsage;
            this.ParameterGroupId = parameterGroupId;
            this.Type = type;
            this.ParameterGroup = parameterGroup;
            this.InstallmentPlanId = installmentPlanId;
            this.InstallmentPlan = installmentPlan;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="Token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets ValidTill
        /// </summary>
        [DataMember(Name="ValidTill", EmitDefaultValue=false)]
        public DateTime? ValidTill { get; set; }

        /// <summary>
        /// Gets or Sets LastUsage
        /// </summary>
        [DataMember(Name="LastUsage", EmitDefaultValue=false)]
        public DateTime? LastUsage { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroupId
        /// </summary>
        [DataMember(Name="ParameterGroupId", EmitDefaultValue=false)]
        public long? ParameterGroupId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets ParameterGroup
        /// </summary>
        [DataMember(Name="ParameterGroup", EmitDefaultValue=false)]
        public ParameterGroups ParameterGroup { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public UserType UserType { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanId
        /// </summary>
        [DataMember(Name="InstallmentPlanId", EmitDefaultValue=false)]
        public long? InstallmentPlanId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlan
        /// </summary>
        [DataMember(Name="InstallmentPlan", EmitDefaultValue=false)]
        public InstallmentPlans InstallmentPlan { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Tokens {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ValidTill: ").Append(ValidTill).Append("\n");
            sb.Append("  LastUsage: ").Append(LastUsage).Append("\n");
            sb.Append("  ParameterGroupId: ").Append(ParameterGroupId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ParameterGroup: ").Append(ParameterGroup).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  InstallmentPlanId: ").Append(InstallmentPlanId).Append("\n");
            sb.Append("  InstallmentPlan: ").Append(InstallmentPlan).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Tokens);
        }

        /// <summary>
        /// Returns true if Tokens instances are equal
        /// </summary>
        /// <param name="input">Instance of Tokens to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Tokens input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.ValidTill == input.ValidTill ||
                    (this.ValidTill != null &&
                    this.ValidTill.Equals(input.ValidTill))
                ) && 
                (
                    this.LastUsage == input.LastUsage ||
                    (this.LastUsage != null &&
                    this.LastUsage.Equals(input.LastUsage))
                ) && 
                (
                    this.ParameterGroupId == input.ParameterGroupId ||
                    (this.ParameterGroupId != null &&
                    this.ParameterGroupId.Equals(input.ParameterGroupId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.ParameterGroup == input.ParameterGroup ||
                    (this.ParameterGroup != null &&
                    this.ParameterGroup.Equals(input.ParameterGroup))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.InstallmentPlanId == input.InstallmentPlanId ||
                    (this.InstallmentPlanId != null &&
                    this.InstallmentPlanId.Equals(input.InstallmentPlanId))
                ) && 
                (
                    this.InstallmentPlan == input.InstallmentPlan ||
                    (this.InstallmentPlan != null &&
                    this.InstallmentPlan.Equals(input.InstallmentPlan))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.ValidTill != null)
                    hashCode = hashCode * 59 + this.ValidTill.GetHashCode();
                if (this.LastUsage != null)
                    hashCode = hashCode * 59 + this.LastUsage.GetHashCode();
                if (this.ParameterGroupId != null)
                    hashCode = hashCode * 59 + this.ParameterGroupId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.ParameterGroup != null)
                    hashCode = hashCode * 59 + this.ParameterGroup.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.InstallmentPlanId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanId.GetHashCode();
                if (this.InstallmentPlan != null)
                    hashCode = hashCode * 59 + this.InstallmentPlan.GetHashCode();
                return hashCode;
            }
        }
    }

}
