/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// CountrySubdivisions
    /// </summary>
    [DataContract]
    public partial class CountrySubdivisions :  IEquatable<CountrySubdivisions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CountrySubdivisions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CountrySubdivisions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CountrySubdivisions" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="countryId">countryId (required).</param>
        /// <param name="isoCode">isoCode.</param>
        /// <param name="description">description.</param>
        /// <param name="iso2Code">iso2Code.</param>
        /// <param name="utcTimeOffsetInMins">utcTimeOffsetInMins (required).</param>
        /// <param name="country">country.</param>
        /// <param name="stateLimitRuleDatas">stateLimitRuleDatas.</param>
        /// <param name="zipAddressDetails">zipAddressDetails.</param>
        public CountrySubdivisions(long? id = default(long?), long? countryId = default(long?), string isoCode = default(string), string description = default(string), string iso2Code = default(string), int? utcTimeOffsetInMins = default(int?), Countries country = default(Countries), List<StateLimitRuleDatas> stateLimitRuleDatas = default(List<StateLimitRuleDatas>), List<ZipAddressDetails> zipAddressDetails = default(List<ZipAddressDetails>))
        {
            this.Id = id;
            this.CountryId = countryId;
            this.UtcTimeOffsetInMins = utcTimeOffsetInMins;
            this.IsoCode = isoCode;
            this.Description = description;
            this.Iso2Code = iso2Code;
            this.Country = country;
            this.StateLimitRuleDatas = stateLimitRuleDatas;
            this.ZipAddressDetails = zipAddressDetails;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CountryId
        /// </summary>
        [DataMember(Name="CountryId", EmitDefaultValue=false)]
        public long? CountryId { get; set; }

        /// <summary>
        /// Gets or Sets IsoCode
        /// </summary>
        [DataMember(Name="IsoCode", EmitDefaultValue=false)]
        public string IsoCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Iso2Code
        /// </summary>
        [DataMember(Name="Iso2Code", EmitDefaultValue=false)]
        public string Iso2Code { get; set; }

        /// <summary>
        /// Gets or Sets UtcTimeOffsetInMins
        /// </summary>
        [DataMember(Name="UtcTimeOffsetInMins", EmitDefaultValue=false)]
        public int? UtcTimeOffsetInMins { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public Countries Country { get; set; }

        /// <summary>
        /// Gets or Sets StateLimitRuleDatas
        /// </summary>
        [DataMember(Name="StateLimitRuleDatas", EmitDefaultValue=false)]
        public List<StateLimitRuleDatas> StateLimitRuleDatas { get; set; }

        /// <summary>
        /// Gets or Sets ZipAddressDetails
        /// </summary>
        [DataMember(Name="ZipAddressDetails", EmitDefaultValue=false)]
        public List<ZipAddressDetails> ZipAddressDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CountrySubdivisions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CountryId: ").Append(CountryId).Append("\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Iso2Code: ").Append(Iso2Code).Append("\n");
            sb.Append("  UtcTimeOffsetInMins: ").Append(UtcTimeOffsetInMins).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  StateLimitRuleDatas: ").Append(StateLimitRuleDatas).Append("\n");
            sb.Append("  ZipAddressDetails: ").Append(ZipAddressDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CountrySubdivisions);
        }

        /// <summary>
        /// Returns true if CountrySubdivisions instances are equal
        /// </summary>
        /// <param name="input">Instance of CountrySubdivisions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CountrySubdivisions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CountryId == input.CountryId ||
                    (this.CountryId != null &&
                    this.CountryId.Equals(input.CountryId))
                ) && 
                (
                    this.IsoCode == input.IsoCode ||
                    (this.IsoCode != null &&
                    this.IsoCode.Equals(input.IsoCode))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Iso2Code == input.Iso2Code ||
                    (this.Iso2Code != null &&
                    this.Iso2Code.Equals(input.Iso2Code))
                ) && 
                (
                    this.UtcTimeOffsetInMins == input.UtcTimeOffsetInMins ||
                    (this.UtcTimeOffsetInMins != null &&
                    this.UtcTimeOffsetInMins.Equals(input.UtcTimeOffsetInMins))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.StateLimitRuleDatas == input.StateLimitRuleDatas ||
                    this.StateLimitRuleDatas != null &&
                    this.StateLimitRuleDatas.SequenceEqual(input.StateLimitRuleDatas)
                ) && 
                (
                    this.ZipAddressDetails == input.ZipAddressDetails ||
                    this.ZipAddressDetails != null &&
                    this.ZipAddressDetails.SequenceEqual(input.ZipAddressDetails)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CountryId != null)
                    hashCode = hashCode * 59 + this.CountryId.GetHashCode();
                if (this.IsoCode != null)
                    hashCode = hashCode * 59 + this.IsoCode.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Iso2Code != null)
                    hashCode = hashCode * 59 + this.Iso2Code.GetHashCode();
                if (this.UtcTimeOffsetInMins != null)
                    hashCode = hashCode * 59 + this.UtcTimeOffsetInMins.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.StateLimitRuleDatas != null)
                    hashCode = hashCode * 59 + this.StateLimitRuleDatas.GetHashCode();
                if (this.ZipAddressDetails != null)
                    hashCode = hashCode * 59 + this.ZipAddressDetails.GetHashCode();
                return hashCode;
            }
        }
    }

}
