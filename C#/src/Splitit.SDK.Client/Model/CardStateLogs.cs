/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// CardStateLogs
    /// </summary>
    [DataContract]
    public partial class CardStateLogs :  IEquatable<CardStateLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CardStateLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CardStateLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CardStateLogs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="cardId">cardId (required).</param>
        /// <param name="expirationMonth">expirationMonth (required).</param>
        /// <param name="expirationYear">expirationYear (required).</param>
        /// <param name="cardHolderName">cardHolderName.</param>
        /// <param name="addressDataAddressLine">addressDataAddressLine.</param>
        /// <param name="addressDataZip">addressDataZip.</param>
        /// <param name="version">version (required).</param>
        /// <param name="isVerified">isVerified (required).</param>
        /// <param name="changeSource">changeSource.</param>
        /// <param name="addressDataAddressLine2">addressDataAddressLine2.</param>
        /// <param name="addressDataCity">addressDataCity.</param>
        /// <param name="addressDataCountryId">addressDataCountryId.</param>
        /// <param name="addressDataStateId">addressDataStateId.</param>
        /// <param name="addressDataLegacyFullAddressLine">addressDataLegacyFullAddressLine.</param>
        /// <param name="card">card.</param>
        /// <param name="country">country.</param>
        /// <param name="state">state.</param>
        /// <param name="installments">installments.</param>
        /// <param name="reAuthorizations">reAuthorizations.</param>
        /// <param name="addressData">addressData.</param>
        public CardStateLogs(long? id = default(long?), long? cardId = default(long?), int? expirationMonth = default(int?), int? expirationYear = default(int?), string cardHolderName = default(string), string addressDataAddressLine = default(string), string addressDataZip = default(string), int? version = default(int?), bool? isVerified = default(bool?), string changeSource = default(string), string addressDataAddressLine2 = default(string), string addressDataCity = default(string), long? addressDataCountryId = default(long?), long? addressDataStateId = default(long?), string addressDataLegacyFullAddressLine = default(string), Cards card = default(Cards), Countries country = default(Countries), CountrySubdivisions state = default(CountrySubdivisions), List<Installments> installments = default(List<Installments>), List<ReAuthorizations> reAuthorizations = default(List<ReAuthorizations>), AddressData2 addressData = default(AddressData2))
        {
            this.Id = id;
            this.CardId = cardId;
            this.ExpirationMonth = expirationMonth;
            this.ExpirationYear = expirationYear;
            this.Version = version;
            this.IsVerified = isVerified;
            this.CardHolderName = cardHolderName;
            this.AddressDataAddressLine = addressDataAddressLine;
            this.AddressDataZip = addressDataZip;
            this.ChangeSource = changeSource;
            this.AddressDataAddressLine2 = addressDataAddressLine2;
            this.AddressDataCity = addressDataCity;
            this.AddressDataCountryId = addressDataCountryId;
            this.AddressDataStateId = addressDataStateId;
            this.AddressDataLegacyFullAddressLine = addressDataLegacyFullAddressLine;
            this.Card = card;
            this.Country = country;
            this.State = state;
            this.Installments = installments;
            this.ReAuthorizations = reAuthorizations;
            this.AddressData = addressData;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets CardId
        /// </summary>
        [DataMember(Name="CardId", EmitDefaultValue=false)]
        public long? CardId { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationMonth
        /// </summary>
        [DataMember(Name="ExpirationMonth", EmitDefaultValue=false)]
        public int? ExpirationMonth { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationYear
        /// </summary>
        [DataMember(Name="ExpirationYear", EmitDefaultValue=false)]
        public int? ExpirationYear { get; set; }

        /// <summary>
        /// Gets or Sets CardHolderName
        /// </summary>
        [DataMember(Name="CardHolderName", EmitDefaultValue=false)]
        public string CardHolderName { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataAddressLine
        /// </summary>
        [DataMember(Name="AddressDataAddressLine", EmitDefaultValue=false)]
        public string AddressDataAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataZip
        /// </summary>
        [DataMember(Name="AddressDataZip", EmitDefaultValue=false)]
        public string AddressDataZip { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// Gets or Sets IsVerified
        /// </summary>
        [DataMember(Name="IsVerified", EmitDefaultValue=false)]
        public bool? IsVerified { get; set; }

        /// <summary>
        /// Gets or Sets ChangeSource
        /// </summary>
        [DataMember(Name="ChangeSource", EmitDefaultValue=false)]
        public string ChangeSource { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataAddressLine2
        /// </summary>
        [DataMember(Name="AddressDataAddressLine2", EmitDefaultValue=false)]
        public string AddressDataAddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataCity
        /// </summary>
        [DataMember(Name="AddressDataCity", EmitDefaultValue=false)]
        public string AddressDataCity { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataCountryId
        /// </summary>
        [DataMember(Name="AddressDataCountryId", EmitDefaultValue=false)]
        public long? AddressDataCountryId { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataStateId
        /// </summary>
        [DataMember(Name="AddressDataStateId", EmitDefaultValue=false)]
        public long? AddressDataStateId { get; set; }

        /// <summary>
        /// Gets or Sets AddressDataLegacyFullAddressLine
        /// </summary>
        [DataMember(Name="AddressDataLegacyFullAddressLine", EmitDefaultValue=false)]
        public string AddressDataLegacyFullAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets Card
        /// </summary>
        [DataMember(Name="Card", EmitDefaultValue=false)]
        public Cards Card { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public Countries Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public CountrySubdivisions State { get; set; }

        /// <summary>
        /// Gets or Sets Installments
        /// </summary>
        [DataMember(Name="Installments", EmitDefaultValue=false)]
        public List<Installments> Installments { get; set; }

        /// <summary>
        /// Gets or Sets ReAuthorizations
        /// </summary>
        [DataMember(Name="ReAuthorizations", EmitDefaultValue=false)]
        public List<ReAuthorizations> ReAuthorizations { get; set; }

        /// <summary>
        /// Gets or Sets AddressData
        /// </summary>
        [DataMember(Name="AddressData", EmitDefaultValue=false)]
        public AddressData2 AddressData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CardStateLogs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CardId: ").Append(CardId).Append("\n");
            sb.Append("  ExpirationMonth: ").Append(ExpirationMonth).Append("\n");
            sb.Append("  ExpirationYear: ").Append(ExpirationYear).Append("\n");
            sb.Append("  CardHolderName: ").Append(CardHolderName).Append("\n");
            sb.Append("  AddressDataAddressLine: ").Append(AddressDataAddressLine).Append("\n");
            sb.Append("  AddressDataZip: ").Append(AddressDataZip).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  IsVerified: ").Append(IsVerified).Append("\n");
            sb.Append("  ChangeSource: ").Append(ChangeSource).Append("\n");
            sb.Append("  AddressDataAddressLine2: ").Append(AddressDataAddressLine2).Append("\n");
            sb.Append("  AddressDataCity: ").Append(AddressDataCity).Append("\n");
            sb.Append("  AddressDataCountryId: ").Append(AddressDataCountryId).Append("\n");
            sb.Append("  AddressDataStateId: ").Append(AddressDataStateId).Append("\n");
            sb.Append("  AddressDataLegacyFullAddressLine: ").Append(AddressDataLegacyFullAddressLine).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  ReAuthorizations: ").Append(ReAuthorizations).Append("\n");
            sb.Append("  AddressData: ").Append(AddressData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CardStateLogs);
        }

        /// <summary>
        /// Returns true if CardStateLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of CardStateLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CardStateLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CardId == input.CardId ||
                    (this.CardId != null &&
                    this.CardId.Equals(input.CardId))
                ) && 
                (
                    this.ExpirationMonth == input.ExpirationMonth ||
                    (this.ExpirationMonth != null &&
                    this.ExpirationMonth.Equals(input.ExpirationMonth))
                ) && 
                (
                    this.ExpirationYear == input.ExpirationYear ||
                    (this.ExpirationYear != null &&
                    this.ExpirationYear.Equals(input.ExpirationYear))
                ) && 
                (
                    this.CardHolderName == input.CardHolderName ||
                    (this.CardHolderName != null &&
                    this.CardHolderName.Equals(input.CardHolderName))
                ) && 
                (
                    this.AddressDataAddressLine == input.AddressDataAddressLine ||
                    (this.AddressDataAddressLine != null &&
                    this.AddressDataAddressLine.Equals(input.AddressDataAddressLine))
                ) && 
                (
                    this.AddressDataZip == input.AddressDataZip ||
                    (this.AddressDataZip != null &&
                    this.AddressDataZip.Equals(input.AddressDataZip))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.IsVerified == input.IsVerified ||
                    (this.IsVerified != null &&
                    this.IsVerified.Equals(input.IsVerified))
                ) && 
                (
                    this.ChangeSource == input.ChangeSource ||
                    (this.ChangeSource != null &&
                    this.ChangeSource.Equals(input.ChangeSource))
                ) && 
                (
                    this.AddressDataAddressLine2 == input.AddressDataAddressLine2 ||
                    (this.AddressDataAddressLine2 != null &&
                    this.AddressDataAddressLine2.Equals(input.AddressDataAddressLine2))
                ) && 
                (
                    this.AddressDataCity == input.AddressDataCity ||
                    (this.AddressDataCity != null &&
                    this.AddressDataCity.Equals(input.AddressDataCity))
                ) && 
                (
                    this.AddressDataCountryId == input.AddressDataCountryId ||
                    (this.AddressDataCountryId != null &&
                    this.AddressDataCountryId.Equals(input.AddressDataCountryId))
                ) && 
                (
                    this.AddressDataStateId == input.AddressDataStateId ||
                    (this.AddressDataStateId != null &&
                    this.AddressDataStateId.Equals(input.AddressDataStateId))
                ) && 
                (
                    this.AddressDataLegacyFullAddressLine == input.AddressDataLegacyFullAddressLine ||
                    (this.AddressDataLegacyFullAddressLine != null &&
                    this.AddressDataLegacyFullAddressLine.Equals(input.AddressDataLegacyFullAddressLine))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Installments == input.Installments ||
                    this.Installments != null &&
                    this.Installments.SequenceEqual(input.Installments)
                ) && 
                (
                    this.ReAuthorizations == input.ReAuthorizations ||
                    this.ReAuthorizations != null &&
                    this.ReAuthorizations.SequenceEqual(input.ReAuthorizations)
                ) && 
                (
                    this.AddressData == input.AddressData ||
                    (this.AddressData != null &&
                    this.AddressData.Equals(input.AddressData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CardId != null)
                    hashCode = hashCode * 59 + this.CardId.GetHashCode();
                if (this.ExpirationMonth != null)
                    hashCode = hashCode * 59 + this.ExpirationMonth.GetHashCode();
                if (this.ExpirationYear != null)
                    hashCode = hashCode * 59 + this.ExpirationYear.GetHashCode();
                if (this.CardHolderName != null)
                    hashCode = hashCode * 59 + this.CardHolderName.GetHashCode();
                if (this.AddressDataAddressLine != null)
                    hashCode = hashCode * 59 + this.AddressDataAddressLine.GetHashCode();
                if (this.AddressDataZip != null)
                    hashCode = hashCode * 59 + this.AddressDataZip.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.IsVerified != null)
                    hashCode = hashCode * 59 + this.IsVerified.GetHashCode();
                if (this.ChangeSource != null)
                    hashCode = hashCode * 59 + this.ChangeSource.GetHashCode();
                if (this.AddressDataAddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressDataAddressLine2.GetHashCode();
                if (this.AddressDataCity != null)
                    hashCode = hashCode * 59 + this.AddressDataCity.GetHashCode();
                if (this.AddressDataCountryId != null)
                    hashCode = hashCode * 59 + this.AddressDataCountryId.GetHashCode();
                if (this.AddressDataStateId != null)
                    hashCode = hashCode * 59 + this.AddressDataStateId.GetHashCode();
                if (this.AddressDataLegacyFullAddressLine != null)
                    hashCode = hashCode * 59 + this.AddressDataLegacyFullAddressLine.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Installments != null)
                    hashCode = hashCode * 59 + this.Installments.GetHashCode();
                if (this.ReAuthorizations != null)
                    hashCode = hashCode * 59 + this.ReAuthorizations.GetHashCode();
                if (this.AddressData != null)
                    hashCode = hashCode * 59 + this.AddressData.GetHashCode();
                return hashCode;
            }
        }
    }

}
