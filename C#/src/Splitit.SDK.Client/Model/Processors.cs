/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Processors
    /// </summary>
    [DataContract]
    public partial class Processors :  IEquatable<Processors>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Processors" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Processors() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Processors" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="apiUrl">apiUrl.</param>
        /// <param name="maxNumberOfRetries">maxNumberOfRetries (required).</param>
        /// <param name="timeoutSeconds">timeoutSeconds (required).</param>
        /// <param name="maxAuth">maxAuth (required).</param>
        /// <param name="gracePeriod">gracePeriod (required).</param>
        /// <param name="asyncRefundGracePeriodDays">asyncRefundGracePeriodDays.</param>
        /// <param name="isCheckedMastercard">isCheckedMastercard (required).</param>
        /// <param name="isCheckedUpi">isCheckedUpi (required).</param>
        /// <param name="isCheckedVisa">isCheckedVisa (required).</param>
        /// <param name="isCheckedAmex">isCheckedAmex (required).</param>
        /// <param name="isCheckedMaestro">isCheckedMaestro (required).</param>
        /// <param name="isCheckedJcb">isCheckedJcb (required).</param>
        /// <param name="isCheckedDiscover">isCheckedDiscover (required).</param>
        /// <param name="is3ds2Supported">is3ds2Supported (required).</param>
        /// <param name="gatewayApiassembly">gatewayApiassembly.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="gatewayApiimplementorNs">gatewayApiimplementorNs.</param>
        /// <param name="isTokenSupported">isTokenSupported (required).</param>
        /// <param name="consumerUpdateCcGracePeriod">consumerUpdateCcGracePeriod.</param>
        /// <param name="isVoidSupported">isVoidSupported (required).</param>
        /// <param name="isVoidAfterFailRefund">isVoidAfterFailRefund (required).</param>
        /// <param name="minAmountAllowedForAuth">minAmountAllowedForAuth (required).</param>
        /// <param name="captureDelayInSec">captureDelayInSec (required).</param>
        /// <param name="voidDelayInSec">voidDelayInSec (required).</param>
        /// <param name="allowPartialVoid">allowPartialVoid (required).</param>
        /// <param name="installments">installments.</param>
        /// <param name="processorAuthenticationParameters">processorAuthenticationParameters.</param>
        /// <param name="reAuthorizations">reAuthorizations.</param>
        /// <param name="terminalGatewayDatas">terminalGatewayDatas.</param>
        public Processors(long? id = default(long?), string name = default(string), string apiUrl = default(string), int? maxNumberOfRetries = default(int?), int? timeoutSeconds = default(int?), int? maxAuth = default(int?), int? gracePeriod = default(int?), int? asyncRefundGracePeriodDays = default(int?), bool? isCheckedMastercard = default(bool?), bool? isCheckedUpi = default(bool?), bool? isCheckedVisa = default(bool?), bool? isCheckedAmex = default(bool?), bool? isCheckedMaestro = default(bool?), bool? isCheckedJcb = default(bool?), bool? isCheckedDiscover = default(bool?), bool? is3ds2Supported = default(bool?), string gatewayApiassembly = default(string), string displayName = default(string), string gatewayApiimplementorNs = default(string), bool? isTokenSupported = default(bool?), string consumerUpdateCcGracePeriod = default(string), bool? isVoidSupported = default(bool?), bool? isVoidAfterFailRefund = default(bool?), decimal? minAmountAllowedForAuth = default(decimal?), int? captureDelayInSec = default(int?), int? voidDelayInSec = default(int?), bool? allowPartialVoid = default(bool?), List<Installments> installments = default(List<Installments>), List<ProcessorAuthenticationParameters> processorAuthenticationParameters = default(List<ProcessorAuthenticationParameters>), List<ReAuthorizations> reAuthorizations = default(List<ReAuthorizations>), List<TerminalGatewayDatas> terminalGatewayDatas = default(List<TerminalGatewayDatas>))
        {
            this.Id = id;
            this.MaxNumberOfRetries = maxNumberOfRetries;
            this.TimeoutSeconds = timeoutSeconds;
            this.MaxAuth = maxAuth;
            this.GracePeriod = gracePeriod;
            this.IsCheckedMastercard = isCheckedMastercard;
            this.IsCheckedUpi = isCheckedUpi;
            this.IsCheckedVisa = isCheckedVisa;
            this.IsCheckedAmex = isCheckedAmex;
            this.IsCheckedMaestro = isCheckedMaestro;
            this.IsCheckedJcb = isCheckedJcb;
            this.IsCheckedDiscover = isCheckedDiscover;
            this.Is3ds2Supported = is3ds2Supported;
            this.IsTokenSupported = isTokenSupported;
            this.IsVoidSupported = isVoidSupported;
            this.IsVoidAfterFailRefund = isVoidAfterFailRefund;
            this.MinAmountAllowedForAuth = minAmountAllowedForAuth;
            this.CaptureDelayInSec = captureDelayInSec;
            this.VoidDelayInSec = voidDelayInSec;
            this.AllowPartialVoid = allowPartialVoid;
            this.Name = name;
            this.ApiUrl = apiUrl;
            this.AsyncRefundGracePeriodDays = asyncRefundGracePeriodDays;
            this.GatewayApiassembly = gatewayApiassembly;
            this.DisplayName = displayName;
            this.GatewayApiimplementorNs = gatewayApiimplementorNs;
            this.ConsumerUpdateCcGracePeriod = consumerUpdateCcGracePeriod;
            this.Installments = installments;
            this.ProcessorAuthenticationParameters = processorAuthenticationParameters;
            this.ReAuthorizations = reAuthorizations;
            this.TerminalGatewayDatas = terminalGatewayDatas;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ApiUrl
        /// </summary>
        [DataMember(Name="ApiUrl", EmitDefaultValue=false)]
        public string ApiUrl { get; set; }

        /// <summary>
        /// Gets or Sets MaxNumberOfRetries
        /// </summary>
        [DataMember(Name="MaxNumberOfRetries", EmitDefaultValue=false)]
        public int? MaxNumberOfRetries { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutSeconds
        /// </summary>
        [DataMember(Name="TimeoutSeconds", EmitDefaultValue=false)]
        public int? TimeoutSeconds { get; set; }

        /// <summary>
        /// Gets or Sets MaxAuth
        /// </summary>
        [DataMember(Name="MaxAuth", EmitDefaultValue=false)]
        public int? MaxAuth { get; set; }

        /// <summary>
        /// Gets or Sets GracePeriod
        /// </summary>
        [DataMember(Name="GracePeriod", EmitDefaultValue=false)]
        public int? GracePeriod { get; set; }

        /// <summary>
        /// Gets or Sets AsyncRefundGracePeriodDays
        /// </summary>
        [DataMember(Name="AsyncRefundGracePeriodDays", EmitDefaultValue=false)]
        public int? AsyncRefundGracePeriodDays { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedMastercard
        /// </summary>
        [DataMember(Name="IsCheckedMastercard", EmitDefaultValue=false)]
        public bool? IsCheckedMastercard { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedUpi
        /// </summary>
        [DataMember(Name="IsCheckedUpi", EmitDefaultValue=false)]
        public bool? IsCheckedUpi { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedVisa
        /// </summary>
        [DataMember(Name="IsCheckedVisa", EmitDefaultValue=false)]
        public bool? IsCheckedVisa { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedAmex
        /// </summary>
        [DataMember(Name="IsCheckedAmex", EmitDefaultValue=false)]
        public bool? IsCheckedAmex { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedMaestro
        /// </summary>
        [DataMember(Name="IsCheckedMaestro", EmitDefaultValue=false)]
        public bool? IsCheckedMaestro { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedJcb
        /// </summary>
        [DataMember(Name="IsCheckedJcb", EmitDefaultValue=false)]
        public bool? IsCheckedJcb { get; set; }

        /// <summary>
        /// Gets or Sets IsCheckedDiscover
        /// </summary>
        [DataMember(Name="IsCheckedDiscover", EmitDefaultValue=false)]
        public bool? IsCheckedDiscover { get; set; }

        /// <summary>
        /// Gets or Sets Is3ds2Supported
        /// </summary>
        [DataMember(Name="Is3ds2Supported", EmitDefaultValue=false)]
        public bool? Is3ds2Supported { get; set; }

        /// <summary>
        /// Gets or Sets GatewayApiassembly
        /// </summary>
        [DataMember(Name="GatewayApiassembly", EmitDefaultValue=false)]
        public string GatewayApiassembly { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="DisplayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets GatewayApiimplementorNs
        /// </summary>
        [DataMember(Name="GatewayApiimplementorNs", EmitDefaultValue=false)]
        public string GatewayApiimplementorNs { get; set; }

        /// <summary>
        /// Gets or Sets IsTokenSupported
        /// </summary>
        [DataMember(Name="IsTokenSupported", EmitDefaultValue=false)]
        public bool? IsTokenSupported { get; set; }

        /// <summary>
        /// Gets or Sets ConsumerUpdateCcGracePeriod
        /// </summary>
        [DataMember(Name="ConsumerUpdateCcGracePeriod", EmitDefaultValue=false)]
        public string ConsumerUpdateCcGracePeriod { get; set; }

        /// <summary>
        /// Gets or Sets IsVoidSupported
        /// </summary>
        [DataMember(Name="IsVoidSupported", EmitDefaultValue=false)]
        public bool? IsVoidSupported { get; set; }

        /// <summary>
        /// Gets or Sets IsVoidAfterFailRefund
        /// </summary>
        [DataMember(Name="IsVoidAfterFailRefund", EmitDefaultValue=false)]
        public bool? IsVoidAfterFailRefund { get; set; }

        /// <summary>
        /// Gets or Sets MinAmountAllowedForAuth
        /// </summary>
        [DataMember(Name="MinAmountAllowedForAuth", EmitDefaultValue=false)]
        public decimal? MinAmountAllowedForAuth { get; set; }

        /// <summary>
        /// Gets or Sets CaptureDelayInSec
        /// </summary>
        [DataMember(Name="CaptureDelayInSec", EmitDefaultValue=false)]
        public int? CaptureDelayInSec { get; set; }

        /// <summary>
        /// Gets or Sets VoidDelayInSec
        /// </summary>
        [DataMember(Name="VoidDelayInSec", EmitDefaultValue=false)]
        public int? VoidDelayInSec { get; set; }

        /// <summary>
        /// Gets or Sets AllowPartialVoid
        /// </summary>
        [DataMember(Name="AllowPartialVoid", EmitDefaultValue=false)]
        public bool? AllowPartialVoid { get; set; }

        /// <summary>
        /// Gets or Sets Installments
        /// </summary>
        [DataMember(Name="Installments", EmitDefaultValue=false)]
        public List<Installments> Installments { get; set; }

        /// <summary>
        /// Gets or Sets ProcessorAuthenticationParameters
        /// </summary>
        [DataMember(Name="ProcessorAuthenticationParameters", EmitDefaultValue=false)]
        public List<ProcessorAuthenticationParameters> ProcessorAuthenticationParameters { get; set; }

        /// <summary>
        /// Gets or Sets ReAuthorizations
        /// </summary>
        [DataMember(Name="ReAuthorizations", EmitDefaultValue=false)]
        public List<ReAuthorizations> ReAuthorizations { get; set; }

        /// <summary>
        /// Gets or Sets TerminalGatewayDatas
        /// </summary>
        [DataMember(Name="TerminalGatewayDatas", EmitDefaultValue=false)]
        public List<TerminalGatewayDatas> TerminalGatewayDatas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Processors {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ApiUrl: ").Append(ApiUrl).Append("\n");
            sb.Append("  MaxNumberOfRetries: ").Append(MaxNumberOfRetries).Append("\n");
            sb.Append("  TimeoutSeconds: ").Append(TimeoutSeconds).Append("\n");
            sb.Append("  MaxAuth: ").Append(MaxAuth).Append("\n");
            sb.Append("  GracePeriod: ").Append(GracePeriod).Append("\n");
            sb.Append("  AsyncRefundGracePeriodDays: ").Append(AsyncRefundGracePeriodDays).Append("\n");
            sb.Append("  IsCheckedMastercard: ").Append(IsCheckedMastercard).Append("\n");
            sb.Append("  IsCheckedUpi: ").Append(IsCheckedUpi).Append("\n");
            sb.Append("  IsCheckedVisa: ").Append(IsCheckedVisa).Append("\n");
            sb.Append("  IsCheckedAmex: ").Append(IsCheckedAmex).Append("\n");
            sb.Append("  IsCheckedMaestro: ").Append(IsCheckedMaestro).Append("\n");
            sb.Append("  IsCheckedJcb: ").Append(IsCheckedJcb).Append("\n");
            sb.Append("  IsCheckedDiscover: ").Append(IsCheckedDiscover).Append("\n");
            sb.Append("  Is3ds2Supported: ").Append(Is3ds2Supported).Append("\n");
            sb.Append("  GatewayApiassembly: ").Append(GatewayApiassembly).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  GatewayApiimplementorNs: ").Append(GatewayApiimplementorNs).Append("\n");
            sb.Append("  IsTokenSupported: ").Append(IsTokenSupported).Append("\n");
            sb.Append("  ConsumerUpdateCcGracePeriod: ").Append(ConsumerUpdateCcGracePeriod).Append("\n");
            sb.Append("  IsVoidSupported: ").Append(IsVoidSupported).Append("\n");
            sb.Append("  IsVoidAfterFailRefund: ").Append(IsVoidAfterFailRefund).Append("\n");
            sb.Append("  MinAmountAllowedForAuth: ").Append(MinAmountAllowedForAuth).Append("\n");
            sb.Append("  CaptureDelayInSec: ").Append(CaptureDelayInSec).Append("\n");
            sb.Append("  VoidDelayInSec: ").Append(VoidDelayInSec).Append("\n");
            sb.Append("  AllowPartialVoid: ").Append(AllowPartialVoid).Append("\n");
            sb.Append("  Installments: ").Append(Installments).Append("\n");
            sb.Append("  ProcessorAuthenticationParameters: ").Append(ProcessorAuthenticationParameters).Append("\n");
            sb.Append("  ReAuthorizations: ").Append(ReAuthorizations).Append("\n");
            sb.Append("  TerminalGatewayDatas: ").Append(TerminalGatewayDatas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Processors);
        }

        /// <summary>
        /// Returns true if Processors instances are equal
        /// </summary>
        /// <param name="input">Instance of Processors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Processors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ApiUrl == input.ApiUrl ||
                    (this.ApiUrl != null &&
                    this.ApiUrl.Equals(input.ApiUrl))
                ) && 
                (
                    this.MaxNumberOfRetries == input.MaxNumberOfRetries ||
                    (this.MaxNumberOfRetries != null &&
                    this.MaxNumberOfRetries.Equals(input.MaxNumberOfRetries))
                ) && 
                (
                    this.TimeoutSeconds == input.TimeoutSeconds ||
                    (this.TimeoutSeconds != null &&
                    this.TimeoutSeconds.Equals(input.TimeoutSeconds))
                ) && 
                (
                    this.MaxAuth == input.MaxAuth ||
                    (this.MaxAuth != null &&
                    this.MaxAuth.Equals(input.MaxAuth))
                ) && 
                (
                    this.GracePeriod == input.GracePeriod ||
                    (this.GracePeriod != null &&
                    this.GracePeriod.Equals(input.GracePeriod))
                ) && 
                (
                    this.AsyncRefundGracePeriodDays == input.AsyncRefundGracePeriodDays ||
                    (this.AsyncRefundGracePeriodDays != null &&
                    this.AsyncRefundGracePeriodDays.Equals(input.AsyncRefundGracePeriodDays))
                ) && 
                (
                    this.IsCheckedMastercard == input.IsCheckedMastercard ||
                    (this.IsCheckedMastercard != null &&
                    this.IsCheckedMastercard.Equals(input.IsCheckedMastercard))
                ) && 
                (
                    this.IsCheckedUpi == input.IsCheckedUpi ||
                    (this.IsCheckedUpi != null &&
                    this.IsCheckedUpi.Equals(input.IsCheckedUpi))
                ) && 
                (
                    this.IsCheckedVisa == input.IsCheckedVisa ||
                    (this.IsCheckedVisa != null &&
                    this.IsCheckedVisa.Equals(input.IsCheckedVisa))
                ) && 
                (
                    this.IsCheckedAmex == input.IsCheckedAmex ||
                    (this.IsCheckedAmex != null &&
                    this.IsCheckedAmex.Equals(input.IsCheckedAmex))
                ) && 
                (
                    this.IsCheckedMaestro == input.IsCheckedMaestro ||
                    (this.IsCheckedMaestro != null &&
                    this.IsCheckedMaestro.Equals(input.IsCheckedMaestro))
                ) && 
                (
                    this.IsCheckedJcb == input.IsCheckedJcb ||
                    (this.IsCheckedJcb != null &&
                    this.IsCheckedJcb.Equals(input.IsCheckedJcb))
                ) && 
                (
                    this.IsCheckedDiscover == input.IsCheckedDiscover ||
                    (this.IsCheckedDiscover != null &&
                    this.IsCheckedDiscover.Equals(input.IsCheckedDiscover))
                ) && 
                (
                    this.Is3ds2Supported == input.Is3ds2Supported ||
                    (this.Is3ds2Supported != null &&
                    this.Is3ds2Supported.Equals(input.Is3ds2Supported))
                ) && 
                (
                    this.GatewayApiassembly == input.GatewayApiassembly ||
                    (this.GatewayApiassembly != null &&
                    this.GatewayApiassembly.Equals(input.GatewayApiassembly))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.GatewayApiimplementorNs == input.GatewayApiimplementorNs ||
                    (this.GatewayApiimplementorNs != null &&
                    this.GatewayApiimplementorNs.Equals(input.GatewayApiimplementorNs))
                ) && 
                (
                    this.IsTokenSupported == input.IsTokenSupported ||
                    (this.IsTokenSupported != null &&
                    this.IsTokenSupported.Equals(input.IsTokenSupported))
                ) && 
                (
                    this.ConsumerUpdateCcGracePeriod == input.ConsumerUpdateCcGracePeriod ||
                    (this.ConsumerUpdateCcGracePeriod != null &&
                    this.ConsumerUpdateCcGracePeriod.Equals(input.ConsumerUpdateCcGracePeriod))
                ) && 
                (
                    this.IsVoidSupported == input.IsVoidSupported ||
                    (this.IsVoidSupported != null &&
                    this.IsVoidSupported.Equals(input.IsVoidSupported))
                ) && 
                (
                    this.IsVoidAfterFailRefund == input.IsVoidAfterFailRefund ||
                    (this.IsVoidAfterFailRefund != null &&
                    this.IsVoidAfterFailRefund.Equals(input.IsVoidAfterFailRefund))
                ) && 
                (
                    this.MinAmountAllowedForAuth == input.MinAmountAllowedForAuth ||
                    (this.MinAmountAllowedForAuth != null &&
                    this.MinAmountAllowedForAuth.Equals(input.MinAmountAllowedForAuth))
                ) && 
                (
                    this.CaptureDelayInSec == input.CaptureDelayInSec ||
                    (this.CaptureDelayInSec != null &&
                    this.CaptureDelayInSec.Equals(input.CaptureDelayInSec))
                ) && 
                (
                    this.VoidDelayInSec == input.VoidDelayInSec ||
                    (this.VoidDelayInSec != null &&
                    this.VoidDelayInSec.Equals(input.VoidDelayInSec))
                ) && 
                (
                    this.AllowPartialVoid == input.AllowPartialVoid ||
                    (this.AllowPartialVoid != null &&
                    this.AllowPartialVoid.Equals(input.AllowPartialVoid))
                ) && 
                (
                    this.Installments == input.Installments ||
                    this.Installments != null &&
                    this.Installments.SequenceEqual(input.Installments)
                ) && 
                (
                    this.ProcessorAuthenticationParameters == input.ProcessorAuthenticationParameters ||
                    this.ProcessorAuthenticationParameters != null &&
                    this.ProcessorAuthenticationParameters.SequenceEqual(input.ProcessorAuthenticationParameters)
                ) && 
                (
                    this.ReAuthorizations == input.ReAuthorizations ||
                    this.ReAuthorizations != null &&
                    this.ReAuthorizations.SequenceEqual(input.ReAuthorizations)
                ) && 
                (
                    this.TerminalGatewayDatas == input.TerminalGatewayDatas ||
                    this.TerminalGatewayDatas != null &&
                    this.TerminalGatewayDatas.SequenceEqual(input.TerminalGatewayDatas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ApiUrl != null)
                    hashCode = hashCode * 59 + this.ApiUrl.GetHashCode();
                if (this.MaxNumberOfRetries != null)
                    hashCode = hashCode * 59 + this.MaxNumberOfRetries.GetHashCode();
                if (this.TimeoutSeconds != null)
                    hashCode = hashCode * 59 + this.TimeoutSeconds.GetHashCode();
                if (this.MaxAuth != null)
                    hashCode = hashCode * 59 + this.MaxAuth.GetHashCode();
                if (this.GracePeriod != null)
                    hashCode = hashCode * 59 + this.GracePeriod.GetHashCode();
                if (this.AsyncRefundGracePeriodDays != null)
                    hashCode = hashCode * 59 + this.AsyncRefundGracePeriodDays.GetHashCode();
                if (this.IsCheckedMastercard != null)
                    hashCode = hashCode * 59 + this.IsCheckedMastercard.GetHashCode();
                if (this.IsCheckedUpi != null)
                    hashCode = hashCode * 59 + this.IsCheckedUpi.GetHashCode();
                if (this.IsCheckedVisa != null)
                    hashCode = hashCode * 59 + this.IsCheckedVisa.GetHashCode();
                if (this.IsCheckedAmex != null)
                    hashCode = hashCode * 59 + this.IsCheckedAmex.GetHashCode();
                if (this.IsCheckedMaestro != null)
                    hashCode = hashCode * 59 + this.IsCheckedMaestro.GetHashCode();
                if (this.IsCheckedJcb != null)
                    hashCode = hashCode * 59 + this.IsCheckedJcb.GetHashCode();
                if (this.IsCheckedDiscover != null)
                    hashCode = hashCode * 59 + this.IsCheckedDiscover.GetHashCode();
                if (this.Is3ds2Supported != null)
                    hashCode = hashCode * 59 + this.Is3ds2Supported.GetHashCode();
                if (this.GatewayApiassembly != null)
                    hashCode = hashCode * 59 + this.GatewayApiassembly.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.GatewayApiimplementorNs != null)
                    hashCode = hashCode * 59 + this.GatewayApiimplementorNs.GetHashCode();
                if (this.IsTokenSupported != null)
                    hashCode = hashCode * 59 + this.IsTokenSupported.GetHashCode();
                if (this.ConsumerUpdateCcGracePeriod != null)
                    hashCode = hashCode * 59 + this.ConsumerUpdateCcGracePeriod.GetHashCode();
                if (this.IsVoidSupported != null)
                    hashCode = hashCode * 59 + this.IsVoidSupported.GetHashCode();
                if (this.IsVoidAfterFailRefund != null)
                    hashCode = hashCode * 59 + this.IsVoidAfterFailRefund.GetHashCode();
                if (this.MinAmountAllowedForAuth != null)
                    hashCode = hashCode * 59 + this.MinAmountAllowedForAuth.GetHashCode();
                if (this.CaptureDelayInSec != null)
                    hashCode = hashCode * 59 + this.CaptureDelayInSec.GetHashCode();
                if (this.VoidDelayInSec != null)
                    hashCode = hashCode * 59 + this.VoidDelayInSec.GetHashCode();
                if (this.AllowPartialVoid != null)
                    hashCode = hashCode * 59 + this.AllowPartialVoid.GetHashCode();
                if (this.Installments != null)
                    hashCode = hashCode * 59 + this.Installments.GetHashCode();
                if (this.ProcessorAuthenticationParameters != null)
                    hashCode = hashCode * 59 + this.ProcessorAuthenticationParameters.GetHashCode();
                if (this.ReAuthorizations != null)
                    hashCode = hashCode * 59 + this.ReAuthorizations.GetHashCode();
                if (this.TerminalGatewayDatas != null)
                    hashCode = hashCode * 59 + this.TerminalGatewayDatas.GetHashCode();
                return hashCode;
            }
        }
    }

}
