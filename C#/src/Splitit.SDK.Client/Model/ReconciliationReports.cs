/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// ReconciliationReports
    /// </summary>
    [DataContract]
    public partial class ReconciliationReports :  IEquatable<ReconciliationReports>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationReports" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReconciliationReports() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReconciliationReports" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="from">from (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="terminalId">terminalId (required).</param>
        /// <param name="isIdentical">isIdentical (required).</param>
        /// <param name="isDaily">isDaily (required).</param>
        /// <param name="terminal">terminal.</param>
        /// <param name="reconciliationReportItems">reconciliationReportItems.</param>
        public ReconciliationReports(long? id = default(long?), DateTime? from = default(DateTime?), DateTime? to = default(DateTime?), long? terminalId = default(long?), bool? isIdentical = default(bool?), bool? isDaily = default(bool?), Terminals terminal = default(Terminals), List<ReconciliationReportItems> reconciliationReportItems = default(List<ReconciliationReportItems>))
        {
            this.Id = id;
            this.From = from;
            this.To = to;
            this.TerminalId = terminalId;
            this.IsIdentical = isIdentical;
            this.IsDaily = isDaily;
            this.Terminal = terminal;
            this.ReconciliationReportItems = reconciliationReportItems;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public DateTime? From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public DateTime? To { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="TerminalId", EmitDefaultValue=false)]
        public long? TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets IsIdentical
        /// </summary>
        [DataMember(Name="IsIdentical", EmitDefaultValue=false)]
        public bool? IsIdentical { get; set; }

        /// <summary>
        /// Gets or Sets IsDaily
        /// </summary>
        [DataMember(Name="IsDaily", EmitDefaultValue=false)]
        public bool? IsDaily { get; set; }

        /// <summary>
        /// Gets or Sets Terminal
        /// </summary>
        [DataMember(Name="Terminal", EmitDefaultValue=false)]
        public Terminals Terminal { get; set; }

        /// <summary>
        /// Gets or Sets ReconciliationReportItems
        /// </summary>
        [DataMember(Name="ReconciliationReportItems", EmitDefaultValue=false)]
        public List<ReconciliationReportItems> ReconciliationReportItems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReconciliationReports {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  IsIdentical: ").Append(IsIdentical).Append("\n");
            sb.Append("  IsDaily: ").Append(IsDaily).Append("\n");
            sb.Append("  Terminal: ").Append(Terminal).Append("\n");
            sb.Append("  ReconciliationReportItems: ").Append(ReconciliationReportItems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReconciliationReports);
        }

        /// <summary>
        /// Returns true if ReconciliationReports instances are equal
        /// </summary>
        /// <param name="input">Instance of ReconciliationReports to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReconciliationReports input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.IsIdentical == input.IsIdentical ||
                    (this.IsIdentical != null &&
                    this.IsIdentical.Equals(input.IsIdentical))
                ) && 
                (
                    this.IsDaily == input.IsDaily ||
                    (this.IsDaily != null &&
                    this.IsDaily.Equals(input.IsDaily))
                ) && 
                (
                    this.Terminal == input.Terminal ||
                    (this.Terminal != null &&
                    this.Terminal.Equals(input.Terminal))
                ) && 
                (
                    this.ReconciliationReportItems == input.ReconciliationReportItems ||
                    this.ReconciliationReportItems != null &&
                    this.ReconciliationReportItems.SequenceEqual(input.ReconciliationReportItems)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.IsIdentical != null)
                    hashCode = hashCode * 59 + this.IsIdentical.GetHashCode();
                if (this.IsDaily != null)
                    hashCode = hashCode * 59 + this.IsDaily.GetHashCode();
                if (this.Terminal != null)
                    hashCode = hashCode * 59 + this.Terminal.GetHashCode();
                if (this.ReconciliationReportItems != null)
                    hashCode = hashCode * 59 + this.ReconciliationReportItems.GetHashCode();
                return hashCode;
            }
        }
    }

}
