/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Countries
    /// </summary>
    [DataContract]
    public partial class Countries :  IEquatable<Countries>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Countries" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Countries() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Countries" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="isoName">isoName.</param>
        /// <param name="isoNumber">isoNumber (required).</param>
        /// <param name="isoA2">isoA2.</param>
        /// <param name="isoA3">isoA3.</param>
        /// <param name="continent">continent.</param>
        /// <param name="utcTimeOffsetInMins">utcTimeOffsetInMins (required).</param>
        /// <param name="isZipUsed">isZipUsed.</param>
        /// <param name="binDataItems">binDataItems.</param>
        /// <param name="countrySubdivisions">countrySubdivisions.</param>
        /// <param name="terminalCountries">terminalCountries.</param>
        /// <param name="currencyCountries">currencyCountries.</param>
        public Countries(long? id = default(long?), string isoName = default(string), int? isoNumber = default(int?), string isoA2 = default(string), string isoA3 = default(string), string continent = default(string), int? utcTimeOffsetInMins = default(int?), bool? isZipUsed = default(bool?), List<BinDataItems> binDataItems = default(List<BinDataItems>), List<CountrySubdivisions> countrySubdivisions = default(List<CountrySubdivisions>), List<TerminalCountries> terminalCountries = default(List<TerminalCountries>), List<CurrencyCountries> currencyCountries = default(List<CurrencyCountries>))
        {
            this.Id = id;
            this.IsoNumber = isoNumber;
            this.UtcTimeOffsetInMins = utcTimeOffsetInMins;
            this.IsoName = isoName;
            this.IsoA2 = isoA2;
            this.IsoA3 = isoA3;
            this.Continent = continent;
            this.IsZipUsed = isZipUsed;
            this.BinDataItems = binDataItems;
            this.CountrySubdivisions = countrySubdivisions;
            this.TerminalCountries = terminalCountries;
            this.CurrencyCountries = currencyCountries;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets IsoName
        /// </summary>
        [DataMember(Name="IsoName", EmitDefaultValue=false)]
        public string IsoName { get; set; }

        /// <summary>
        /// Gets or Sets IsoNumber
        /// </summary>
        [DataMember(Name="IsoNumber", EmitDefaultValue=false)]
        public int? IsoNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsoA2
        /// </summary>
        [DataMember(Name="IsoA2", EmitDefaultValue=false)]
        public string IsoA2 { get; set; }

        /// <summary>
        /// Gets or Sets IsoA3
        /// </summary>
        [DataMember(Name="IsoA3", EmitDefaultValue=false)]
        public string IsoA3 { get; set; }

        /// <summary>
        /// Gets or Sets Continent
        /// </summary>
        [DataMember(Name="Continent", EmitDefaultValue=false)]
        public string Continent { get; set; }

        /// <summary>
        /// Gets or Sets UtcTimeOffsetInMins
        /// </summary>
        [DataMember(Name="UtcTimeOffsetInMins", EmitDefaultValue=false)]
        public int? UtcTimeOffsetInMins { get; set; }

        /// <summary>
        /// Gets or Sets IsZipUsed
        /// </summary>
        [DataMember(Name="IsZipUsed", EmitDefaultValue=false)]
        public bool? IsZipUsed { get; set; }

        /// <summary>
        /// Gets or Sets BinDataItems
        /// </summary>
        [DataMember(Name="BinDataItems", EmitDefaultValue=false)]
        public List<BinDataItems> BinDataItems { get; set; }

        /// <summary>
        /// Gets or Sets CountrySubdivisions
        /// </summary>
        [DataMember(Name="CountrySubdivisions", EmitDefaultValue=false)]
        public List<CountrySubdivisions> CountrySubdivisions { get; set; }

        /// <summary>
        /// Gets or Sets TerminalCountries
        /// </summary>
        [DataMember(Name="TerminalCountries", EmitDefaultValue=false)]
        public List<TerminalCountries> TerminalCountries { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyCountries
        /// </summary>
        [DataMember(Name="CurrencyCountries", EmitDefaultValue=false)]
        public List<CurrencyCountries> CurrencyCountries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Countries {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsoName: ").Append(IsoName).Append("\n");
            sb.Append("  IsoNumber: ").Append(IsoNumber).Append("\n");
            sb.Append("  IsoA2: ").Append(IsoA2).Append("\n");
            sb.Append("  IsoA3: ").Append(IsoA3).Append("\n");
            sb.Append("  Continent: ").Append(Continent).Append("\n");
            sb.Append("  UtcTimeOffsetInMins: ").Append(UtcTimeOffsetInMins).Append("\n");
            sb.Append("  IsZipUsed: ").Append(IsZipUsed).Append("\n");
            sb.Append("  BinDataItems: ").Append(BinDataItems).Append("\n");
            sb.Append("  CountrySubdivisions: ").Append(CountrySubdivisions).Append("\n");
            sb.Append("  TerminalCountries: ").Append(TerminalCountries).Append("\n");
            sb.Append("  CurrencyCountries: ").Append(CurrencyCountries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Countries);
        }

        /// <summary>
        /// Returns true if Countries instances are equal
        /// </summary>
        /// <param name="input">Instance of Countries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Countries input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsoName == input.IsoName ||
                    (this.IsoName != null &&
                    this.IsoName.Equals(input.IsoName))
                ) && 
                (
                    this.IsoNumber == input.IsoNumber ||
                    (this.IsoNumber != null &&
                    this.IsoNumber.Equals(input.IsoNumber))
                ) && 
                (
                    this.IsoA2 == input.IsoA2 ||
                    (this.IsoA2 != null &&
                    this.IsoA2.Equals(input.IsoA2))
                ) && 
                (
                    this.IsoA3 == input.IsoA3 ||
                    (this.IsoA3 != null &&
                    this.IsoA3.Equals(input.IsoA3))
                ) && 
                (
                    this.Continent == input.Continent ||
                    (this.Continent != null &&
                    this.Continent.Equals(input.Continent))
                ) && 
                (
                    this.UtcTimeOffsetInMins == input.UtcTimeOffsetInMins ||
                    (this.UtcTimeOffsetInMins != null &&
                    this.UtcTimeOffsetInMins.Equals(input.UtcTimeOffsetInMins))
                ) && 
                (
                    this.IsZipUsed == input.IsZipUsed ||
                    (this.IsZipUsed != null &&
                    this.IsZipUsed.Equals(input.IsZipUsed))
                ) && 
                (
                    this.BinDataItems == input.BinDataItems ||
                    this.BinDataItems != null &&
                    this.BinDataItems.SequenceEqual(input.BinDataItems)
                ) && 
                (
                    this.CountrySubdivisions == input.CountrySubdivisions ||
                    this.CountrySubdivisions != null &&
                    this.CountrySubdivisions.SequenceEqual(input.CountrySubdivisions)
                ) && 
                (
                    this.TerminalCountries == input.TerminalCountries ||
                    this.TerminalCountries != null &&
                    this.TerminalCountries.SequenceEqual(input.TerminalCountries)
                ) && 
                (
                    this.CurrencyCountries == input.CurrencyCountries ||
                    this.CurrencyCountries != null &&
                    this.CurrencyCountries.SequenceEqual(input.CurrencyCountries)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsoName != null)
                    hashCode = hashCode * 59 + this.IsoName.GetHashCode();
                if (this.IsoNumber != null)
                    hashCode = hashCode * 59 + this.IsoNumber.GetHashCode();
                if (this.IsoA2 != null)
                    hashCode = hashCode * 59 + this.IsoA2.GetHashCode();
                if (this.IsoA3 != null)
                    hashCode = hashCode * 59 + this.IsoA3.GetHashCode();
                if (this.Continent != null)
                    hashCode = hashCode * 59 + this.Continent.GetHashCode();
                if (this.UtcTimeOffsetInMins != null)
                    hashCode = hashCode * 59 + this.UtcTimeOffsetInMins.GetHashCode();
                if (this.IsZipUsed != null)
                    hashCode = hashCode * 59 + this.IsZipUsed.GetHashCode();
                if (this.BinDataItems != null)
                    hashCode = hashCode * 59 + this.BinDataItems.GetHashCode();
                if (this.CountrySubdivisions != null)
                    hashCode = hashCode * 59 + this.CountrySubdivisions.GetHashCode();
                if (this.TerminalCountries != null)
                    hashCode = hashCode * 59 + this.TerminalCountries.GetHashCode();
                if (this.CurrencyCountries != null)
                    hashCode = hashCode * 59 + this.CurrencyCountries.GetHashCode();
                return hashCode;
            }
        }
    }

}
