/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// InstallmentPlanEventSubscriberRecords
    /// </summary>
    [DataContract]
    public partial class InstallmentPlanEventSubscriberRecords :  IEquatable<InstallmentPlanEventSubscriberRecords>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanEventSubscriberRecords" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlanEventSubscriberRecords() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanEventSubscriberRecords" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="installmentPlanEventId">installmentPlanEventId (required).</param>
        /// <param name="serializedInstallmentPlanEventMessage">serializedInstallmentPlanEventMessage.</param>
        /// <param name="isAcknowledged">isAcknowledged (required).</param>
        /// <param name="subscriberType">subscriberType.</param>
        /// <param name="installmentPlanEvent">installmentPlanEvent.</param>
        /// <param name="installmentPlanEventSubscriberRecordSendLogs">installmentPlanEventSubscriberRecordSendLogs.</param>
        public InstallmentPlanEventSubscriberRecords(long? id = default(long?), long? installmentPlanEventId = default(long?), string serializedInstallmentPlanEventMessage = default(string), bool? isAcknowledged = default(bool?), string subscriberType = default(string), InstallmentPlanEvents installmentPlanEvent = default(InstallmentPlanEvents), List<InstallmentPlanEventSubscriberRecordSendLogs> installmentPlanEventSubscriberRecordSendLogs = default(List<InstallmentPlanEventSubscriberRecordSendLogs>))
        {
            this.Id = id;
            this.InstallmentPlanEventId = installmentPlanEventId;
            this.IsAcknowledged = isAcknowledged;
            this.SerializedInstallmentPlanEventMessage = serializedInstallmentPlanEventMessage;
            this.SubscriberType = subscriberType;
            this.InstallmentPlanEvent = installmentPlanEvent;
            this.InstallmentPlanEventSubscriberRecordSendLogs = installmentPlanEventSubscriberRecordSendLogs;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEventId
        /// </summary>
        [DataMember(Name="InstallmentPlanEventId", EmitDefaultValue=false)]
        public long? InstallmentPlanEventId { get; set; }

        /// <summary>
        /// Gets or Sets SerializedInstallmentPlanEventMessage
        /// </summary>
        [DataMember(Name="SerializedInstallmentPlanEventMessage", EmitDefaultValue=false)]
        public string SerializedInstallmentPlanEventMessage { get; set; }

        /// <summary>
        /// Gets or Sets IsAcknowledged
        /// </summary>
        [DataMember(Name="IsAcknowledged", EmitDefaultValue=false)]
        public bool? IsAcknowledged { get; set; }

        /// <summary>
        /// Gets or Sets SubscriberType
        /// </summary>
        [DataMember(Name="SubscriberType", EmitDefaultValue=false)]
        public string SubscriberType { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEvent
        /// </summary>
        [DataMember(Name="InstallmentPlanEvent", EmitDefaultValue=false)]
        public InstallmentPlanEvents InstallmentPlanEvent { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanEventSubscriberRecordSendLogs
        /// </summary>
        [DataMember(Name="InstallmentPlanEventSubscriberRecordSendLogs", EmitDefaultValue=false)]
        public List<InstallmentPlanEventSubscriberRecordSendLogs> InstallmentPlanEventSubscriberRecordSendLogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentPlanEventSubscriberRecords {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallmentPlanEventId: ").Append(InstallmentPlanEventId).Append("\n");
            sb.Append("  SerializedInstallmentPlanEventMessage: ").Append(SerializedInstallmentPlanEventMessage).Append("\n");
            sb.Append("  IsAcknowledged: ").Append(IsAcknowledged).Append("\n");
            sb.Append("  SubscriberType: ").Append(SubscriberType).Append("\n");
            sb.Append("  InstallmentPlanEvent: ").Append(InstallmentPlanEvent).Append("\n");
            sb.Append("  InstallmentPlanEventSubscriberRecordSendLogs: ").Append(InstallmentPlanEventSubscriberRecordSendLogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlanEventSubscriberRecords);
        }

        /// <summary>
        /// Returns true if InstallmentPlanEventSubscriberRecords instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlanEventSubscriberRecords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlanEventSubscriberRecords input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallmentPlanEventId == input.InstallmentPlanEventId ||
                    (this.InstallmentPlanEventId != null &&
                    this.InstallmentPlanEventId.Equals(input.InstallmentPlanEventId))
                ) && 
                (
                    this.SerializedInstallmentPlanEventMessage == input.SerializedInstallmentPlanEventMessage ||
                    (this.SerializedInstallmentPlanEventMessage != null &&
                    this.SerializedInstallmentPlanEventMessage.Equals(input.SerializedInstallmentPlanEventMessage))
                ) && 
                (
                    this.IsAcknowledged == input.IsAcknowledged ||
                    (this.IsAcknowledged != null &&
                    this.IsAcknowledged.Equals(input.IsAcknowledged))
                ) && 
                (
                    this.SubscriberType == input.SubscriberType ||
                    (this.SubscriberType != null &&
                    this.SubscriberType.Equals(input.SubscriberType))
                ) && 
                (
                    this.InstallmentPlanEvent == input.InstallmentPlanEvent ||
                    (this.InstallmentPlanEvent != null &&
                    this.InstallmentPlanEvent.Equals(input.InstallmentPlanEvent))
                ) && 
                (
                    this.InstallmentPlanEventSubscriberRecordSendLogs == input.InstallmentPlanEventSubscriberRecordSendLogs ||
                    this.InstallmentPlanEventSubscriberRecordSendLogs != null &&
                    this.InstallmentPlanEventSubscriberRecordSendLogs.SequenceEqual(input.InstallmentPlanEventSubscriberRecordSendLogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallmentPlanEventId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEventId.GetHashCode();
                if (this.SerializedInstallmentPlanEventMessage != null)
                    hashCode = hashCode * 59 + this.SerializedInstallmentPlanEventMessage.GetHashCode();
                if (this.IsAcknowledged != null)
                    hashCode = hashCode * 59 + this.IsAcknowledged.GetHashCode();
                if (this.SubscriberType != null)
                    hashCode = hashCode * 59 + this.SubscriberType.GetHashCode();
                if (this.InstallmentPlanEvent != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEvent.GetHashCode();
                if (this.InstallmentPlanEventSubscriberRecordSendLogs != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanEventSubscriberRecordSendLogs.GetHashCode();
                return hashCode;
            }
        }
    }

}
