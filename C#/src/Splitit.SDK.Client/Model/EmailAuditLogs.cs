/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// EmailAuditLogs
    /// </summary>
    [DataContract]
    public partial class EmailAuditLogs :  IEquatable<EmailAuditLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAuditLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailAuditLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailAuditLogs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="installmentPlanId">installmentPlanId.</param>
        /// <param name="userUniqueId">userUniqueId.</param>
        /// <param name="userId">userId.</param>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="externalIdentifier">externalIdentifier.</param>
        /// <param name="installmentPlan">installmentPlan.</param>
        /// <param name="userType">userType.</param>
        /// <param name="emailType">emailType (required).</param>
        /// <param name="emailHtmlBodyFilename">emailHtmlBodyFilename.</param>
        public EmailAuditLogs(long? id = default(long?), long? installmentPlanId = default(long?), string userUniqueId = default(string), long? userId = default(long?), string emailAddress = default(string), string externalIdentifier = default(string), InstallmentPlans installmentPlan = default(InstallmentPlans), UserType userType = default(UserType), SystemEmailsTypes emailType = default(SystemEmailsTypes), string emailHtmlBodyFilename = default(string))
        {
            this.Id = id;
            this.EmailType = emailType;
            this.InstallmentPlanId = installmentPlanId;
            this.UserUniqueId = userUniqueId;
            this.UserId = userId;
            this.EmailAddress = emailAddress;
            this.ExternalIdentifier = externalIdentifier;
            this.InstallmentPlan = installmentPlan;
            this.UserType = userType;
            this.EmailHtmlBodyFilename = emailHtmlBodyFilename;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanId
        /// </summary>
        [DataMember(Name="InstallmentPlanId", EmitDefaultValue=false)]
        public long? InstallmentPlanId { get; set; }

        /// <summary>
        /// Gets or Sets UserUniqueId
        /// </summary>
        [DataMember(Name="UserUniqueId", EmitDefaultValue=false)]
        public string UserUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name="EmailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Gets or Sets ExternalIdentifier
        /// </summary>
        [DataMember(Name="ExternalIdentifier", EmitDefaultValue=false)]
        public string ExternalIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlan
        /// </summary>
        [DataMember(Name="InstallmentPlan", EmitDefaultValue=false)]
        public InstallmentPlans InstallmentPlan { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public UserType UserType { get; set; }

        /// <summary>
        /// Gets or Sets EmailType
        /// </summary>
        [DataMember(Name="EmailType", EmitDefaultValue=false)]
        public SystemEmailsTypes EmailType { get; set; }

        /// <summary>
        /// Gets or Sets EmailHtmlBodyFilename
        /// </summary>
        [DataMember(Name="EmailHtmlBodyFilename", EmitDefaultValue=false)]
        public string EmailHtmlBodyFilename { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EmailAuditLogs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InstallmentPlanId: ").Append(InstallmentPlanId).Append("\n");
            sb.Append("  UserUniqueId: ").Append(UserUniqueId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  ExternalIdentifier: ").Append(ExternalIdentifier).Append("\n");
            sb.Append("  InstallmentPlan: ").Append(InstallmentPlan).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  EmailType: ").Append(EmailType).Append("\n");
            sb.Append("  EmailHtmlBodyFilename: ").Append(EmailHtmlBodyFilename).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmailAuditLogs);
        }

        /// <summary>
        /// Returns true if EmailAuditLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of EmailAuditLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmailAuditLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InstallmentPlanId == input.InstallmentPlanId ||
                    (this.InstallmentPlanId != null &&
                    this.InstallmentPlanId.Equals(input.InstallmentPlanId))
                ) && 
                (
                    this.UserUniqueId == input.UserUniqueId ||
                    (this.UserUniqueId != null &&
                    this.UserUniqueId.Equals(input.UserUniqueId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.ExternalIdentifier == input.ExternalIdentifier ||
                    (this.ExternalIdentifier != null &&
                    this.ExternalIdentifier.Equals(input.ExternalIdentifier))
                ) && 
                (
                    this.InstallmentPlan == input.InstallmentPlan ||
                    (this.InstallmentPlan != null &&
                    this.InstallmentPlan.Equals(input.InstallmentPlan))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.EmailType == input.EmailType ||
                    (this.EmailType != null &&
                    this.EmailType.Equals(input.EmailType))
                ) && 
                (
                    this.EmailHtmlBodyFilename == input.EmailHtmlBodyFilename ||
                    (this.EmailHtmlBodyFilename != null &&
                    this.EmailHtmlBodyFilename.Equals(input.EmailHtmlBodyFilename))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InstallmentPlanId != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanId.GetHashCode();
                if (this.UserUniqueId != null)
                    hashCode = hashCode * 59 + this.UserUniqueId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.EmailAddress != null)
                    hashCode = hashCode * 59 + this.EmailAddress.GetHashCode();
                if (this.ExternalIdentifier != null)
                    hashCode = hashCode * 59 + this.ExternalIdentifier.GetHashCode();
                if (this.InstallmentPlan != null)
                    hashCode = hashCode * 59 + this.InstallmentPlan.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.EmailType != null)
                    hashCode = hashCode * 59 + this.EmailType.GetHashCode();
                if (this.EmailHtmlBodyFilename != null)
                    hashCode = hashCode * 59 + this.EmailHtmlBodyFilename.GetHashCode();
                return hashCode;
            }
        }
    }

}
