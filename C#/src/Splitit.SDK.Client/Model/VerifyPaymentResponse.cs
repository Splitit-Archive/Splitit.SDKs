/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// VerifyPaymentResponse
    /// </summary>
    [DataContract]
    public partial class VerifyPaymentResponse :  IEquatable<VerifyPaymentResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyPaymentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VerifyPaymentResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyPaymentResponse" /> class.
        /// </summary>
        /// <param name="responseHeader">responseHeader.</param>
        /// <param name="isPaid">isPaid (required).</param>
        /// <param name="originalAmountPaid">originalAmountPaid.</param>
        public VerifyPaymentResponse(ResponseHeader responseHeader = default(ResponseHeader), bool? isPaid = default(bool?), decimal? originalAmountPaid = default(decimal?))
        {
            // to ensure "isPaid" is required (not null)
            if (isPaid == null)
            {
                throw new InvalidDataException("isPaid is a required property for VerifyPaymentResponse and cannot be null");
            }
            else
            {
                this.IsPaid = isPaid;
            }
            this.ResponseHeader = responseHeader;
            this.OriginalAmountPaid = originalAmountPaid;
        }

        
        /// <summary>
        /// Gets or Sets ResponseHeader
        /// </summary>
        [DataMember(Name="ResponseHeader", EmitDefaultValue=false)]
        public ResponseHeader ResponseHeader { get; set; }

        /// <summary>
        /// Gets or Sets IsPaid
        /// </summary>
        [DataMember(Name="IsPaid", EmitDefaultValue=false)]
        public bool? IsPaid { get; set; }

        /// <summary>
        /// Gets or Sets OriginalAmountPaid
        /// </summary>
        [DataMember(Name="OriginalAmountPaid", EmitDefaultValue=false)]
        public decimal? OriginalAmountPaid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyPaymentResponse {\n");
            sb.Append("  ResponseHeader: ").Append(ResponseHeader).Append("\n");
            sb.Append("  IsPaid: ").Append(IsPaid).Append("\n");
            sb.Append("  OriginalAmountPaid: ").Append(OriginalAmountPaid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyPaymentResponse);
        }

        /// <summary>
        /// Returns true if VerifyPaymentResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyPaymentResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyPaymentResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseHeader == input.ResponseHeader ||
                    (this.ResponseHeader != null &&
                    this.ResponseHeader.Equals(input.ResponseHeader))
                ) && 
                (
                    this.IsPaid == input.IsPaid ||
                    (this.IsPaid != null &&
                    this.IsPaid.Equals(input.IsPaid))
                ) && 
                (
                    this.OriginalAmountPaid == input.OriginalAmountPaid ||
                    (this.OriginalAmountPaid != null &&
                    this.OriginalAmountPaid.Equals(input.OriginalAmountPaid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseHeader != null)
                    hashCode = hashCode * 59 + this.ResponseHeader.GetHashCode();
                if (this.IsPaid != null)
                    hashCode = hashCode * 59 + this.IsPaid.GetHashCode();
                if (this.OriginalAmountPaid != null)
                    hashCode = hashCode * 59 + this.OriginalAmountPaid.GetHashCode();
                return hashCode;
            }
        }
    }

}
