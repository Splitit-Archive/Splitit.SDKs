/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// Roles
    /// </summary>
    [DataContract]
    public partial class Roles :  IEquatable<Roles>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Roles" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Roles() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Roles" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="name">name.</param>
        /// <param name="roleStrength">roleStrength (required).</param>
        /// <param name="businessParty">businessParty (required).</param>
        /// <param name="businessActivities">businessActivities.</param>
        /// <param name="businessActivitiesSerialized">businessActivitiesSerialized.</param>
        public Roles(long? id = default(long?), string name = default(string), int? roleStrength = default(int?), BusinessParty businessParty = default(BusinessParty), List<BusinessActivity> businessActivities = default(List<BusinessActivity>), string businessActivitiesSerialized = default(string))
        {
            this.Id = id;
            this.RoleStrength = roleStrength;
            this.BusinessParty = businessParty;
            this.Name = name;
            this.BusinessActivities = businessActivities;
            this.BusinessActivitiesSerialized = businessActivitiesSerialized;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets RoleStrength
        /// </summary>
        [DataMember(Name="RoleStrength", EmitDefaultValue=false)]
        public int? RoleStrength { get; set; }

        /// <summary>
        /// Gets or Sets BusinessParty
        /// </summary>
        [DataMember(Name="BusinessParty", EmitDefaultValue=false)]
        public BusinessParty BusinessParty { get; set; }

        /// <summary>
        /// Gets or Sets BusinessActivities
        /// </summary>
        [DataMember(Name="BusinessActivities", EmitDefaultValue=false)]
        public List<BusinessActivity> BusinessActivities { get; set; }

        /// <summary>
        /// Gets or Sets BusinessActivitiesSerialized
        /// </summary>
        [DataMember(Name="BusinessActivitiesSerialized", EmitDefaultValue=false)]
        public string BusinessActivitiesSerialized { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Roles {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoleStrength: ").Append(RoleStrength).Append("\n");
            sb.Append("  BusinessParty: ").Append(BusinessParty).Append("\n");
            sb.Append("  BusinessActivities: ").Append(BusinessActivities).Append("\n");
            sb.Append("  BusinessActivitiesSerialized: ").Append(BusinessActivitiesSerialized).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Roles);
        }

        /// <summary>
        /// Returns true if Roles instances are equal
        /// </summary>
        /// <param name="input">Instance of Roles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Roles input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.RoleStrength == input.RoleStrength ||
                    (this.RoleStrength != null &&
                    this.RoleStrength.Equals(input.RoleStrength))
                ) && 
                (
                    this.BusinessParty == input.BusinessParty ||
                    (this.BusinessParty != null &&
                    this.BusinessParty.Equals(input.BusinessParty))
                ) && 
                (
                    this.BusinessActivities == input.BusinessActivities ||
                    this.BusinessActivities != null &&
                    this.BusinessActivities.SequenceEqual(input.BusinessActivities)
                ) && 
                (
                    this.BusinessActivitiesSerialized == input.BusinessActivitiesSerialized ||
                    (this.BusinessActivitiesSerialized != null &&
                    this.BusinessActivitiesSerialized.Equals(input.BusinessActivitiesSerialized))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.RoleStrength != null)
                    hashCode = hashCode * 59 + this.RoleStrength.GetHashCode();
                if (this.BusinessParty != null)
                    hashCode = hashCode * 59 + this.BusinessParty.GetHashCode();
                if (this.BusinessActivities != null)
                    hashCode = hashCode * 59 + this.BusinessActivities.GetHashCode();
                if (this.BusinessActivitiesSerialized != null)
                    hashCode = hashCode * 59 + this.BusinessActivitiesSerialized.GetHashCode();
                return hashCode;
            }
        }
    }

}
