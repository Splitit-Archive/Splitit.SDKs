/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// AuditLogs
    /// </summary>
    [DataContract]
    public partial class AuditLogs :  IEquatable<AuditLogs>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogs" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AuditLogs() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AuditLogs" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="activityExecutionDate">activityExecutionDate (required).</param>
        /// <param name="userId">userId.</param>
        /// <param name="userUniqueId">userUniqueId.</param>
        /// <param name="businessActivity">businessActivity (required).</param>
        /// <param name="traceId">traceId.</param>
        /// <param name="result">result (required).</param>
        /// <param name="versionedTouchPoint">versionedTouchPoint.</param>
        /// <param name="versionedTouchPointId">versionedTouchPointId.</param>
        /// <param name="discriminator">discriminator.</param>
        /// <param name="additionalInfo">additionalInfo.</param>
        /// <param name="userType">userType.</param>
        public AuditLogs(long? id = default(long?), DateTime? activityExecutionDate = default(DateTime?), long? userId = default(long?), string userUniqueId = default(string), BusinessActivity businessActivity = default(BusinessActivity), string traceId = default(string), bool? result = default(bool?), VersionedTouchPoints versionedTouchPoint = default(VersionedTouchPoints), long? versionedTouchPointId = default(long?), string discriminator = default(string), string additionalInfo = default(string), UserType userType = default(UserType))
        {
            this.Id = id;
            this.ActivityExecutionDate = activityExecutionDate;
            this.BusinessActivity = businessActivity;
            this.Result = result;
            this.UserId = userId;
            this.UserUniqueId = userUniqueId;
            this.TraceId = traceId;
            this.VersionedTouchPoint = versionedTouchPoint;
            this.VersionedTouchPointId = versionedTouchPointId;
            this.Discriminator = discriminator;
            this.AdditionalInfo = additionalInfo;
            this.UserType = userType;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ActivityExecutionDate
        /// </summary>
        [DataMember(Name="ActivityExecutionDate", EmitDefaultValue=false)]
        public DateTime? ActivityExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserUniqueId
        /// </summary>
        [DataMember(Name="UserUniqueId", EmitDefaultValue=false)]
        public string UserUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets BusinessActivity
        /// </summary>
        [DataMember(Name="BusinessActivity", EmitDefaultValue=false)]
        public BusinessActivity BusinessActivity { get; set; }

        /// <summary>
        /// Gets or Sets TraceId
        /// </summary>
        [DataMember(Name="TraceId", EmitDefaultValue=false)]
        public string TraceId { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="Result", EmitDefaultValue=false)]
        public bool? Result { get; set; }

        /// <summary>
        /// Gets or Sets VersionedTouchPoint
        /// </summary>
        [DataMember(Name="VersionedTouchPoint", EmitDefaultValue=false)]
        public VersionedTouchPoints VersionedTouchPoint { get; set; }

        /// <summary>
        /// Gets or Sets VersionedTouchPointId
        /// </summary>
        [DataMember(Name="VersionedTouchPointId", EmitDefaultValue=false)]
        public long? VersionedTouchPointId { get; set; }

        /// <summary>
        /// Gets or Sets Discriminator
        /// </summary>
        [DataMember(Name="Discriminator", EmitDefaultValue=false)]
        public string Discriminator { get; set; }

        /// <summary>
        /// Gets or Sets AdditionalInfo
        /// </summary>
        [DataMember(Name="AdditionalInfo", EmitDefaultValue=false)]
        public string AdditionalInfo { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public UserType UserType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogs {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ActivityExecutionDate: ").Append(ActivityExecutionDate).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserUniqueId: ").Append(UserUniqueId).Append("\n");
            sb.Append("  BusinessActivity: ").Append(BusinessActivity).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  VersionedTouchPoint: ").Append(VersionedTouchPoint).Append("\n");
            sb.Append("  VersionedTouchPointId: ").Append(VersionedTouchPointId).Append("\n");
            sb.Append("  Discriminator: ").Append(Discriminator).Append("\n");
            sb.Append("  AdditionalInfo: ").Append(AdditionalInfo).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuditLogs);
        }

        /// <summary>
        /// Returns true if AuditLogs instances are equal
        /// </summary>
        /// <param name="input">Instance of AuditLogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogs input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ActivityExecutionDate == input.ActivityExecutionDate ||
                    (this.ActivityExecutionDate != null &&
                    this.ActivityExecutionDate.Equals(input.ActivityExecutionDate))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserUniqueId == input.UserUniqueId ||
                    (this.UserUniqueId != null &&
                    this.UserUniqueId.Equals(input.UserUniqueId))
                ) && 
                (
                    this.BusinessActivity == input.BusinessActivity ||
                    (this.BusinessActivity != null &&
                    this.BusinessActivity.Equals(input.BusinessActivity))
                ) && 
                (
                    this.TraceId == input.TraceId ||
                    (this.TraceId != null &&
                    this.TraceId.Equals(input.TraceId))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.VersionedTouchPoint == input.VersionedTouchPoint ||
                    (this.VersionedTouchPoint != null &&
                    this.VersionedTouchPoint.Equals(input.VersionedTouchPoint))
                ) && 
                (
                    this.VersionedTouchPointId == input.VersionedTouchPointId ||
                    (this.VersionedTouchPointId != null &&
                    this.VersionedTouchPointId.Equals(input.VersionedTouchPointId))
                ) && 
                (
                    this.Discriminator == input.Discriminator ||
                    (this.Discriminator != null &&
                    this.Discriminator.Equals(input.Discriminator))
                ) && 
                (
                    this.AdditionalInfo == input.AdditionalInfo ||
                    (this.AdditionalInfo != null &&
                    this.AdditionalInfo.Equals(input.AdditionalInfo))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ActivityExecutionDate != null)
                    hashCode = hashCode * 59 + this.ActivityExecutionDate.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserUniqueId != null)
                    hashCode = hashCode * 59 + this.UserUniqueId.GetHashCode();
                if (this.BusinessActivity != null)
                    hashCode = hashCode * 59 + this.BusinessActivity.GetHashCode();
                if (this.TraceId != null)
                    hashCode = hashCode * 59 + this.TraceId.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.VersionedTouchPoint != null)
                    hashCode = hashCode * 59 + this.VersionedTouchPoint.GetHashCode();
                if (this.VersionedTouchPointId != null)
                    hashCode = hashCode * 59 + this.VersionedTouchPointId.GetHashCode();
                if (this.Discriminator != null)
                    hashCode = hashCode * 59 + this.Discriminator.GetHashCode();
                if (this.AdditionalInfo != null)
                    hashCode = hashCode * 59 + this.AdditionalInfo.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                return hashCode;
            }
        }
    }

}
