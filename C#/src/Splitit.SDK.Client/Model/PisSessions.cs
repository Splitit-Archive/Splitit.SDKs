/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// PisSessions
    /// </summary>
    [DataContract]
    public partial class PisSessions :  IEquatable<PisSessions>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PisSessions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PisSessions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PisSessions" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="lastAccessTime">lastAccessTime (required).</param>
        /// <param name="userId">userId.</param>
        /// <param name="userUniqueId">userUniqueId.</param>
        /// <param name="installmentPlanNumber">installmentPlanNumber.</param>
        /// <param name="versionedTouchPointId">versionedTouchPointId.</param>
        /// <param name="sessionValidPeriodInMinutes">sessionValidPeriodInMinutes (required).</param>
        /// <param name="versionedTouchPoint">versionedTouchPoint.</param>
        /// <param name="userType">userType.</param>
        /// <param name="sessionAvailibility">sessionAvailibility (required).</param>
        public PisSessions(long? id = default(long?), string sessionId = default(string), DateTime? lastAccessTime = default(DateTime?), long? userId = default(long?), string userUniqueId = default(string), string installmentPlanNumber = default(string), long? versionedTouchPointId = default(long?), int? sessionValidPeriodInMinutes = default(int?), VersionedTouchPoints versionedTouchPoint = default(VersionedTouchPoints), UserType userType = default(UserType), SessionAvailibility sessionAvailibility = default(SessionAvailibility))
        {
            this.Id = id;
            this.LastAccessTime = lastAccessTime;
            this.SessionValidPeriodInMinutes = sessionValidPeriodInMinutes;
            this.SessionAvailibility = sessionAvailibility;
            this.SessionId = sessionId;
            this.UserId = userId;
            this.UserUniqueId = userUniqueId;
            this.InstallmentPlanNumber = installmentPlanNumber;
            this.VersionedTouchPointId = versionedTouchPointId;
            this.VersionedTouchPoint = versionedTouchPoint;
            this.UserType = userType;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="SessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets LastAccessTime
        /// </summary>
        [DataMember(Name="LastAccessTime", EmitDefaultValue=false)]
        public DateTime? LastAccessTime { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserUniqueId
        /// </summary>
        [DataMember(Name="UserUniqueId", EmitDefaultValue=false)]
        public string UserUniqueId { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlanNumber
        /// </summary>
        [DataMember(Name="InstallmentPlanNumber", EmitDefaultValue=false)]
        public string InstallmentPlanNumber { get; set; }

        /// <summary>
        /// Gets or Sets VersionedTouchPointId
        /// </summary>
        [DataMember(Name="VersionedTouchPointId", EmitDefaultValue=false)]
        public long? VersionedTouchPointId { get; set; }

        /// <summary>
        /// Gets or Sets SessionValidPeriodInMinutes
        /// </summary>
        [DataMember(Name="SessionValidPeriodInMinutes", EmitDefaultValue=false)]
        public int? SessionValidPeriodInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets VersionedTouchPoint
        /// </summary>
        [DataMember(Name="VersionedTouchPoint", EmitDefaultValue=false)]
        public VersionedTouchPoints VersionedTouchPoint { get; set; }

        /// <summary>
        /// Gets or Sets UserType
        /// </summary>
        [DataMember(Name="UserType", EmitDefaultValue=false)]
        public UserType UserType { get; set; }

        /// <summary>
        /// Gets or Sets SessionAvailibility
        /// </summary>
        [DataMember(Name="SessionAvailibility", EmitDefaultValue=false)]
        public SessionAvailibility SessionAvailibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PisSessions {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  LastAccessTime: ").Append(LastAccessTime).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserUniqueId: ").Append(UserUniqueId).Append("\n");
            sb.Append("  InstallmentPlanNumber: ").Append(InstallmentPlanNumber).Append("\n");
            sb.Append("  VersionedTouchPointId: ").Append(VersionedTouchPointId).Append("\n");
            sb.Append("  SessionValidPeriodInMinutes: ").Append(SessionValidPeriodInMinutes).Append("\n");
            sb.Append("  VersionedTouchPoint: ").Append(VersionedTouchPoint).Append("\n");
            sb.Append("  UserType: ").Append(UserType).Append("\n");
            sb.Append("  SessionAvailibility: ").Append(SessionAvailibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PisSessions);
        }

        /// <summary>
        /// Returns true if PisSessions instances are equal
        /// </summary>
        /// <param name="input">Instance of PisSessions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PisSessions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.LastAccessTime == input.LastAccessTime ||
                    (this.LastAccessTime != null &&
                    this.LastAccessTime.Equals(input.LastAccessTime))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.UserUniqueId == input.UserUniqueId ||
                    (this.UserUniqueId != null &&
                    this.UserUniqueId.Equals(input.UserUniqueId))
                ) && 
                (
                    this.InstallmentPlanNumber == input.InstallmentPlanNumber ||
                    (this.InstallmentPlanNumber != null &&
                    this.InstallmentPlanNumber.Equals(input.InstallmentPlanNumber))
                ) && 
                (
                    this.VersionedTouchPointId == input.VersionedTouchPointId ||
                    (this.VersionedTouchPointId != null &&
                    this.VersionedTouchPointId.Equals(input.VersionedTouchPointId))
                ) && 
                (
                    this.SessionValidPeriodInMinutes == input.SessionValidPeriodInMinutes ||
                    (this.SessionValidPeriodInMinutes != null &&
                    this.SessionValidPeriodInMinutes.Equals(input.SessionValidPeriodInMinutes))
                ) && 
                (
                    this.VersionedTouchPoint == input.VersionedTouchPoint ||
                    (this.VersionedTouchPoint != null &&
                    this.VersionedTouchPoint.Equals(input.VersionedTouchPoint))
                ) && 
                (
                    this.UserType == input.UserType ||
                    (this.UserType != null &&
                    this.UserType.Equals(input.UserType))
                ) && 
                (
                    this.SessionAvailibility == input.SessionAvailibility ||
                    (this.SessionAvailibility != null &&
                    this.SessionAvailibility.Equals(input.SessionAvailibility))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.LastAccessTime != null)
                    hashCode = hashCode * 59 + this.LastAccessTime.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.UserUniqueId != null)
                    hashCode = hashCode * 59 + this.UserUniqueId.GetHashCode();
                if (this.InstallmentPlanNumber != null)
                    hashCode = hashCode * 59 + this.InstallmentPlanNumber.GetHashCode();
                if (this.VersionedTouchPointId != null)
                    hashCode = hashCode * 59 + this.VersionedTouchPointId.GetHashCode();
                if (this.SessionValidPeriodInMinutes != null)
                    hashCode = hashCode * 59 + this.SessionValidPeriodInMinutes.GetHashCode();
                if (this.VersionedTouchPoint != null)
                    hashCode = hashCode * 59 + this.VersionedTouchPoint.GetHashCode();
                if (this.UserType != null)
                    hashCode = hashCode * 59 + this.UserType.GetHashCode();
                if (this.SessionAvailibility != null)
                    hashCode = hashCode * 59 + this.SessionAvailibility.GetHashCode();
                return hashCode;
            }
        }
    }

}
