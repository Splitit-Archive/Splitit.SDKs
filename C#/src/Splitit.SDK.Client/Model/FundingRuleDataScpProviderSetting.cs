/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// FundingRuleDataScpProviderSetting
    /// </summary>
    [DataContract]
    public partial class FundingRuleDataScpProviderSetting :  IEquatable<FundingRuleDataScpProviderSetting>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingRuleDataScpProviderSetting" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundingRuleDataScpProviderSetting() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingRuleDataScpProviderSetting" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="scpProviderId">scpProviderId (required).</param>
        /// <param name="fundingRuleDataId">fundingRuleDataId (required).</param>
        /// <param name="creditLine">creditLine (required).</param>
        /// <param name="effectiveScpRevenueSharePercent">effectiveScpRevenueSharePercent (required).</param>
        /// <param name="effectiveScpVariableCostApr">effectiveScpVariableCostApr (required).</param>
        /// <param name="isSecondary">isSecondary (required).</param>
        /// <param name="rotationWeight">rotationWeight (required).</param>
        /// <param name="isEnabled">isEnabled (required).</param>
        public FundingRuleDataScpProviderSetting(long? id = default(long?), long? scpProviderId = default(long?), long? fundingRuleDataId = default(long?), decimal? creditLine = default(decimal?), decimal? effectiveScpRevenueSharePercent = default(decimal?), decimal? effectiveScpVariableCostApr = default(decimal?), bool? isSecondary = default(bool?), double? rotationWeight = default(double?), bool? isEnabled = default(bool?))
        {
            this.Id = id;
            this.ScpProviderId = scpProviderId;
            this.FundingRuleDataId = fundingRuleDataId;
            this.CreditLine = creditLine;
            this.EffectiveScpRevenueSharePercent = effectiveScpRevenueSharePercent;
            this.EffectiveScpVariableCostApr = effectiveScpVariableCostApr;
            this.IsSecondary = isSecondary;
            this.RotationWeight = rotationWeight;
            this.IsEnabled = isEnabled;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets ScpProviderId
        /// </summary>
        [DataMember(Name="ScpProviderId", EmitDefaultValue=false)]
        public long? ScpProviderId { get; set; }

        /// <summary>
        /// Gets or Sets FundingRuleDataId
        /// </summary>
        [DataMember(Name="FundingRuleDataId", EmitDefaultValue=false)]
        public long? FundingRuleDataId { get; set; }

        /// <summary>
        /// Gets or Sets CreditLine
        /// </summary>
        [DataMember(Name="CreditLine", EmitDefaultValue=false)]
        public decimal? CreditLine { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveScpRevenueSharePercent
        /// </summary>
        [DataMember(Name="EffectiveScpRevenueSharePercent", EmitDefaultValue=false)]
        public decimal? EffectiveScpRevenueSharePercent { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveScpVariableCostApr
        /// </summary>
        [DataMember(Name="EffectiveScpVariableCostApr", EmitDefaultValue=false)]
        public decimal? EffectiveScpVariableCostApr { get; set; }

        /// <summary>
        /// Gets or Sets IsSecondary
        /// </summary>
        [DataMember(Name="IsSecondary", EmitDefaultValue=false)]
        public bool? IsSecondary { get; set; }

        /// <summary>
        /// Gets or Sets RotationWeight
        /// </summary>
        [DataMember(Name="RotationWeight", EmitDefaultValue=false)]
        public double? RotationWeight { get; set; }

        /// <summary>
        /// Gets or Sets IsEnabled
        /// </summary>
        [DataMember(Name="IsEnabled", EmitDefaultValue=false)]
        public bool? IsEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FundingRuleDataScpProviderSetting {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ScpProviderId: ").Append(ScpProviderId).Append("\n");
            sb.Append("  FundingRuleDataId: ").Append(FundingRuleDataId).Append("\n");
            sb.Append("  CreditLine: ").Append(CreditLine).Append("\n");
            sb.Append("  EffectiveScpRevenueSharePercent: ").Append(EffectiveScpRevenueSharePercent).Append("\n");
            sb.Append("  EffectiveScpVariableCostApr: ").Append(EffectiveScpVariableCostApr).Append("\n");
            sb.Append("  IsSecondary: ").Append(IsSecondary).Append("\n");
            sb.Append("  RotationWeight: ").Append(RotationWeight).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FundingRuleDataScpProviderSetting);
        }

        /// <summary>
        /// Returns true if FundingRuleDataScpProviderSetting instances are equal
        /// </summary>
        /// <param name="input">Instance of FundingRuleDataScpProviderSetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FundingRuleDataScpProviderSetting input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ScpProviderId == input.ScpProviderId ||
                    (this.ScpProviderId != null &&
                    this.ScpProviderId.Equals(input.ScpProviderId))
                ) && 
                (
                    this.FundingRuleDataId == input.FundingRuleDataId ||
                    (this.FundingRuleDataId != null &&
                    this.FundingRuleDataId.Equals(input.FundingRuleDataId))
                ) && 
                (
                    this.CreditLine == input.CreditLine ||
                    (this.CreditLine != null &&
                    this.CreditLine.Equals(input.CreditLine))
                ) && 
                (
                    this.EffectiveScpRevenueSharePercent == input.EffectiveScpRevenueSharePercent ||
                    (this.EffectiveScpRevenueSharePercent != null &&
                    this.EffectiveScpRevenueSharePercent.Equals(input.EffectiveScpRevenueSharePercent))
                ) && 
                (
                    this.EffectiveScpVariableCostApr == input.EffectiveScpVariableCostApr ||
                    (this.EffectiveScpVariableCostApr != null &&
                    this.EffectiveScpVariableCostApr.Equals(input.EffectiveScpVariableCostApr))
                ) && 
                (
                    this.IsSecondary == input.IsSecondary ||
                    (this.IsSecondary != null &&
                    this.IsSecondary.Equals(input.IsSecondary))
                ) && 
                (
                    this.RotationWeight == input.RotationWeight ||
                    (this.RotationWeight != null &&
                    this.RotationWeight.Equals(input.RotationWeight))
                ) && 
                (
                    this.IsEnabled == input.IsEnabled ||
                    (this.IsEnabled != null &&
                    this.IsEnabled.Equals(input.IsEnabled))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ScpProviderId != null)
                    hashCode = hashCode * 59 + this.ScpProviderId.GetHashCode();
                if (this.FundingRuleDataId != null)
                    hashCode = hashCode * 59 + this.FundingRuleDataId.GetHashCode();
                if (this.CreditLine != null)
                    hashCode = hashCode * 59 + this.CreditLine.GetHashCode();
                if (this.EffectiveScpRevenueSharePercent != null)
                    hashCode = hashCode * 59 + this.EffectiveScpRevenueSharePercent.GetHashCode();
                if (this.EffectiveScpVariableCostApr != null)
                    hashCode = hashCode * 59 + this.EffectiveScpVariableCostApr.GetHashCode();
                if (this.IsSecondary != null)
                    hashCode = hashCode * 59 + this.IsSecondary.GetHashCode();
                if (this.RotationWeight != null)
                    hashCode = hashCode * 59 + this.RotationWeight.GetHashCode();
                if (this.IsEnabled != null)
                    hashCode = hashCode * 59 + this.IsEnabled.GetHashCode();
                return hashCode;
            }
        }
    }

}
