/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// InstallmentPlanSetupContexts
    /// </summary>
    [DataContract]
    public partial class InstallmentPlanSetupContexts :  IEquatable<InstallmentPlanSetupContexts>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanSetupContexts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InstallmentPlanSetupContexts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentPlanSetupContexts" /> class.
        /// </summary>
        /// <param name="id">id (required).</param>
        /// <param name="publicInstallmentPlanSession">publicInstallmentPlanSession.</param>
        /// <param name="billingAddressAddressLine">billingAddressAddressLine.</param>
        /// <param name="billingAddressZip">billingAddressZip.</param>
        /// <param name="billingAddressAddressLine2">billingAddressAddressLine2.</param>
        /// <param name="billingAddressCity">billingAddressCity.</param>
        /// <param name="requestedNumberOfInstallments">requestedNumberOfInstallments.</param>
        /// <param name="successExitUrl">successExitUrl.</param>
        /// <param name="errorExitUrl">errorExitUrl.</param>
        /// <param name="cancelExitUrl">cancelExitUrl.</param>
        /// <param name="abTestQueryString">abTestQueryString.</param>
        /// <param name="requestedFirstInstallmentAmount">requestedFirstInstallmentAmount (required).</param>
        /// <param name="requestedFirstScheduledInstallmentDate">requestedFirstScheduledInstallmentDate.</param>
        /// <param name="sendShopperApprovalRequest">sendShopperApprovalRequest.</param>
        /// <param name="sendShopperPaymentRequest">sendShopperPaymentRequest.</param>
        /// <param name="requestedCaptureOnCreation">requestedCaptureOnCreation.</param>
        /// <param name="billingAddressCountryId">billingAddressCountryId.</param>
        /// <param name="suggestedPaymentTPId">suggestedPaymentTPId.</param>
        /// <param name="aBTestingSessionId">aBTestingSessionId.</param>
        /// <param name="defaultNumOfInstallments">defaultNumOfInstallments (required).</param>
        /// <param name="billingAddressStateId">billingAddressStateId.</param>
        /// <param name="billingAddressLegacyFullAddressLine">billingAddressLegacyFullAddressLine.</param>
        /// <param name="requestedFunding">requestedFunding.</param>
        /// <param name="successAsyncUrl">successAsyncUrl.</param>
        /// <param name="attempt3Dsecure">attempt3Dsecure.</param>
        /// <param name="viewName">viewName.</param>
        /// <param name="isOpenedInIframe">isOpenedInIframe (required).</param>
        /// <param name="is3dSecureInPopup">is3dSecureInPopup.</param>
        /// <param name="externalAuthUniqueGatewayId">externalAuthUniqueGatewayId.</param>
        /// <param name="externalAmountDetails">externalAmountDetails (required).</param>
        /// <param name="externalAuthDate">externalAuthDate (required).</param>
        /// <param name="externalAuthTransactionLog">externalAuthTransactionLog.</param>
        /// <param name="paymentApprovalPhone">paymentApprovalPhone.</param>
        /// <param name="paymentApprovalEmail">paymentApprovalEmail.</param>
        /// <param name="paymentMessage">paymentMessage.</param>
        /// <param name="termsAndConditionsKey">termsAndConditionsKey.</param>
        /// <param name="fingerPrintId">fingerPrintId.</param>
        /// <param name="requestUpdateCardPhone">requestUpdateCardPhone.</param>
        /// <param name="requestUpdateCardEmail">requestUpdateCardEmail.</param>
        /// <param name="requestUpdateCardTime">requestUpdateCardTime.</param>
        /// <param name="billingAddressFirstTimePopulatedBy">billingAddressFirstTimePopulatedBy.</param>
        /// <param name="country">country.</param>
        /// <param name="state">state.</param>
        /// <param name="aBTestingSession">aBTestingSession.</param>
        /// <param name="suggestedPaymentTP">suggestedPaymentTP.</param>
        /// <param name="installmentPlans">installmentPlans.</param>
        /// <param name="requestedStrategy">requestedStrategy.</param>
        /// <param name="billingAddress">billingAddress.</param>
        public InstallmentPlanSetupContexts(long? id = default(long?), string publicInstallmentPlanSession = default(string), string billingAddressAddressLine = default(string), string billingAddressZip = default(string), string billingAddressAddressLine2 = default(string), string billingAddressCity = default(string), string requestedNumberOfInstallments = default(string), string successExitUrl = default(string), string errorExitUrl = default(string), string cancelExitUrl = default(string), string abTestQueryString = default(string), decimal? requestedFirstInstallmentAmount = default(decimal?), DateTime? requestedFirstScheduledInstallmentDate = default(DateTime?), DateTime? sendShopperApprovalRequest = default(DateTime?), DateTime? sendShopperPaymentRequest = default(DateTime?), bool? requestedCaptureOnCreation = default(bool?), long? billingAddressCountryId = default(long?), long? suggestedPaymentTPId = default(long?), long? aBTestingSessionId = default(long?), int? defaultNumOfInstallments = default(int?), long? billingAddressStateId = default(long?), string billingAddressLegacyFullAddressLine = default(string), bool? requestedFunding = default(bool?), string successAsyncUrl = default(string), bool? attempt3Dsecure = default(bool?), string viewName = default(string), bool? isOpenedInIframe = default(bool?), bool? is3dSecureInPopup = default(bool?), string externalAuthUniqueGatewayId = default(string), decimal? externalAmountDetails = default(decimal?), DateTime? externalAuthDate = default(DateTime?), string externalAuthTransactionLog = default(string), string paymentApprovalPhone = default(string), string paymentApprovalEmail = default(string), string paymentMessage = default(string), string termsAndConditionsKey = default(string), string fingerPrintId = default(string), string requestUpdateCardPhone = default(string), string requestUpdateCardEmail = default(string), DateTime? requestUpdateCardTime = default(DateTime?), string billingAddressFirstTimePopulatedBy = default(string), Countries country = default(Countries), CountrySubdivisions state = default(CountrySubdivisions), PaymentFormTPABTestingDefinition aBTestingSession = default(PaymentFormTPABTestingDefinition), VersionedTouchPoints suggestedPaymentTP = default(VersionedTouchPoints), List<InstallmentPlans> installmentPlans = default(List<InstallmentPlans>), PlanStrategy requestedStrategy = default(PlanStrategy), AddressData2 billingAddress = default(AddressData2))
        {
            this.Id = id;
            this.RequestedFirstInstallmentAmount = requestedFirstInstallmentAmount;
            this.DefaultNumOfInstallments = defaultNumOfInstallments;
            this.IsOpenedInIframe = isOpenedInIframe;
            this.ExternalAmountDetails = externalAmountDetails;
            this.ExternalAuthDate = externalAuthDate;
            this.PublicInstallmentPlanSession = publicInstallmentPlanSession;
            this.BillingAddressAddressLine = billingAddressAddressLine;
            this.BillingAddressZip = billingAddressZip;
            this.BillingAddressAddressLine2 = billingAddressAddressLine2;
            this.BillingAddressCity = billingAddressCity;
            this.RequestedNumberOfInstallments = requestedNumberOfInstallments;
            this.SuccessExitUrl = successExitUrl;
            this.ErrorExitUrl = errorExitUrl;
            this.CancelExitUrl = cancelExitUrl;
            this.AbTestQueryString = abTestQueryString;
            this.RequestedFirstScheduledInstallmentDate = requestedFirstScheduledInstallmentDate;
            this.SendShopperApprovalRequest = sendShopperApprovalRequest;
            this.SendShopperPaymentRequest = sendShopperPaymentRequest;
            this.RequestedCaptureOnCreation = requestedCaptureOnCreation;
            this.BillingAddressCountryId = billingAddressCountryId;
            this.SuggestedPaymentTPId = suggestedPaymentTPId;
            this.ABTestingSessionId = aBTestingSessionId;
            this.BillingAddressStateId = billingAddressStateId;
            this.BillingAddressLegacyFullAddressLine = billingAddressLegacyFullAddressLine;
            this.RequestedFunding = requestedFunding;
            this.SuccessAsyncUrl = successAsyncUrl;
            this.Attempt3Dsecure = attempt3Dsecure;
            this.ViewName = viewName;
            this.Is3dSecureInPopup = is3dSecureInPopup;
            this.ExternalAuthUniqueGatewayId = externalAuthUniqueGatewayId;
            this.ExternalAuthTransactionLog = externalAuthTransactionLog;
            this.PaymentApprovalPhone = paymentApprovalPhone;
            this.PaymentApprovalEmail = paymentApprovalEmail;
            this.PaymentMessage = paymentMessage;
            this.TermsAndConditionsKey = termsAndConditionsKey;
            this.FingerPrintId = fingerPrintId;
            this.RequestUpdateCardPhone = requestUpdateCardPhone;
            this.RequestUpdateCardEmail = requestUpdateCardEmail;
            this.RequestUpdateCardTime = requestUpdateCardTime;
            this.BillingAddressFirstTimePopulatedBy = billingAddressFirstTimePopulatedBy;
            this.Country = country;
            this.State = state;
            this.ABTestingSession = aBTestingSession;
            this.SuggestedPaymentTP = suggestedPaymentTP;
            this.InstallmentPlans = installmentPlans;
            this.RequestedStrategy = requestedStrategy;
            this.BillingAddress = billingAddress;
        }

        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets PublicInstallmentPlanSession
        /// </summary>
        [DataMember(Name="PublicInstallmentPlanSession", EmitDefaultValue=false)]
        public string PublicInstallmentPlanSession { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressAddressLine
        /// </summary>
        [DataMember(Name="BillingAddressAddressLine", EmitDefaultValue=false)]
        public string BillingAddressAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressZip
        /// </summary>
        [DataMember(Name="BillingAddressZip", EmitDefaultValue=false)]
        public string BillingAddressZip { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressAddressLine2
        /// </summary>
        [DataMember(Name="BillingAddressAddressLine2", EmitDefaultValue=false)]
        public string BillingAddressAddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressCity
        /// </summary>
        [DataMember(Name="BillingAddressCity", EmitDefaultValue=false)]
        public string BillingAddressCity { get; set; }

        /// <summary>
        /// Gets or Sets RequestedNumberOfInstallments
        /// </summary>
        [DataMember(Name="RequestedNumberOfInstallments", EmitDefaultValue=false)]
        public string RequestedNumberOfInstallments { get; set; }

        /// <summary>
        /// Gets or Sets SuccessExitUrl
        /// </summary>
        [DataMember(Name="SuccessExitUrl", EmitDefaultValue=false)]
        public string SuccessExitUrl { get; set; }

        /// <summary>
        /// Gets or Sets ErrorExitUrl
        /// </summary>
        [DataMember(Name="ErrorExitUrl", EmitDefaultValue=false)]
        public string ErrorExitUrl { get; set; }

        /// <summary>
        /// Gets or Sets CancelExitUrl
        /// </summary>
        [DataMember(Name="CancelExitUrl", EmitDefaultValue=false)]
        public string CancelExitUrl { get; set; }

        /// <summary>
        /// Gets or Sets AbTestQueryString
        /// </summary>
        [DataMember(Name="AbTestQueryString", EmitDefaultValue=false)]
        public string AbTestQueryString { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFirstInstallmentAmount
        /// </summary>
        [DataMember(Name="RequestedFirstInstallmentAmount", EmitDefaultValue=false)]
        public decimal? RequestedFirstInstallmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFirstScheduledInstallmentDate
        /// </summary>
        [DataMember(Name="RequestedFirstScheduledInstallmentDate", EmitDefaultValue=false)]
        public DateTime? RequestedFirstScheduledInstallmentDate { get; set; }

        /// <summary>
        /// Gets or Sets SendShopperApprovalRequest
        /// </summary>
        [DataMember(Name="SendShopperApprovalRequest", EmitDefaultValue=false)]
        public DateTime? SendShopperApprovalRequest { get; set; }

        /// <summary>
        /// Gets or Sets SendShopperPaymentRequest
        /// </summary>
        [DataMember(Name="SendShopperPaymentRequest", EmitDefaultValue=false)]
        public DateTime? SendShopperPaymentRequest { get; set; }

        /// <summary>
        /// Gets or Sets RequestedCaptureOnCreation
        /// </summary>
        [DataMember(Name="RequestedCaptureOnCreation", EmitDefaultValue=false)]
        public bool? RequestedCaptureOnCreation { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressCountryId
        /// </summary>
        [DataMember(Name="BillingAddressCountryId", EmitDefaultValue=false)]
        public long? BillingAddressCountryId { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedPaymentTPId
        /// </summary>
        [DataMember(Name="SuggestedPaymentTPId", EmitDefaultValue=false)]
        public long? SuggestedPaymentTPId { get; set; }

        /// <summary>
        /// Gets or Sets ABTestingSessionId
        /// </summary>
        [DataMember(Name="ABTestingSessionId", EmitDefaultValue=false)]
        public long? ABTestingSessionId { get; set; }

        /// <summary>
        /// Gets or Sets DefaultNumOfInstallments
        /// </summary>
        [DataMember(Name="DefaultNumOfInstallments", EmitDefaultValue=false)]
        public int? DefaultNumOfInstallments { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressStateId
        /// </summary>
        [DataMember(Name="BillingAddressStateId", EmitDefaultValue=false)]
        public long? BillingAddressStateId { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressLegacyFullAddressLine
        /// </summary>
        [DataMember(Name="BillingAddressLegacyFullAddressLine", EmitDefaultValue=false)]
        public string BillingAddressLegacyFullAddressLine { get; set; }

        /// <summary>
        /// Gets or Sets RequestedFunding
        /// </summary>
        [DataMember(Name="RequestedFunding", EmitDefaultValue=false)]
        public bool? RequestedFunding { get; set; }

        /// <summary>
        /// Gets or Sets SuccessAsyncUrl
        /// </summary>
        [DataMember(Name="SuccessAsyncUrl", EmitDefaultValue=false)]
        public string SuccessAsyncUrl { get; set; }

        /// <summary>
        /// Gets or Sets Attempt3Dsecure
        /// </summary>
        [DataMember(Name="Attempt3Dsecure", EmitDefaultValue=false)]
        public bool? Attempt3Dsecure { get; set; }

        /// <summary>
        /// Gets or Sets ViewName
        /// </summary>
        [DataMember(Name="ViewName", EmitDefaultValue=false)]
        public string ViewName { get; set; }

        /// <summary>
        /// Gets or Sets IsOpenedInIframe
        /// </summary>
        [DataMember(Name="IsOpenedInIframe", EmitDefaultValue=false)]
        public bool? IsOpenedInIframe { get; set; }

        /// <summary>
        /// Gets or Sets Is3dSecureInPopup
        /// </summary>
        [DataMember(Name="Is3dSecureInPopup", EmitDefaultValue=false)]
        public bool? Is3dSecureInPopup { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAuthUniqueGatewayId
        /// </summary>
        [DataMember(Name="ExternalAuthUniqueGatewayId", EmitDefaultValue=false)]
        public string ExternalAuthUniqueGatewayId { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAmountDetails
        /// </summary>
        [DataMember(Name="ExternalAmountDetails", EmitDefaultValue=false)]
        public decimal? ExternalAmountDetails { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAuthDate
        /// </summary>
        [DataMember(Name="ExternalAuthDate", EmitDefaultValue=false)]
        public DateTime? ExternalAuthDate { get; set; }

        /// <summary>
        /// Gets or Sets ExternalAuthTransactionLog
        /// </summary>
        [DataMember(Name="ExternalAuthTransactionLog", EmitDefaultValue=false)]
        public string ExternalAuthTransactionLog { get; set; }

        /// <summary>
        /// Gets or Sets PaymentApprovalPhone
        /// </summary>
        [DataMember(Name="PaymentApprovalPhone", EmitDefaultValue=false)]
        public string PaymentApprovalPhone { get; set; }

        /// <summary>
        /// Gets or Sets PaymentApprovalEmail
        /// </summary>
        [DataMember(Name="PaymentApprovalEmail", EmitDefaultValue=false)]
        public string PaymentApprovalEmail { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMessage
        /// </summary>
        [DataMember(Name="PaymentMessage", EmitDefaultValue=false)]
        public string PaymentMessage { get; set; }

        /// <summary>
        /// Gets or Sets TermsAndConditionsKey
        /// </summary>
        [DataMember(Name="TermsAndConditionsKey", EmitDefaultValue=false)]
        public string TermsAndConditionsKey { get; set; }

        /// <summary>
        /// Gets or Sets FingerPrintId
        /// </summary>
        [DataMember(Name="FingerPrintId", EmitDefaultValue=false)]
        public string FingerPrintId { get; set; }

        /// <summary>
        /// Gets or Sets RequestUpdateCardPhone
        /// </summary>
        [DataMember(Name="RequestUpdateCardPhone", EmitDefaultValue=false)]
        public string RequestUpdateCardPhone { get; set; }

        /// <summary>
        /// Gets or Sets RequestUpdateCardEmail
        /// </summary>
        [DataMember(Name="RequestUpdateCardEmail", EmitDefaultValue=false)]
        public string RequestUpdateCardEmail { get; set; }

        /// <summary>
        /// Gets or Sets RequestUpdateCardTime
        /// </summary>
        [DataMember(Name="RequestUpdateCardTime", EmitDefaultValue=false)]
        public DateTime? RequestUpdateCardTime { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddressFirstTimePopulatedBy
        /// </summary>
        [DataMember(Name="BillingAddressFirstTimePopulatedBy", EmitDefaultValue=false)]
        public string BillingAddressFirstTimePopulatedBy { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=false)]
        public Countries Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public CountrySubdivisions State { get; set; }

        /// <summary>
        /// Gets or Sets ABTestingSession
        /// </summary>
        [DataMember(Name="ABTestingSession", EmitDefaultValue=false)]
        public PaymentFormTPABTestingDefinition ABTestingSession { get; set; }

        /// <summary>
        /// Gets or Sets SuggestedPaymentTP
        /// </summary>
        [DataMember(Name="SuggestedPaymentTP", EmitDefaultValue=false)]
        public VersionedTouchPoints SuggestedPaymentTP { get; set; }

        /// <summary>
        /// Gets or Sets InstallmentPlans
        /// </summary>
        [DataMember(Name="InstallmentPlans", EmitDefaultValue=false)]
        public List<InstallmentPlans> InstallmentPlans { get; set; }

        /// <summary>
        /// Gets or Sets RequestedStrategy
        /// </summary>
        [DataMember(Name="RequestedStrategy", EmitDefaultValue=false)]
        public PlanStrategy RequestedStrategy { get; set; }

        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="BillingAddress", EmitDefaultValue=false)]
        public AddressData2 BillingAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentPlanSetupContexts {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PublicInstallmentPlanSession: ").Append(PublicInstallmentPlanSession).Append("\n");
            sb.Append("  BillingAddressAddressLine: ").Append(BillingAddressAddressLine).Append("\n");
            sb.Append("  BillingAddressZip: ").Append(BillingAddressZip).Append("\n");
            sb.Append("  BillingAddressAddressLine2: ").Append(BillingAddressAddressLine2).Append("\n");
            sb.Append("  BillingAddressCity: ").Append(BillingAddressCity).Append("\n");
            sb.Append("  RequestedNumberOfInstallments: ").Append(RequestedNumberOfInstallments).Append("\n");
            sb.Append("  SuccessExitUrl: ").Append(SuccessExitUrl).Append("\n");
            sb.Append("  ErrorExitUrl: ").Append(ErrorExitUrl).Append("\n");
            sb.Append("  CancelExitUrl: ").Append(CancelExitUrl).Append("\n");
            sb.Append("  AbTestQueryString: ").Append(AbTestQueryString).Append("\n");
            sb.Append("  RequestedFirstInstallmentAmount: ").Append(RequestedFirstInstallmentAmount).Append("\n");
            sb.Append("  RequestedFirstScheduledInstallmentDate: ").Append(RequestedFirstScheduledInstallmentDate).Append("\n");
            sb.Append("  SendShopperApprovalRequest: ").Append(SendShopperApprovalRequest).Append("\n");
            sb.Append("  SendShopperPaymentRequest: ").Append(SendShopperPaymentRequest).Append("\n");
            sb.Append("  RequestedCaptureOnCreation: ").Append(RequestedCaptureOnCreation).Append("\n");
            sb.Append("  BillingAddressCountryId: ").Append(BillingAddressCountryId).Append("\n");
            sb.Append("  SuggestedPaymentTPId: ").Append(SuggestedPaymentTPId).Append("\n");
            sb.Append("  ABTestingSessionId: ").Append(ABTestingSessionId).Append("\n");
            sb.Append("  DefaultNumOfInstallments: ").Append(DefaultNumOfInstallments).Append("\n");
            sb.Append("  BillingAddressStateId: ").Append(BillingAddressStateId).Append("\n");
            sb.Append("  BillingAddressLegacyFullAddressLine: ").Append(BillingAddressLegacyFullAddressLine).Append("\n");
            sb.Append("  RequestedFunding: ").Append(RequestedFunding).Append("\n");
            sb.Append("  SuccessAsyncUrl: ").Append(SuccessAsyncUrl).Append("\n");
            sb.Append("  Attempt3Dsecure: ").Append(Attempt3Dsecure).Append("\n");
            sb.Append("  ViewName: ").Append(ViewName).Append("\n");
            sb.Append("  IsOpenedInIframe: ").Append(IsOpenedInIframe).Append("\n");
            sb.Append("  Is3dSecureInPopup: ").Append(Is3dSecureInPopup).Append("\n");
            sb.Append("  ExternalAuthUniqueGatewayId: ").Append(ExternalAuthUniqueGatewayId).Append("\n");
            sb.Append("  ExternalAmountDetails: ").Append(ExternalAmountDetails).Append("\n");
            sb.Append("  ExternalAuthDate: ").Append(ExternalAuthDate).Append("\n");
            sb.Append("  ExternalAuthTransactionLog: ").Append(ExternalAuthTransactionLog).Append("\n");
            sb.Append("  PaymentApprovalPhone: ").Append(PaymentApprovalPhone).Append("\n");
            sb.Append("  PaymentApprovalEmail: ").Append(PaymentApprovalEmail).Append("\n");
            sb.Append("  PaymentMessage: ").Append(PaymentMessage).Append("\n");
            sb.Append("  TermsAndConditionsKey: ").Append(TermsAndConditionsKey).Append("\n");
            sb.Append("  FingerPrintId: ").Append(FingerPrintId).Append("\n");
            sb.Append("  RequestUpdateCardPhone: ").Append(RequestUpdateCardPhone).Append("\n");
            sb.Append("  RequestUpdateCardEmail: ").Append(RequestUpdateCardEmail).Append("\n");
            sb.Append("  RequestUpdateCardTime: ").Append(RequestUpdateCardTime).Append("\n");
            sb.Append("  BillingAddressFirstTimePopulatedBy: ").Append(BillingAddressFirstTimePopulatedBy).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ABTestingSession: ").Append(ABTestingSession).Append("\n");
            sb.Append("  SuggestedPaymentTP: ").Append(SuggestedPaymentTP).Append("\n");
            sb.Append("  InstallmentPlans: ").Append(InstallmentPlans).Append("\n");
            sb.Append("  RequestedStrategy: ").Append(RequestedStrategy).Append("\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentPlanSetupContexts);
        }

        /// <summary>
        /// Returns true if InstallmentPlanSetupContexts instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentPlanSetupContexts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentPlanSetupContexts input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PublicInstallmentPlanSession == input.PublicInstallmentPlanSession ||
                    (this.PublicInstallmentPlanSession != null &&
                    this.PublicInstallmentPlanSession.Equals(input.PublicInstallmentPlanSession))
                ) && 
                (
                    this.BillingAddressAddressLine == input.BillingAddressAddressLine ||
                    (this.BillingAddressAddressLine != null &&
                    this.BillingAddressAddressLine.Equals(input.BillingAddressAddressLine))
                ) && 
                (
                    this.BillingAddressZip == input.BillingAddressZip ||
                    (this.BillingAddressZip != null &&
                    this.BillingAddressZip.Equals(input.BillingAddressZip))
                ) && 
                (
                    this.BillingAddressAddressLine2 == input.BillingAddressAddressLine2 ||
                    (this.BillingAddressAddressLine2 != null &&
                    this.BillingAddressAddressLine2.Equals(input.BillingAddressAddressLine2))
                ) && 
                (
                    this.BillingAddressCity == input.BillingAddressCity ||
                    (this.BillingAddressCity != null &&
                    this.BillingAddressCity.Equals(input.BillingAddressCity))
                ) && 
                (
                    this.RequestedNumberOfInstallments == input.RequestedNumberOfInstallments ||
                    (this.RequestedNumberOfInstallments != null &&
                    this.RequestedNumberOfInstallments.Equals(input.RequestedNumberOfInstallments))
                ) && 
                (
                    this.SuccessExitUrl == input.SuccessExitUrl ||
                    (this.SuccessExitUrl != null &&
                    this.SuccessExitUrl.Equals(input.SuccessExitUrl))
                ) && 
                (
                    this.ErrorExitUrl == input.ErrorExitUrl ||
                    (this.ErrorExitUrl != null &&
                    this.ErrorExitUrl.Equals(input.ErrorExitUrl))
                ) && 
                (
                    this.CancelExitUrl == input.CancelExitUrl ||
                    (this.CancelExitUrl != null &&
                    this.CancelExitUrl.Equals(input.CancelExitUrl))
                ) && 
                (
                    this.AbTestQueryString == input.AbTestQueryString ||
                    (this.AbTestQueryString != null &&
                    this.AbTestQueryString.Equals(input.AbTestQueryString))
                ) && 
                (
                    this.RequestedFirstInstallmentAmount == input.RequestedFirstInstallmentAmount ||
                    (this.RequestedFirstInstallmentAmount != null &&
                    this.RequestedFirstInstallmentAmount.Equals(input.RequestedFirstInstallmentAmount))
                ) && 
                (
                    this.RequestedFirstScheduledInstallmentDate == input.RequestedFirstScheduledInstallmentDate ||
                    (this.RequestedFirstScheduledInstallmentDate != null &&
                    this.RequestedFirstScheduledInstallmentDate.Equals(input.RequestedFirstScheduledInstallmentDate))
                ) && 
                (
                    this.SendShopperApprovalRequest == input.SendShopperApprovalRequest ||
                    (this.SendShopperApprovalRequest != null &&
                    this.SendShopperApprovalRequest.Equals(input.SendShopperApprovalRequest))
                ) && 
                (
                    this.SendShopperPaymentRequest == input.SendShopperPaymentRequest ||
                    (this.SendShopperPaymentRequest != null &&
                    this.SendShopperPaymentRequest.Equals(input.SendShopperPaymentRequest))
                ) && 
                (
                    this.RequestedCaptureOnCreation == input.RequestedCaptureOnCreation ||
                    (this.RequestedCaptureOnCreation != null &&
                    this.RequestedCaptureOnCreation.Equals(input.RequestedCaptureOnCreation))
                ) && 
                (
                    this.BillingAddressCountryId == input.BillingAddressCountryId ||
                    (this.BillingAddressCountryId != null &&
                    this.BillingAddressCountryId.Equals(input.BillingAddressCountryId))
                ) && 
                (
                    this.SuggestedPaymentTPId == input.SuggestedPaymentTPId ||
                    (this.SuggestedPaymentTPId != null &&
                    this.SuggestedPaymentTPId.Equals(input.SuggestedPaymentTPId))
                ) && 
                (
                    this.ABTestingSessionId == input.ABTestingSessionId ||
                    (this.ABTestingSessionId != null &&
                    this.ABTestingSessionId.Equals(input.ABTestingSessionId))
                ) && 
                (
                    this.DefaultNumOfInstallments == input.DefaultNumOfInstallments ||
                    (this.DefaultNumOfInstallments != null &&
                    this.DefaultNumOfInstallments.Equals(input.DefaultNumOfInstallments))
                ) && 
                (
                    this.BillingAddressStateId == input.BillingAddressStateId ||
                    (this.BillingAddressStateId != null &&
                    this.BillingAddressStateId.Equals(input.BillingAddressStateId))
                ) && 
                (
                    this.BillingAddressLegacyFullAddressLine == input.BillingAddressLegacyFullAddressLine ||
                    (this.BillingAddressLegacyFullAddressLine != null &&
                    this.BillingAddressLegacyFullAddressLine.Equals(input.BillingAddressLegacyFullAddressLine))
                ) && 
                (
                    this.RequestedFunding == input.RequestedFunding ||
                    (this.RequestedFunding != null &&
                    this.RequestedFunding.Equals(input.RequestedFunding))
                ) && 
                (
                    this.SuccessAsyncUrl == input.SuccessAsyncUrl ||
                    (this.SuccessAsyncUrl != null &&
                    this.SuccessAsyncUrl.Equals(input.SuccessAsyncUrl))
                ) && 
                (
                    this.Attempt3Dsecure == input.Attempt3Dsecure ||
                    (this.Attempt3Dsecure != null &&
                    this.Attempt3Dsecure.Equals(input.Attempt3Dsecure))
                ) && 
                (
                    this.ViewName == input.ViewName ||
                    (this.ViewName != null &&
                    this.ViewName.Equals(input.ViewName))
                ) && 
                (
                    this.IsOpenedInIframe == input.IsOpenedInIframe ||
                    (this.IsOpenedInIframe != null &&
                    this.IsOpenedInIframe.Equals(input.IsOpenedInIframe))
                ) && 
                (
                    this.Is3dSecureInPopup == input.Is3dSecureInPopup ||
                    (this.Is3dSecureInPopup != null &&
                    this.Is3dSecureInPopup.Equals(input.Is3dSecureInPopup))
                ) && 
                (
                    this.ExternalAuthUniqueGatewayId == input.ExternalAuthUniqueGatewayId ||
                    (this.ExternalAuthUniqueGatewayId != null &&
                    this.ExternalAuthUniqueGatewayId.Equals(input.ExternalAuthUniqueGatewayId))
                ) && 
                (
                    this.ExternalAmountDetails == input.ExternalAmountDetails ||
                    (this.ExternalAmountDetails != null &&
                    this.ExternalAmountDetails.Equals(input.ExternalAmountDetails))
                ) && 
                (
                    this.ExternalAuthDate == input.ExternalAuthDate ||
                    (this.ExternalAuthDate != null &&
                    this.ExternalAuthDate.Equals(input.ExternalAuthDate))
                ) && 
                (
                    this.ExternalAuthTransactionLog == input.ExternalAuthTransactionLog ||
                    (this.ExternalAuthTransactionLog != null &&
                    this.ExternalAuthTransactionLog.Equals(input.ExternalAuthTransactionLog))
                ) && 
                (
                    this.PaymentApprovalPhone == input.PaymentApprovalPhone ||
                    (this.PaymentApprovalPhone != null &&
                    this.PaymentApprovalPhone.Equals(input.PaymentApprovalPhone))
                ) && 
                (
                    this.PaymentApprovalEmail == input.PaymentApprovalEmail ||
                    (this.PaymentApprovalEmail != null &&
                    this.PaymentApprovalEmail.Equals(input.PaymentApprovalEmail))
                ) && 
                (
                    this.PaymentMessage == input.PaymentMessage ||
                    (this.PaymentMessage != null &&
                    this.PaymentMessage.Equals(input.PaymentMessage))
                ) && 
                (
                    this.TermsAndConditionsKey == input.TermsAndConditionsKey ||
                    (this.TermsAndConditionsKey != null &&
                    this.TermsAndConditionsKey.Equals(input.TermsAndConditionsKey))
                ) && 
                (
                    this.FingerPrintId == input.FingerPrintId ||
                    (this.FingerPrintId != null &&
                    this.FingerPrintId.Equals(input.FingerPrintId))
                ) && 
                (
                    this.RequestUpdateCardPhone == input.RequestUpdateCardPhone ||
                    (this.RequestUpdateCardPhone != null &&
                    this.RequestUpdateCardPhone.Equals(input.RequestUpdateCardPhone))
                ) && 
                (
                    this.RequestUpdateCardEmail == input.RequestUpdateCardEmail ||
                    (this.RequestUpdateCardEmail != null &&
                    this.RequestUpdateCardEmail.Equals(input.RequestUpdateCardEmail))
                ) && 
                (
                    this.RequestUpdateCardTime == input.RequestUpdateCardTime ||
                    (this.RequestUpdateCardTime != null &&
                    this.RequestUpdateCardTime.Equals(input.RequestUpdateCardTime))
                ) && 
                (
                    this.BillingAddressFirstTimePopulatedBy == input.BillingAddressFirstTimePopulatedBy ||
                    (this.BillingAddressFirstTimePopulatedBy != null &&
                    this.BillingAddressFirstTimePopulatedBy.Equals(input.BillingAddressFirstTimePopulatedBy))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.ABTestingSession == input.ABTestingSession ||
                    (this.ABTestingSession != null &&
                    this.ABTestingSession.Equals(input.ABTestingSession))
                ) && 
                (
                    this.SuggestedPaymentTP == input.SuggestedPaymentTP ||
                    (this.SuggestedPaymentTP != null &&
                    this.SuggestedPaymentTP.Equals(input.SuggestedPaymentTP))
                ) && 
                (
                    this.InstallmentPlans == input.InstallmentPlans ||
                    this.InstallmentPlans != null &&
                    this.InstallmentPlans.SequenceEqual(input.InstallmentPlans)
                ) && 
                (
                    this.RequestedStrategy == input.RequestedStrategy ||
                    (this.RequestedStrategy != null &&
                    this.RequestedStrategy.Equals(input.RequestedStrategy))
                ) && 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PublicInstallmentPlanSession != null)
                    hashCode = hashCode * 59 + this.PublicInstallmentPlanSession.GetHashCode();
                if (this.BillingAddressAddressLine != null)
                    hashCode = hashCode * 59 + this.BillingAddressAddressLine.GetHashCode();
                if (this.BillingAddressZip != null)
                    hashCode = hashCode * 59 + this.BillingAddressZip.GetHashCode();
                if (this.BillingAddressAddressLine2 != null)
                    hashCode = hashCode * 59 + this.BillingAddressAddressLine2.GetHashCode();
                if (this.BillingAddressCity != null)
                    hashCode = hashCode * 59 + this.BillingAddressCity.GetHashCode();
                if (this.RequestedNumberOfInstallments != null)
                    hashCode = hashCode * 59 + this.RequestedNumberOfInstallments.GetHashCode();
                if (this.SuccessExitUrl != null)
                    hashCode = hashCode * 59 + this.SuccessExitUrl.GetHashCode();
                if (this.ErrorExitUrl != null)
                    hashCode = hashCode * 59 + this.ErrorExitUrl.GetHashCode();
                if (this.CancelExitUrl != null)
                    hashCode = hashCode * 59 + this.CancelExitUrl.GetHashCode();
                if (this.AbTestQueryString != null)
                    hashCode = hashCode * 59 + this.AbTestQueryString.GetHashCode();
                if (this.RequestedFirstInstallmentAmount != null)
                    hashCode = hashCode * 59 + this.RequestedFirstInstallmentAmount.GetHashCode();
                if (this.RequestedFirstScheduledInstallmentDate != null)
                    hashCode = hashCode * 59 + this.RequestedFirstScheduledInstallmentDate.GetHashCode();
                if (this.SendShopperApprovalRequest != null)
                    hashCode = hashCode * 59 + this.SendShopperApprovalRequest.GetHashCode();
                if (this.SendShopperPaymentRequest != null)
                    hashCode = hashCode * 59 + this.SendShopperPaymentRequest.GetHashCode();
                if (this.RequestedCaptureOnCreation != null)
                    hashCode = hashCode * 59 + this.RequestedCaptureOnCreation.GetHashCode();
                if (this.BillingAddressCountryId != null)
                    hashCode = hashCode * 59 + this.BillingAddressCountryId.GetHashCode();
                if (this.SuggestedPaymentTPId != null)
                    hashCode = hashCode * 59 + this.SuggestedPaymentTPId.GetHashCode();
                if (this.ABTestingSessionId != null)
                    hashCode = hashCode * 59 + this.ABTestingSessionId.GetHashCode();
                if (this.DefaultNumOfInstallments != null)
                    hashCode = hashCode * 59 + this.DefaultNumOfInstallments.GetHashCode();
                if (this.BillingAddressStateId != null)
                    hashCode = hashCode * 59 + this.BillingAddressStateId.GetHashCode();
                if (this.BillingAddressLegacyFullAddressLine != null)
                    hashCode = hashCode * 59 + this.BillingAddressLegacyFullAddressLine.GetHashCode();
                if (this.RequestedFunding != null)
                    hashCode = hashCode * 59 + this.RequestedFunding.GetHashCode();
                if (this.SuccessAsyncUrl != null)
                    hashCode = hashCode * 59 + this.SuccessAsyncUrl.GetHashCode();
                if (this.Attempt3Dsecure != null)
                    hashCode = hashCode * 59 + this.Attempt3Dsecure.GetHashCode();
                if (this.ViewName != null)
                    hashCode = hashCode * 59 + this.ViewName.GetHashCode();
                if (this.IsOpenedInIframe != null)
                    hashCode = hashCode * 59 + this.IsOpenedInIframe.GetHashCode();
                if (this.Is3dSecureInPopup != null)
                    hashCode = hashCode * 59 + this.Is3dSecureInPopup.GetHashCode();
                if (this.ExternalAuthUniqueGatewayId != null)
                    hashCode = hashCode * 59 + this.ExternalAuthUniqueGatewayId.GetHashCode();
                if (this.ExternalAmountDetails != null)
                    hashCode = hashCode * 59 + this.ExternalAmountDetails.GetHashCode();
                if (this.ExternalAuthDate != null)
                    hashCode = hashCode * 59 + this.ExternalAuthDate.GetHashCode();
                if (this.ExternalAuthTransactionLog != null)
                    hashCode = hashCode * 59 + this.ExternalAuthTransactionLog.GetHashCode();
                if (this.PaymentApprovalPhone != null)
                    hashCode = hashCode * 59 + this.PaymentApprovalPhone.GetHashCode();
                if (this.PaymentApprovalEmail != null)
                    hashCode = hashCode * 59 + this.PaymentApprovalEmail.GetHashCode();
                if (this.PaymentMessage != null)
                    hashCode = hashCode * 59 + this.PaymentMessage.GetHashCode();
                if (this.TermsAndConditionsKey != null)
                    hashCode = hashCode * 59 + this.TermsAndConditionsKey.GetHashCode();
                if (this.FingerPrintId != null)
                    hashCode = hashCode * 59 + this.FingerPrintId.GetHashCode();
                if (this.RequestUpdateCardPhone != null)
                    hashCode = hashCode * 59 + this.RequestUpdateCardPhone.GetHashCode();
                if (this.RequestUpdateCardEmail != null)
                    hashCode = hashCode * 59 + this.RequestUpdateCardEmail.GetHashCode();
                if (this.RequestUpdateCardTime != null)
                    hashCode = hashCode * 59 + this.RequestUpdateCardTime.GetHashCode();
                if (this.BillingAddressFirstTimePopulatedBy != null)
                    hashCode = hashCode * 59 + this.BillingAddressFirstTimePopulatedBy.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.ABTestingSession != null)
                    hashCode = hashCode * 59 + this.ABTestingSession.GetHashCode();
                if (this.SuggestedPaymentTP != null)
                    hashCode = hashCode * 59 + this.SuggestedPaymentTP.GetHashCode();
                if (this.InstallmentPlans != null)
                    hashCode = hashCode * 59 + this.InstallmentPlans.GetHashCode();
                if (this.RequestedStrategy != null)
                    hashCode = hashCode * 59 + this.RequestedStrategy.GetHashCode();
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                return hashCode;
            }
        }
    }

}
