/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Splitit.SDK.Client.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Model
{
    /// <summary>
    /// PlanData
    /// </summary>
    [DataContract]
    public partial class PlanData :  IEquatable<PlanData>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name="TestMode", EmitDefaultValue=false)]
        public TestModes? TestMode { get; set; }
        /// <summary>
        /// Gets or Sets PurchaseMethod
        /// </summary>
        [DataMember(Name="PurchaseMethod", EmitDefaultValue=false)]
        public PurchaseMethod? PurchaseMethod { get; set; }
        /// <summary>
        /// Gets or Sets Strategy
        /// </summary>
        [DataMember(Name="Strategy", EmitDefaultValue=false)]
        public PlanStrategy? Strategy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PlanData" /> class.
        /// </summary>
        /// <param name="numberOfInstallments">numberOfInstallments.</param>
        /// <param name="amount">amount.</param>
        /// <param name="firstInstallmentAmount">firstInstallmentAmount.</param>
        /// <param name="refOrderNumber">refOrderNumber.</param>
        /// <param name="testMode">testMode.</param>
        /// <param name="purchaseMethod">purchaseMethod.</param>
        /// <param name="strategy">strategy.</param>
        /// <param name="extendedParams">extendedParams.</param>
        /// <param name="firstChargeDate">firstChargeDate.</param>
        /// <param name="autoCapture">autoCapture.</param>
        /// <param name="isFunded">isFunded.</param>
        /// <param name="attempt3DSecure">attempt3DSecure.</param>
        public PlanData(int? numberOfInstallments = default(int?), MoneyWithCurrencyCode amount = default(MoneyWithCurrencyCode), MoneyWithCurrencyCode firstInstallmentAmount = default(MoneyWithCurrencyCode), string refOrderNumber = default(string), TestModes? testMode = default(TestModes?), PurchaseMethod? purchaseMethod = default(PurchaseMethod?), PlanStrategy? strategy = default(PlanStrategy?), Dictionary<string, string> extendedParams = default(Dictionary<string, string>), DateTime? firstChargeDate = default(DateTime?), bool? autoCapture = default(bool?), bool? isFunded = default(bool?), Object attempt3DSecure = default(Object))
        {
            this.NumberOfInstallments = numberOfInstallments;
            this.Amount = amount;
            this.FirstInstallmentAmount = firstInstallmentAmount;
            this.RefOrderNumber = refOrderNumber;
            this.TestMode = testMode;
            this.PurchaseMethod = purchaseMethod;
            this.Strategy = strategy;
            this.ExtendedParams = extendedParams;
            this.FirstChargeDate = firstChargeDate;
            this.AutoCapture = autoCapture;
            this.IsFunded = isFunded;
            this.Attempt3DSecure = attempt3DSecure;
        }

        
        /// <summary>
        /// Gets or Sets NumberOfInstallments
        /// </summary>
        [DataMember(Name="NumberOfInstallments", EmitDefaultValue=false)]
        public int? NumberOfInstallments { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="Amount", EmitDefaultValue=false)]
        public MoneyWithCurrencyCode Amount { get; set; }

        /// <summary>
        /// Gets or Sets FirstInstallmentAmount
        /// </summary>
        [DataMember(Name="FirstInstallmentAmount", EmitDefaultValue=false)]
        public MoneyWithCurrencyCode FirstInstallmentAmount { get; set; }

        /// <summary>
        /// Gets or Sets RefOrderNumber
        /// </summary>
        [DataMember(Name="RefOrderNumber", EmitDefaultValue=false)]
        public string RefOrderNumber { get; set; }




        /// <summary>
        /// Gets or Sets ExtendedParams
        /// </summary>
        [DataMember(Name="ExtendedParams", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtendedParams { get; set; }

        /// <summary>
        /// Gets or Sets FirstChargeDate
        /// </summary>
        [DataMember(Name="FirstChargeDate", EmitDefaultValue=false)]
        public DateTime? FirstChargeDate { get; set; }

        /// <summary>
        /// Gets or Sets AutoCapture
        /// </summary>
        [DataMember(Name="AutoCapture", EmitDefaultValue=false)]
        public bool? AutoCapture { get; set; }

        /// <summary>
        /// Gets or Sets IsFunded
        /// </summary>
        [DataMember(Name="IsFunded", EmitDefaultValue=false)]
        public bool? IsFunded { get; set; }

        /// <summary>
        /// Gets or Sets Attempt3DSecure
        /// </summary>
        [DataMember(Name="Attempt3DSecure", EmitDefaultValue=false)]
        public Object Attempt3DSecure { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlanData {\n");
            sb.Append("  NumberOfInstallments: ").Append(NumberOfInstallments).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  FirstInstallmentAmount: ").Append(FirstInstallmentAmount).Append("\n");
            sb.Append("  RefOrderNumber: ").Append(RefOrderNumber).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  PurchaseMethod: ").Append(PurchaseMethod).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  ExtendedParams: ").Append(ExtendedParams).Append("\n");
            sb.Append("  FirstChargeDate: ").Append(FirstChargeDate).Append("\n");
            sb.Append("  AutoCapture: ").Append(AutoCapture).Append("\n");
            sb.Append("  IsFunded: ").Append(IsFunded).Append("\n");
            sb.Append("  Attempt3DSecure: ").Append(Attempt3DSecure).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PlanData);
        }

        /// <summary>
        /// Returns true if PlanData instances are equal
        /// </summary>
        /// <param name="input">Instance of PlanData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlanData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfInstallments == input.NumberOfInstallments ||
                    (this.NumberOfInstallments != null &&
                    this.NumberOfInstallments.Equals(input.NumberOfInstallments))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.FirstInstallmentAmount == input.FirstInstallmentAmount ||
                    (this.FirstInstallmentAmount != null &&
                    this.FirstInstallmentAmount.Equals(input.FirstInstallmentAmount))
                ) && 
                (
                    this.RefOrderNumber == input.RefOrderNumber ||
                    (this.RefOrderNumber != null &&
                    this.RefOrderNumber.Equals(input.RefOrderNumber))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                ) && 
                (
                    this.PurchaseMethod == input.PurchaseMethod ||
                    (this.PurchaseMethod != null &&
                    this.PurchaseMethod.Equals(input.PurchaseMethod))
                ) && 
                (
                    this.Strategy == input.Strategy ||
                    (this.Strategy != null &&
                    this.Strategy.Equals(input.Strategy))
                ) && 
                (
                    this.ExtendedParams == input.ExtendedParams ||
                    this.ExtendedParams != null &&
                    this.ExtendedParams.SequenceEqual(input.ExtendedParams)
                ) && 
                (
                    this.FirstChargeDate == input.FirstChargeDate ||
                    (this.FirstChargeDate != null &&
                    this.FirstChargeDate.Equals(input.FirstChargeDate))
                ) && 
                (
                    this.AutoCapture == input.AutoCapture ||
                    (this.AutoCapture != null &&
                    this.AutoCapture.Equals(input.AutoCapture))
                ) && 
                (
                    this.IsFunded == input.IsFunded ||
                    (this.IsFunded != null &&
                    this.IsFunded.Equals(input.IsFunded))
                ) && 
                (
                    this.Attempt3DSecure == input.Attempt3DSecure ||
                    (this.Attempt3DSecure != null &&
                    this.Attempt3DSecure.Equals(input.Attempt3DSecure))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NumberOfInstallments != null)
                    hashCode = hashCode * 59 + this.NumberOfInstallments.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.FirstInstallmentAmount != null)
                    hashCode = hashCode * 59 + this.FirstInstallmentAmount.GetHashCode();
                if (this.RefOrderNumber != null)
                    hashCode = hashCode * 59 + this.RefOrderNumber.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                if (this.PurchaseMethod != null)
                    hashCode = hashCode * 59 + this.PurchaseMethod.GetHashCode();
                if (this.Strategy != null)
                    hashCode = hashCode * 59 + this.Strategy.GetHashCode();
                if (this.ExtendedParams != null)
                    hashCode = hashCode * 59 + this.ExtendedParams.GetHashCode();
                if (this.FirstChargeDate != null)
                    hashCode = hashCode * 59 + this.FirstChargeDate.GetHashCode();
                if (this.AutoCapture != null)
                    hashCode = hashCode * 59 + this.AutoCapture.GetHashCode();
                if (this.IsFunded != null)
                    hashCode = hashCode * 59 + this.IsFunded.GetHashCode();
                if (this.Attempt3DSecure != null)
                    hashCode = hashCode * 59 + this.Attempt3DSecure.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
