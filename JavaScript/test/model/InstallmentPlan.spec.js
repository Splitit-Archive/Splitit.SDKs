/**
 * splitit-web-api-public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SplititWebApiPublic);
  }
}(this, function(expect, SplititWebApiPublic) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SplititWebApiPublic.InstallmentPlan();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstallmentPlan', function() {
    it('should create an instance of InstallmentPlan', function() {
      // uncomment below and update the code to test InstallmentPlan
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be.a(SplititWebApiPublic.InstallmentPlan);
    });

    it('should have the property installmentPlanNumber (base name: "InstallmentPlanNumber")', function() {
      // uncomment below and update the code to test the property installmentPlanNumber
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property installmentPlanStatus (base name: "InstallmentPlanStatus")', function() {
      // uncomment below and update the code to test the property installmentPlanStatus
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "Amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property outstandingAmount (base name: "OutstandingAmount")', function() {
      // uncomment below and update the code to test the property outstandingAmount
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property numberOfInstallments (base name: "NumberOfInstallments")', function() {
      // uncomment below and update the code to test the property numberOfInstallments
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property numberOfProcessedInstallments (base name: "NumberOfProcessedInstallments")', function() {
      // uncomment below and update the code to test the property numberOfProcessedInstallments
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property originalAmount (base name: "OriginalAmount")', function() {
      // uncomment below and update the code to test the property originalAmount
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property refundAmount (base name: "RefundAmount")', function() {
      // uncomment below and update the code to test the property refundAmount
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property consumer (base name: "Consumer")', function() {
      // uncomment below and update the code to test the property consumer
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property activeCard (base name: "ActiveCard")', function() {
      // uncomment below and update the code to test the property activeCard
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property fraudCheck (base name: "FraudCheck")', function() {
      // uncomment below and update the code to test the property fraudCheck
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property terminal (base name: "Terminal")', function() {
      // uncomment below and update the code to test the property terminal
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property merchant (base name: "Merchant")', function() {
      // uncomment below and update the code to test the property merchant
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property refOrderNumber (base name: "RefOrderNumber")', function() {
      // uncomment below and update the code to test the property refOrderNumber
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property purchaseMethod (base name: "PurchaseMethod")', function() {
      // uncomment below and update the code to test the property purchaseMethod
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property strategy (base name: "Strategy")', function() {
      // uncomment below and update the code to test the property strategy
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property delayResolution (base name: "DelayResolution")', function() {
      // uncomment below and update the code to test the property delayResolution
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property keepNonApprovedPlanLive (base name: "KeepNonApprovedPlanLive")', function() {
      // uncomment below and update the code to test the property keepNonApprovedPlanLive
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property extendPlanLiveTimeOnPaymentRequest (base name: "ExtendPlanLiveTimeOnPaymentRequest")', function() {
      // uncomment below and update the code to test the property extendPlanLiveTimeOnPaymentRequest
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property extendPlanLiveTimeOnApprovalRequest (base name: "ExtendPlanLiveTimeOnApprovalRequest")', function() {
      // uncomment below and update the code to test the property extendPlanLiveTimeOnApprovalRequest
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property extendedParams (base name: "ExtendedParams")', function() {
      // uncomment below and update the code to test the property extendedParams
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property isFullCaptured (base name: "IsFullCaptured")', function() {
      // uncomment below and update the code to test the property isFullCaptured
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property isChargedBack (base name: "IsChargedBack")', function() {
      // uncomment below and update the code to test the property isChargedBack
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property arePaymentsOnHold (base name: "ArePaymentsOnHold")', function() {
      // uncomment below and update the code to test the property arePaymentsOnHold
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property scpFundingPercent (base name: "ScpFundingPercent")', function() {
      // uncomment below and update the code to test the property scpFundingPercent
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property testMode (base name: "TestMode")', function() {
      // uncomment below and update the code to test the property testMode
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property creationDateTime (base name: "CreationDateTime")', function() {
      // uncomment below and update the code to test the property creationDateTime
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property installments (base name: "Installments")', function() {
      // uncomment below and update the code to test the property installments
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

    it('should have the property secureAuthorizations (base name: "SecureAuthorizations")', function() {
      // uncomment below and update the code to test the property secureAuthorizations
      //var instane = new SplititWebApiPublic.InstallmentPlan();
      //expect(instance).to.be();
    });

  });

}));
