/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApproveInstallmentPlanRequest from '../model/ApproveInstallmentPlanRequest';
import CancelInstallmentPlanRequest from '../model/CancelInstallmentPlanRequest';
import CreateInstallmentPlanRequest from '../model/CreateInstallmentPlanRequest';
import CreateInstallmentsPlanResponse from '../model/CreateInstallmentsPlanResponse';
import Get3DSecureParametersRequest from '../model/Get3DSecureParametersRequest';
import Get3DSecureParametersResponse from '../model/Get3DSecureParametersResponse';
import GetInstallmentsPlanResponse from '../model/GetInstallmentsPlanResponse';
import GetInstallmentsPlanSearchCriteriaRequest from '../model/GetInstallmentsPlanSearchCriteriaRequest';
import InitiateInstallmentPlanRequest from '../model/InitiateInstallmentPlanRequest';
import InitiateInstallmentsPlanResponse from '../model/InitiateInstallmentsPlanResponse';
import InstallmentPlanResponse from '../model/InstallmentPlanResponse';
import RefundInstallmentPlanResponse from '../model/RefundInstallmentPlanResponse';
import RefundPlanRequest from '../model/RefundPlanRequest';
import StartInstallmentsRequest from '../model/StartInstallmentsRequest';
import UpdateInstallmentPlanRequest from '../model/UpdateInstallmentPlanRequest';
import UpdateInstallmentsPlanResponse from '../model/UpdateInstallmentsPlanResponse';
import VerifyPaymentRequest from '../model/VerifyPaymentRequest';
import VerifyPaymentResponse from '../model/VerifyPaymentResponse';

/**
* InstallmentPlan service.
* @module api/InstallmentPlanApi
* @version 1.1.0
*/
export default class InstallmentPlanApi {

    /**
    * Constructs a new InstallmentPlanApi. 
    * @alias module:api/InstallmentPlanApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance();
    }


    /**
     * Callback function to receive the result of the installmentPlanApprove operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanApproveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallmentPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ApproveInstallmentPlanRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanApproveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallmentPlanResponse}
     */
    installmentPlanApprove(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanApprove");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InstallmentPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Approve', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanCancel operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallmentPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CancelInstallmentPlanRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallmentPlanResponse}
     */
    installmentPlanCancel(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanCancel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InstallmentPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanCreate operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateInstallmentsPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CreateInstallmentPlanRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateInstallmentsPlanResponse}
     */
    installmentPlanCreate(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = CreateInstallmentsPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanGet operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetInstallmentsPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/GetInstallmentsPlanSearchCriteriaRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetInstallmentsPlanResponse}
     */
    installmentPlanGet(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanGet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = GetInstallmentsPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Get', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanGet3DSecureParameters operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanGet3DSecureParametersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Get3DSecureParametersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/Get3DSecureParametersRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanGet3DSecureParametersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Get3DSecureParametersResponse}
     */
    installmentPlanGet3DSecureParameters(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanGet3DSecureParameters");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = Get3DSecureParametersResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Get3DSecureParameters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanInitiate operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanInitiateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InitiateInstallmentsPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/InitiateInstallmentPlanRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanInitiateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InitiateInstallmentsPlanResponse}
     */
    installmentPlanInitiate(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanInitiate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InitiateInstallmentsPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Initiate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanRefund operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefundInstallmentPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/RefundPlanRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefundInstallmentPlanResponse}
     */
    installmentPlanRefund(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanRefund");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = RefundInstallmentPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanStartInstallments operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanStartInstallmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstallmentPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/StartInstallmentsRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanStartInstallmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstallmentPlanResponse}
     */
    installmentPlanStartInstallments(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanStartInstallments");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = InstallmentPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/StartInstallments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanUpdate operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateInstallmentsPlanResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UpdateInstallmentPlanRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateInstallmentsPlanResponse}
     */
    installmentPlanUpdate(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanUpdate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = UpdateInstallmentsPlanResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the installmentPlanVerifyPayment operation.
     * @callback module:api/InstallmentPlanApi~installmentPlanVerifyPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifyPaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/VerifyPaymentRequest} request 
     * @param {module:api/InstallmentPlanApi~installmentPlanVerifyPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifyPaymentResponse}
     */
    installmentPlanVerifyPayment(request, callback) {
      let postBody = request;
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling installmentPlanVerifyPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = VerifyPaymentResponse;
      return this.apiClient.callApi(
        '/api/InstallmentPlan/Get/VerifyPayment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
