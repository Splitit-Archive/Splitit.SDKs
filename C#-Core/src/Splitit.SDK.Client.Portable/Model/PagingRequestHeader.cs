/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Portable.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Portable.Model
{
    /// <summary>
    /// PagingRequestHeader
    /// </summary>
    [DataContract]
    public partial class PagingRequestHeader :  IEquatable<PagingRequestHeader>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PagingRequestHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PagingRequestHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PagingRequestHeader" /> class.
        /// </summary>
        /// <param name="skip">skip (required).</param>
        /// <param name="take">take (required).</param>
        public PagingRequestHeader(int? skip = default(int?), int? take = default(int?))
        {
            // to ensure "skip" is required (not null)
            if (skip == null)
            {
                throw new InvalidDataException("skip is a required property for PagingRequestHeader and cannot be null");
            }
            else
            {
                this.Skip = skip;
            }
            // to ensure "take" is required (not null)
            if (take == null)
            {
                throw new InvalidDataException("take is a required property for PagingRequestHeader and cannot be null");
            }
            else
            {
                this.Take = take;
            }
        }

        
        /// <summary>
        /// Gets or Sets Skip
        /// </summary>
        [DataMember(Name="Skip", EmitDefaultValue=false)]
        public int? Skip { get; set; }

        /// <summary>
        /// Gets or Sets Take
        /// </summary>
        [DataMember(Name="Take", EmitDefaultValue=false)]
        public int? Take { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PagingRequestHeader {\n");
            sb.Append("  Skip: ").Append(Skip).Append("\n");
            sb.Append("  Take: ").Append(Take).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PagingRequestHeader);
        }

        /// <summary>
        /// Returns true if PagingRequestHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of PagingRequestHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PagingRequestHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Skip == input.Skip ||
                    (this.Skip != null &&
                    this.Skip.Equals(input.Skip))
                ) && 
                (
                    this.Take == input.Take ||
                    (this.Take != null &&
                    this.Take.Equals(input.Take))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Skip != null)
                    hashCode = hashCode * 59 + this.Skip.GetHashCode();
                if (this.Take != null)
                    hashCode = hashCode * 59 + this.Take.GetHashCode();
                return hashCode;
            }
        }
    }

}
