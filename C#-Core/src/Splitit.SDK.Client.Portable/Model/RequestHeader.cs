/* 
 * splitit-web-api-public
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Splitit.SDK.Client.Portable.Client.SwaggerDateConverter;

namespace Splitit.SDK.Client.Portable.Model
{
    /// <summary>
    /// RequestHeader
    /// </summary>
    [DataContract]
    public partial class RequestHeader :  IEquatable<RequestHeader>
    {
        /// <summary>
        /// Gets or Sets AuthenticationType
        /// </summary>
        [DataMember(Name="AuthenticationType", EmitDefaultValue=false)]
        public AuthenticationType? AuthenticationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestHeader" /> class.
        /// </summary>
        /// <param name="touchPoint">touchPoint.</param>
        /// <param name="sessionId">sessionId.</param>
        /// <param name="apiKey">apiKey.</param>
        /// <param name="cultureName">cultureName.</param>
        /// <param name="authenticationType">authenticationType.</param>
        public RequestHeader(TouchPoint touchPoint = default(TouchPoint), string sessionId = default(string), string apiKey = default(string), string cultureName = default(string), AuthenticationType? authenticationType = default(AuthenticationType?))
        {
            this.TouchPoint = touchPoint;
            this.SessionId = sessionId;
            this.ApiKey = apiKey;
            this.CultureName = cultureName;
            this.AuthenticationType = authenticationType;
        }
        
        /// <summary>
        /// Gets or Sets TouchPoint
        /// </summary>
        [DataMember(Name="TouchPoint", EmitDefaultValue=false)]
        public TouchPoint TouchPoint { get; set; }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [DataMember(Name="SessionId", EmitDefaultValue=false)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        [DataMember(Name="ApiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets CultureName
        /// </summary>
        [DataMember(Name="CultureName", EmitDefaultValue=false)]
        public string CultureName { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestHeader {\n");
            sb.Append("  TouchPoint: ").Append(TouchPoint).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  CultureName: ").Append(CultureName).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestHeader);
        }

        /// <summary>
        /// Returns true if RequestHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TouchPoint == input.TouchPoint ||
                    (this.TouchPoint != null &&
                    this.TouchPoint.Equals(input.TouchPoint))
                ) && 
                (
                    this.SessionId == input.SessionId ||
                    (this.SessionId != null &&
                    this.SessionId.Equals(input.SessionId))
                ) && 
                (
                    this.ApiKey == input.ApiKey ||
                    (this.ApiKey != null &&
                    this.ApiKey.Equals(input.ApiKey))
                ) && 
                (
                    this.CultureName == input.CultureName ||
                    (this.CultureName != null &&
                    this.CultureName.Equals(input.CultureName))
                ) && 
                (
                    this.AuthenticationType == input.AuthenticationType ||
                    (this.AuthenticationType != null &&
                    this.AuthenticationType.Equals(input.AuthenticationType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TouchPoint != null)
                    hashCode = hashCode * 59 + this.TouchPoint.GetHashCode();
                if (this.SessionId != null)
                    hashCode = hashCode * 59 + this.SessionId.GetHashCode();
                if (this.ApiKey != null)
                    hashCode = hashCode * 59 + this.ApiKey.GetHashCode();
                if (this.CultureName != null)
                    hashCode = hashCode * 59 + this.CultureName.GetHashCode();
                if (this.AuthenticationType != null)
                    hashCode = hashCode * 59 + this.AuthenticationType.GetHashCode();
                return hashCode;
            }
        }
    }

}
