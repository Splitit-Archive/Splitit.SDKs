/* 
 * splitit-web-api-public-sdk
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using Splitit.SDK.Client.Portable.Model;
using System.Collections.Generic;

namespace Splitit.SDK.Client.Portable.Client
{
    /// <summary>
    /// API Exception
    /// </summary>
    public class ApiException : Exception
    {
        /// <summary>
        /// Gets or sets the error code (HTTP status code)
        /// </summary>
        /// <value>The error code (HTTP status code).</value>
        public int ErrorCode { get; set; }

        /// <summary>
        /// Gets or sets the error content (body json object)
        /// </summary>
        /// <value>The error content (Http response body).</value>
        public dynamic ErrorContent { get; private set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        public ApiException() {}

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        public ApiException(int errorCode, string message) : base(message)
        {
            this.ErrorCode = errorCode;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ApiException"/> class.
        /// </summary>
        /// <param name="errorCode">HTTP status code.</param>
        /// <param name="message">Error message.</param>
        /// <param name="errorContent">Error content.</param>
        public ApiException(int errorCode, string message, dynamic errorContent = null) : base(message)
        {
            this.ErrorCode = errorCode;
            this.ErrorContent = errorContent;
        }
    }

    public class SplititApiException : Exception
    {
        public string Code { get; }
        public string AdditionalInfo { get; private set; }

        public SplititApiException(string errorCode, string message)
            : base(message)
        {
            this.Code = errorCode;
        }

        public static Exception FromResponse(ResponseHeader responseHeader)
        {
            if (responseHeader.Errors.Count == 0)
            {
                return new SplititApiException("-2", "Unknown error has ocurred.");
            }

            var errors = new List<SplititApiException>();

            foreach(var err in responseHeader.Errors)
            {
                errors.Add(new SplititApiException(err.ErrorCode, err.Message)
                {
                    AdditionalInfo = err.AdditionalInfo
                });
            }

            if (errors.Count == 1)
                return errors[0];

            return new AggregateException(errors);
        }
    }

}
