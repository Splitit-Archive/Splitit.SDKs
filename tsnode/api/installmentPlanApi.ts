/**
 * splitit-web-api-public-sdk
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { ApproveInstallmentPlanRequest } from '../model/approveInstallmentPlanRequest';
import { CancelInstallmentPlanRequest } from '../model/cancelInstallmentPlanRequest';
import { ChargebackRequest } from '../model/chargebackRequest';
import { CreateInstallmentPlanRequest } from '../model/createInstallmentPlanRequest';
import { CreateInstallmentsPlanResponse } from '../model/createInstallmentsPlanResponse';
import { Get3DSecureParametersRequest } from '../model/get3DSecureParametersRequest';
import { Get3DSecureParametersResponse } from '../model/get3DSecureParametersResponse';
import { GetFraudStatusDisplayRequest } from '../model/getFraudStatusDisplayRequest';
import { GetFraudStatusDisplayResponse } from '../model/getFraudStatusDisplayResponse';
import { GetInitiatedInstallmentPlanRequest } from '../model/getInitiatedInstallmentPlanRequest';
import { GetInitiatedInstallmentPlanResponse } from '../model/getInitiatedInstallmentPlanResponse';
import { GetInitiatedUpdatePaymentDataResponse } from '../model/getInitiatedUpdatePaymentDataResponse';
import { GetInstallmentSchedulesRequest } from '../model/getInstallmentSchedulesRequest';
import { GetInstallmentsPlanExtendedResponse } from '../model/getInstallmentsPlanExtendedResponse';
import { GetInstallmentsPlanResponse } from '../model/getInstallmentsPlanResponse';
import { GetInstallmentsPlanSearchCriteriaRequest } from '../model/getInstallmentsPlanSearchCriteriaRequest';
import { GetInstallmentsScheduleResponse } from '../model/getInstallmentsScheduleResponse';
import { GetPGTLRequest } from '../model/getPGTLRequest';
import { GetPGTLResponse } from '../model/getPGTLResponse';
import { InitiateInstallmentPlanRequest } from '../model/initiateInstallmentPlanRequest';
import { InitiateInstallmentsPlanResponse } from '../model/initiateInstallmentsPlanResponse';
import { InstallmentPlanResponse } from '../model/installmentPlanResponse';
import { LearnMoreDetailsRequest } from '../model/learnMoreDetailsRequest';
import { LearnMoreDetailsResponse } from '../model/learnMoreDetailsResponse';
import { RefundInstallmentPlanResponse } from '../model/refundInstallmentPlanResponse';
import { RefundPlanRequest } from '../model/refundPlanRequest';
import { StartInstallmentsRequest } from '../model/startInstallmentsRequest';
import { TermsAndConditionsGetRequest } from '../model/termsAndConditionsGetRequest';
import { TermsAndConditionsGetResponse } from '../model/termsAndConditionsGetResponse';
import { TestCardRequest } from '../model/testCardRequest';
import { UpdateInstallmentPlanRequest } from '../model/updateInstallmentPlanRequest';
import { UpdateInstallmentsPlanResponse } from '../model/updateInstallmentsPlanResponse';
import { VerifyPaymentRequest } from '../model/verifyPaymentRequest';
import { VerifyPaymentResponse } from '../model/verifyPaymentResponse';

import { ObjectSerializer, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';
import { Configuration } from '../runtime';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


export class InstallmentPlanApi {
    protected _config: Configuration;
    protected _sessionId?: string;
    protected _culture?: string;
    protected _defaultHeaders : any = {};

    protected interceptors: Interceptor[] = [];

    constructor(config: Configuration, sessionId?: string) {
        this._config = config;
        this._defaultHeaders = {
            "Splitit-SDK": "NodeJS-1.6.7"
        };
        this._sessionId = sessionId;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._config.basePath;
    }

    public setCulture(culture){
        this._culture = culture;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @param request 
     */
    public async installmentPlanApprove (request: ApproveInstallmentPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Approve';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanApprove.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "ApproveInstallmentPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanCancel (request: CancelInstallmentPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Cancel';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanCancel.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "CancelInstallmentPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanChargeBack (request: ChargebackRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/ChargeBack';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanChargeBack.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "ChargebackRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanCreate (request: CreateInstallmentPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: CreateInstallmentsPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Create';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanCreate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "CreateInstallmentPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: CreateInstallmentsPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "CreateInstallmentsPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGet (request: GetInstallmentsPlanSearchCriteriaRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetInstallmentsPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Get';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGet.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "GetInstallmentsPlanSearchCriteriaRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetInstallmentsPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetInstallmentsPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGet3DSecureParameters (request: Get3DSecureParametersRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Get3DSecureParametersResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Get3DSecureParameters';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGet3DSecureParameters.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "Get3DSecureParametersRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Get3DSecureParametersResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "Get3DSecureParametersResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGetExtended (request: GetInstallmentsPlanSearchCriteriaRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetInstallmentsPlanExtendedResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetExtended';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGetExtended.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "GetInstallmentsPlanSearchCriteriaRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetInstallmentsPlanExtendedResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetInstallmentsPlanExtendedResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGetFraudStatusDisplay (request: GetFraudStatusDisplayRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetFraudStatusDisplayResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetFraudStatusDisplay';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGetFraudStatusDisplay.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "GetFraudStatusDisplayRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetFraudStatusDisplayResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetFraudStatusDisplayResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGetInitiatedInstallmentPlanRequest (request: GetInitiatedInstallmentPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetInitiatedInstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetInitiatedInstallmentPlanRequest';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGetInitiatedInstallmentPlanRequest.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "GetInitiatedInstallmentPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetInitiatedInstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetInitiatedInstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     */
    public async installmentPlanGetInitiatedUpdatePaymentData (options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetInitiatedUpdatePaymentDataResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetInitiatedUpdatePaymentData';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetInitiatedUpdatePaymentDataResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetInitiatedUpdatePaymentDataResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGetLearnMoreDetails (request: LearnMoreDetailsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: LearnMoreDetailsResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetLearnMoreDetails';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGetLearnMoreDetails.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "LearnMoreDetailsRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: LearnMoreDetailsResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "LearnMoreDetailsResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGetPGTL (request: GetPGTLRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetPGTLResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetPGTL';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGetPGTL.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "GetPGTLRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetPGTLResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetPGTLResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanGetSchedules (request: GetInstallmentSchedulesRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: GetInstallmentsScheduleResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/GetSchedules';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanGetSchedules.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "GetInstallmentSchedulesRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: GetInstallmentsScheduleResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "GetInstallmentsScheduleResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanInitiate (request: InitiateInstallmentPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InitiateInstallmentsPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Initiate';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanInitiate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "InitiateInstallmentPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InitiateInstallmentsPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InitiateInstallmentsPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanRefund (request: RefundPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: RefundInstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Refund';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanRefund.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "RefundPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: RefundInstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "RefundInstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanStartInstallments (request: StartInstallmentsRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/StartInstallments';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanStartInstallments.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "StartInstallmentsRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanTermsAndConditions (request: TermsAndConditionsGetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: TermsAndConditionsGetResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/TermsAndConditions';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanTermsAndConditions.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "TermsAndConditionsGetRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: TermsAndConditionsGetResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "TermsAndConditionsGetResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanTestCard (request: TestCardRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/TestCard';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanTestCard.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "TestCardRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: InstallmentPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "InstallmentPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanUpdate (request: UpdateInstallmentPlanRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: UpdateInstallmentsPlanResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Update';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanUpdate.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "UpdateInstallmentPlanRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: UpdateInstallmentsPlanResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "UpdateInstallmentsPlanResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @param request 
     */
    public async installmentPlanVerifyPayment (request: VerifyPaymentRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: VerifyPaymentResponse;  }> {
        const localVarPath = this.basePath + '/api/InstallmentPlan/Get/VerifyPayment';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/plain', 'application/json', 'text/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'request' is not null or undefined
        if (request === null || request === undefined) {
            throw new Error('Required parameter request was null or undefined when calling installmentPlanVerifyPayment.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: false,
            json: true,
            body: ObjectSerializer.serialize(request, "VerifyPaymentRequest")
        };

        if (this._config.touchPoint || this._sessionId){
            localVarRequestOptions.body.requestHeader = {};
            if (this._config.touchPoint){
                localVarRequestOptions.body.requestHeader.touchPoint = this._config.touchPoint;
            }

            if (this._sessionId){
                localVarRequestOptions.body.requestHeader.sessionId = this._sessionId;
                localVarRequestOptions.body.requestHeader.apiKey = this._config.apiKey;
            }

            if (this._culture){
                localVarRequestOptions.body.requestHeader.cultureName = this._culture;
            }
        }

        let interceptorPromise = Promise.resolve();
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: VerifyPaymentResponse;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        body = ObjectSerializer.deserialize(body, "VerifyPaymentResponse");

                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            if (body && body.responseHeader && !body.responseHeader.succeeded){
                                reject(body.responseHeader);
                            } else {
                                resolve({ response: response, body: body });
                            }                            
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
