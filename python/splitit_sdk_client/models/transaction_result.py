# coding: utf-8

"""
    splitit-web-api-public

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TransactionResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gateway_transaction_id': 'str',
        'gateway_result_code': 'str',
        'gateway_result_message': 'str',
        'operation_type': 'ReferenceEntityBase',
        'gateway_result': 'bool',
        'gateway_transaction_date': 'datetime'
    }

    attribute_map = {
        'gateway_transaction_id': 'GatewayTransactionId',
        'gateway_result_code': 'GatewayResultCode',
        'gateway_result_message': 'GatewayResultMessage',
        'operation_type': 'OperationType',
        'gateway_result': 'GatewayResult',
        'gateway_transaction_date': 'GatewayTransactionDate'
    }

    def __init__(self, gateway_transaction_id=None, gateway_result_code=None, gateway_result_message=None, operation_type=None, gateway_result=None, gateway_transaction_date=None):  # noqa: E501
        """TransactionResult - a model defined in Swagger"""  # noqa: E501

        self._gateway_transaction_id = None
        self._gateway_result_code = None
        self._gateway_result_message = None
        self._operation_type = None
        self._gateway_result = None
        self._gateway_transaction_date = None
        self.discriminator = None

        if gateway_transaction_id is not None:
            self.gateway_transaction_id = gateway_transaction_id
        if gateway_result_code is not None:
            self.gateway_result_code = gateway_result_code
        if gateway_result_message is not None:
            self.gateway_result_message = gateway_result_message
        if operation_type is not None:
            self.operation_type = operation_type
        self.gateway_result = gateway_result
        self.gateway_transaction_date = gateway_transaction_date

    @property
    def gateway_transaction_id(self):
        """Gets the gateway_transaction_id of this TransactionResult.  # noqa: E501


        :return: The gateway_transaction_id of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_transaction_id

    @gateway_transaction_id.setter
    def gateway_transaction_id(self, gateway_transaction_id):
        """Sets the gateway_transaction_id of this TransactionResult.


        :param gateway_transaction_id: The gateway_transaction_id of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._gateway_transaction_id = gateway_transaction_id

    @property
    def gateway_result_code(self):
        """Gets the gateway_result_code of this TransactionResult.  # noqa: E501


        :return: The gateway_result_code of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_result_code

    @gateway_result_code.setter
    def gateway_result_code(self, gateway_result_code):
        """Sets the gateway_result_code of this TransactionResult.


        :param gateway_result_code: The gateway_result_code of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._gateway_result_code = gateway_result_code

    @property
    def gateway_result_message(self):
        """Gets the gateway_result_message of this TransactionResult.  # noqa: E501


        :return: The gateway_result_message of this TransactionResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_result_message

    @gateway_result_message.setter
    def gateway_result_message(self, gateway_result_message):
        """Sets the gateway_result_message of this TransactionResult.


        :param gateway_result_message: The gateway_result_message of this TransactionResult.  # noqa: E501
        :type: str
        """

        self._gateway_result_message = gateway_result_message

    @property
    def operation_type(self):
        """Gets the operation_type of this TransactionResult.  # noqa: E501


        :return: The operation_type of this TransactionResult.  # noqa: E501
        :rtype: ReferenceEntityBase
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this TransactionResult.


        :param operation_type: The operation_type of this TransactionResult.  # noqa: E501
        :type: ReferenceEntityBase
        """

        self._operation_type = operation_type

    @property
    def gateway_result(self):
        """Gets the gateway_result of this TransactionResult.  # noqa: E501


        :return: The gateway_result of this TransactionResult.  # noqa: E501
        :rtype: bool
        """
        return self._gateway_result

    @gateway_result.setter
    def gateway_result(self, gateway_result):
        """Sets the gateway_result of this TransactionResult.


        :param gateway_result: The gateway_result of this TransactionResult.  # noqa: E501
        :type: bool
        """
        if gateway_result is None:
            raise ValueError("Invalid value for `gateway_result`, must not be `None`")  # noqa: E501

        self._gateway_result = gateway_result

    @property
    def gateway_transaction_date(self):
        """Gets the gateway_transaction_date of this TransactionResult.  # noqa: E501


        :return: The gateway_transaction_date of this TransactionResult.  # noqa: E501
        :rtype: datetime
        """
        return self._gateway_transaction_date

    @gateway_transaction_date.setter
    def gateway_transaction_date(self, gateway_transaction_date):
        """Sets the gateway_transaction_date of this TransactionResult.


        :param gateway_transaction_date: The gateway_transaction_date of this TransactionResult.  # noqa: E501
        :type: datetime
        """
        if gateway_transaction_date is None:
            raise ValueError("Invalid value for `gateway_transaction_date`, must not be `None`")  # noqa: E501

        self._gateway_transaction_date = gateway_transaction_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransactionResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
